[
  {
    "classes": [
      {
        "name": "GlobalSchema",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [
          {
            "typeName": "Sys.Referencable",
            "nameSpace": "Sys",
            "basicName": "Referencable",
            "typeKind": 0,
            "typeArguments": [
              {
                "typeName": "Sys.SchemaString",
                "nameSpace": "Sys",
                "basicName": "SchemaString",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              }
            ],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
          }
        ],
        "fields": [
          {
            "name": "key",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.key",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Name of the global schema, used to refer on schema content"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "value",
            "type": {
              "typeName": "Sys.SchemaString",
              "nameSpace": "Sys",
              "basicName": "SchemaString",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Content of the schema"
                ]
              },
              {
                "name": "MetaModel.canBeValue",
                "arguments": []
              },
              {
                "name": "MetaModel.value",
                "arguments": []
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.actuallyExports",
            "arguments": [
              "value"
            ]
          },
          {
            "name": "MetaModel.description",
            "arguments": [
              "Content of the schema"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "Common.RAMLSimpleElement",
            "nameSpace": "Common",
            "basicName": "RAMLSimpleElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
          }
        ],
        "moduleName": "RAMLSpec"
      },
      {
        "name": "ImportDeclaration",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "key",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.key",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Name prefix (without dot) used to refer imported declarations"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "value",
            "type": {
              "typeName": "Library",
              "nameSpace": "",
              "basicName": "Library",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Content of the declared namespace"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Common.RAMLSimpleElement",
            "nameSpace": "Common",
            "basicName": "RAMLSimpleElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
          }
        ],
        "moduleName": "RAMLSpec"
      },
      {
        "name": "Library",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "title",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "name",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.key",
                "arguments": []
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "schemas",
            "type": {
              "base": {
                "typeName": "GlobalSchema",
                "nameSpace": "",
                "basicName": "GlobalSchema",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.embeddedInMaps",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "To better achieve consistency and simplicity, the API definition SHOULD include an OPTIONAL schemas property in the root section. The schemas property specifies collections of schemas that could be used anywhere in the API definition. The value of the schemas property is an array of maps; in each map, the keys are the schema name, and the values are schema definitions. The schema definitions MAY be included inline or by using the RAML !include user-defined data type."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "types",
            "type": {
              "base": {
                "typeName": "models.DataElement",
                "nameSpace": "models",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.embeddedInMaps",
                "arguments": []
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "locationKind",
                  "models.LocationKind.MODELS"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Models is a new feature to represent data types consumes and produced by HTTP rest calls (TODO IMPROVE IT)"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "traits",
            "type": {
              "base": {
                "typeName": "RM.Trait",
                "nameSpace": "RM",
                "basicName": "Trait",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.embeddedInMaps",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Declarations of traits used in this API"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "resourceTypes",
            "type": {
              "base": {
                "typeName": "RM.ResourceType",
                "nameSpace": "RM",
                "basicName": "ResourceType",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.embeddedInMaps",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Declaration of resource types used in this API"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "annotationTypes",
            "type": {
              "base": {
                "typeName": "Decls.AnnotationType",
                "nameSpace": "Decls",
                "basicName": "AnnotationType",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.embeddedInMaps",
                "arguments": []
              },
              {
                "name": "MetaModel.version",
                "arguments": [
                  "MetaModel.RAMLVersion.RAML10"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "annotationTypes property allows user to declare types of used annotations"
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "Clearly shows that better modularization needed"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "decls",
                  "true"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "securitySchemaTypes",
            "type": {
              "base": {
                "typeName": "RM.SecuritySchemaType",
                "nameSpace": "RM",
                "basicName": "SecuritySchemaType",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.embeddedInMaps",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Security schemas types declarations"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "securitySchemes",
            "type": {
              "base": {
                "typeName": "RM.SecuritySchema",
                "nameSpace": "RM",
                "basicName": "SecuritySchema",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.embeddedInMaps",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Security schemas declarations"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "uses",
            "type": {
              "base": {
                "typeName": "Library",
                "nameSpace": "",
                "basicName": "Library",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.embeddedInMaps",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Importing of modules with declaratons"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "decls",
                  "true"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Common.RAMLLanguageElement",
            "nameSpace": "Common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
          }
        ],
        "moduleName": "RAMLSpec"
      },
      {
        "name": "Overlay",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "masterRef",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.required",
                "arguments": []
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Api",
            "nameSpace": "",
            "basicName": "Api",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
          }
        ],
        "moduleName": "RAMLSpec"
      },
      {
        "name": "Extension",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "masterRef",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.required",
                "arguments": []
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Api",
            "nameSpace": "",
            "basicName": "Api",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
          }
        ],
        "moduleName": "RAMLSpec"
      },
      {
        "name": "Api",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "title",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.required",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The title property is a short plain text description of the RESTful API. The title property's value SHOULD be suitable for use as a title for the contained user documentation."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "version",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "If the RAML API definition is targeted to a specific API version, the API definition MUST contain a version property. The version property is OPTIONAL and should not be used if:\nThe API itself is not versioned.\nThe API definition does not change between versions. The API architect can decide whether a change to user documentation elements, but no change to the API's resources, constitutes a version change.\nThe API architect MAY use any versioning scheme so long as version numbers retain the same format. For example, \"v3\", \"v3.0\", and \"V3\" are all allowed, but are not considered to be equal."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "baseUri",
            "type": {
              "typeName": "Sys.FullUriTemplate",
              "nameSpace": "Sys",
              "basicName": "FullUriTemplate",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "(Optional during development; Required after implementation) A RESTful API's resources are defined relative to the API's base URI. The use of the baseUri field is OPTIONAL to allow describing APIs that have not yet been implemented. After the API is implemented (even a mock implementation) and can be accessed at a service endpoint, the API definition MUST contain a baseUri property. The baseUri property's value MUST conform to the URI specification [RFC2396] or a Level 1 Template URI as defined in RFC 6570 [RFC6570].\n            The baseUri property SHOULD only be used as a reference value. API client generators MAY make the baseUri configurable by the API client's users.\n            If the baseUri value is a Level 1 Template URI, the following reserved base URI parameters are available for replacement:"
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/72"
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/119"
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "Overrriding on resource level looks pretty strange"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "baseUriParameters",
            "type": {
              "base": {
                "typeName": "models.DataElement",
                "nameSpace": "models",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "location",
                  "models.ModelLocation.BURI"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "locationKind",
                  "models.LocationKind.APISTRUCTURE"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Base uri parameters are named parameters which described template parameters in the base uri"
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "Specification is not good enough"
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/150"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "protocols",
            "type": {
              "base": {
                "typeName": "string",
                "nameSpace": "",
                "basicName": "string",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": null
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.oneOf",
                "arguments": [
                  [
                    "HTTP",
                    "HTTPS"
                  ]
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "Not clear how it should work in combination with baseUri"
                ]
              },
              {
                "name": "MetaModel.needsClarification",
                "arguments": [
                  "Actually it is a set"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "A RESTful API can be reached HTTP, HTTPS, or both. The protocols property MAY be used to specify the protocols that an API supports. If the protocols property is not specified, the protocol specified at the baseUri property is used. The protocols property MUST be an array of strings, of values `HTTP` and/or `HTTPS`."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "mediaType",
            "type": {
              "typeName": "Bodies.MimeType",
              "nameSpace": "Bodies",
              "basicName": "MimeType",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.oftenKeys",
                "arguments": [
                  [
                    "application/json",
                    "application/xml",
                    "application/x-www-form-urlencoded",
                    "multipart/formdata"
                  ]
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "(Optional) The media types returned by API responses, and expected from API requests that accept a body, MAY be defaulted by specifying the mediaType property. This property is specified at the root level of the API definition. The property's value MAY be a single string with a valid media type:\nOne of the following YAML media types:\ntext/yaml\ntext/x-yaml\napplication/yaml\napplication/x-yaml*\nAny type from the list of IANA MIME Media Types, http://www.iana.org/assignments/media-types\nA custom type that conforms to the regular expression, \"application/[A-Za-z.-0-1]*+?(json|xml)\"\nFor any combination of resource and operation in the API, if a media type is specified as a key of the body property for that resource and operation, or if a media type is specified in the mediaType property, the body MUST be in the specified media types. Moreover, if the client specifies an Accepts header containing multiple media types that are allowed by the specification for the requested resource and operation, the server SHOULD return a body using the media type in the Accepts header's mediaType list.\n"
                ]
              },
              {
                "name": "MetaModel.needsClarification",
                "arguments": [
                  "should be open enum"
                ]
              },
              {
                "name": "MetaModel.inherited",
                "arguments": []
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "securedBy",
            "type": {
              "base": {
                "typeName": "RM.SecuritySchemaRef",
                "nameSpace": "RM",
                "basicName": "SecuritySchemaRef",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "Not stated clearly in spec"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  " securityScheme may also be applied to a resource by using the securedBy key, which is equivalent to applying the securityScheme to all methods that may be declared, explicitly or implicitly, by defining the resourceTypes or traits property for that resource.\nTo indicate that the method may be called without applying any securityScheme, the method may be annotated with the null securityScheme."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "resources",
            "type": {
              "base": {
                "typeName": "RM.Resource",
                "nameSpace": "RM",
                "basicName": "Resource",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.newInstanceName",
                "arguments": [
                  "New Resource"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Resources are identified by their relative URI, which MUST begin with a slash (/).\nA resource defined as a root-level property is called a top-level resource. Its property's key is the resource's URI relative to the baseUri.\nA resource defined as a child property of another resource is called a nested resource, and its property's key is its URI relative to its parent resource's URI.\nEvery property whose key begins with a slash (/), and is either at the root of the API definition or is the child property of a resource property, is a resource property. The key of a resource, i.e. its relative URI, MAY consist of multiple URI path fragments separated by slashes; e.g. \"/bom/items\" may indicate the collection of items in a bill of materials as a single resource. However, if the individual URI path fragments are themselves resources, the API definition SHOULD use nested resources to describe this structure; e.g. if \"/bom\" is itself a resource then \"/items\" should be a nested resource of \"/bom\", while \"/bom/items\" should not be used."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "documentation",
            "type": {
              "base": {
                "typeName": "DocumentationItem",
                "nameSpace": "",
                "basicName": "DocumentationItem",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The API definition can include a variety of documents that serve as a user guides and reference documentation for the API. Such documents can clarify how the API works or provide business context.\n            Documentation-generators MUST include all the sections in an API definition's documentation property in the documentation output, and they MUST preserve the order in which the documentation is declared.\n            To add user documentation to the API, include the documentation property at the root of the API definition. The documentation property MUST be an array of documents. Each document MUST contain title and content attributes, both of which are REQUIRED. If the documentation property is specified, it MUST include at least one document.\n            Documentation-generators MUST process the content field as if it was defined using Markdown [MARKDOWN].\n\n        This example shows an API definition with a single user document."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Library",
            "nameSpace": "",
            "basicName": "Library",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
          }
        ],
        "moduleName": "RAMLSpec"
      },
      {
        "name": "DocumentationItem",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "title",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "title of documentation section"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "content",
            "type": {
              "typeName": "Sys.MarkdownString",
              "nameSpace": "Sys",
              "basicName": "MarkdownString",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Content of documentation section"
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "Needs better documentation, I would like to polish it in 1.0"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Common.RAMLLanguageElement",
            "nameSpace": "Common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
          }
        ],
        "moduleName": "RAMLSpec"
      },
      {
        "name": "ScriptSpec",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "language",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "content",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Common.RAMLLanguageElement",
            "nameSpace": "Common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
          }
        ],
        "moduleName": "RAMLSpec"
      },
      {
        "name": "ApiDescription",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "apiFiles",
            "type": {
              "base": {
                "typeName": "Api",
                "nameSpace": "",
                "basicName": "Api",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "script",
            "type": {
              "base": {
                "typeName": "ScriptSpec",
                "nameSpace": "",
                "basicName": "ScriptSpec",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "type",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.oneOf",
                "arguments": [
                  [
                    "endpoint",
                    "callback"
                  ]
                ]
              },
              {
                "name": "MetaModel.descriminatingProperty",
                "arguments": []
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Common.RAMLLanguageElement",
            "nameSpace": "Common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
          }
        ],
        "moduleName": "RAMLSpec"
      },
      {
        "name": "CallbackAPIDescription",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "callback"
            },
            "optional": false
          },
          {
            "name": "callbackFor",
            "type": {
              "typeName": "Api",
              "nameSpace": "",
              "basicName": "Api",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "ApiDescription",
            "nameSpace": "",
            "basicName": "ApiDescription",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
          }
        ],
        "moduleName": "RAMLSpec"
      },
      {
        "name": "RAMLProject",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "relatedProjects",
            "type": {
              "base": {
                "typeName": "RAMLProject",
                "nameSpace": "",
                "basicName": "RAMLProject",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "declaredApis",
            "type": {
              "base": {
                "typeName": "ApiDescription",
                "nameSpace": "",
                "basicName": "ApiDescription",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
              },
              "typeKind": 1
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "license",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "overview",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "url",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Common.RAMLLanguageElement",
            "nameSpace": "Common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
          }
        ],
        "moduleName": "RAMLSpec"
      }
    ],
    "aliases": [],
    "enumDeclarations": [],
    "imports": {
      "MetaModel": "c:\\GIT-repos\\raml-labs\\src\\raml1\\metamodel.ts",
      "Sys": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts",
      "RM": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts",
      "Decls": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\declarations.ts",
      "Params": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\parameters.ts",
      "Common": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\common.ts",
      "Bodies": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\bodies.ts",
      "models": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
    },
    "name": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\api.ts"
  },
  {
    "classes": [
      {
        "name": "SpecPartMetaData",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "title",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      }
    ],
    "aliases": [],
    "enumDeclarations": [
      {
        "name": "RAMLVersion",
        "members": [
          "RAML08",
          "RAML10"
        ]
      }
    ],
    "imports": {},
    "name": "c:\\GIT-repos\\raml-labs\\src\\raml1\\metamodel.ts"
  },
  {
    "classes": [
      {
        "name": "ValueType",
        "methods": [
          {
            "name": "parse",
            "start": 69,
            "end": 234,
            "text": "\n    /**\n     * parses inner structure of value type if value type has invalid value you should throw error\n     * with descriptive message\n     */\n    parse():any{}"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "StringType",
        "methods": [
          {
            "name": "value",
            "start": 321,
            "end": 349,
            "text": " value():string{return null}"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.nameAtRuntime",
            "arguments": [
              "string"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "ValueType",
            "nameSpace": "",
            "basicName": "ValueType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "NumberType",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.nameAtRuntime",
            "arguments": [
              "number"
            ]
          },
          {
            "name": "MetaModel.alias",
            "arguments": [
              "integer"
            ]
          },
          {
            "name": "MetaModel.alias",
            "arguments": [
              "number"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "ValueType",
            "nameSpace": "",
            "basicName": "ValueType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "BooleanType",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.nameAtRuntime",
            "arguments": [
              "boolean"
            ]
          },
          {
            "name": "MetaModel.alias",
            "arguments": [
              "boolean"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "ValueType",
            "nameSpace": "",
            "basicName": "ValueType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "Referencable",
        "methods": [],
        "typeParameters": [
          "T"
        ],
        "typeParameterConstraint": [
          null
        ],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "Reference",
        "methods": [],
        "typeParameters": [
          "T"
        ],
        "typeParameterConstraint": [
          null
        ],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "ValueType",
            "nameSpace": "",
            "basicName": "ValueType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "DeclaresDynamicType",
        "methods": [],
        "typeParameters": [
          "T"
        ],
        "typeParameterConstraint": [
          null
        ],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [
          {
            "typeName": "Referencable",
            "nameSpace": "",
            "basicName": "Referencable",
            "typeKind": 0,
            "typeArguments": [
              {
                "typeName": "T",
                "nameSpace": "",
                "basicName": "T",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
              }
            ],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "UriTemplate",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "This type currently serves both for absolute and relative urls"
            ]
          },
          {
            "name": "MetaModel.issue",
            "arguments": [
              "https://github.com/raml-org/raml-spec/issues/115"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "StringType",
            "nameSpace": "",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "StatusCode",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "StringType",
            "nameSpace": "",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "ramlexpression",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "ValueType",
            "nameSpace": "",
            "basicName": "ValueType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "RelativeUri",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "This  type describes relative uri templates"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "UriTemplate",
            "nameSpace": "",
            "basicName": "UriTemplate",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "FullUriTemplate",
        "methods": [
          {
            "name": "validate",
            "start": 2412,
            "end": 3342,
            "text": "\n    //parse():string[]{\n    //    var value=this.value();\n    //    var result=[]\n    //    var temp=\"\";\n    //    var inPar=false;\n    //    var count=0;\n    //    for (var a=0;a<value.length;a++){\n    //        var c=value[a];\n    //        if (c=='{'){\n    //            count++;\n    //            inPar=true;\n    //            continue;\n    //        }\n    //        if (c=='}'){\n    //            count--;\n    //            inPar=false;\n    //            result.push(temp);\n    //            temp=\"\";\n    //            continue;\n    //        }\n    //        if (inPar){\n    //            temp+=c;\n    //        }\n    //    }\n    //    if (count>0){\n    //        throw new Error(\"Unmatched '{'\")\n    //    }\n    //    if (count<0){\n    //        throw new Error(\"Unmatched '}'\")\n    //    }\n    //    return result;\n    //}\n\n    validate(){\n        var str=this.value();\n        //write something to validate Url here\n    }"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "This  type describes absolute uri templates"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "UriTemplate",
            "nameSpace": "",
            "basicName": "UriTemplate",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "FixedUri",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "This  type describes fixed uris"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "StringType",
            "nameSpace": "",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "ContentType",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "StringType",
            "nameSpace": "",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "ValidityExpression",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "StringType",
            "nameSpace": "",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "MarkdownString",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.innerType",
            "arguments": [
              "markdown"
            ]
          },
          {
            "name": "MetaModel.issue",
            "arguments": [
              "https://github.com/raml-org/raml-spec/issues/80"
            ]
          },
          {
            "name": "MetaModel.description",
            "arguments": [
              "Mardown string is a string which can contain markdown as an extension this markdown should support links with RAML Pointers since 1.0"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "StringType",
            "nameSpace": "",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "DateFormatSpec",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "StringType",
            "nameSpace": "",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "FunctionalInterface",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "StringType",
            "nameSpace": "",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "SchemaString",
        "methods": [
          {
            "name": "validate",
            "start": 4227,
            "end": 4410,
            "text": "\n\n    validate(){\n        var str=this.value();\n        //write something to validate schema here here\n        //in fact it should check that content is valid json or xsd schema\n    }"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Schema at this moment only two subtypes are supported (json schema and xsd)"
            ]
          },
          {
            "name": "MetaModel.alias",
            "arguments": [
              "schema"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "StringType",
            "nameSpace": "",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "ExampleString",
        "methods": [
          {
            "name": "validate",
            "start": 4564,
            "end": 4747,
            "text": "\n\n    validate(){\n        var str=this.value();\n        //write something to validate schema here here\n        //in fact it should check that content is valid json or xsd schema\n    }"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Examples at this moment only two subtypes are supported (json  and xml)"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "StringType",
            "nameSpace": "",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "JSonSchemaString",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.innerType",
            "arguments": [
              "json"
            ]
          },
          {
            "name": "MetaModel.description",
            "arguments": [
              "JSON schema"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "SchemaString",
            "nameSpace": "",
            "basicName": "SchemaString",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "XMLSchemaString",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.innerType",
            "arguments": [
              "xsd"
            ]
          },
          {
            "name": "MetaModel.description",
            "arguments": [
              "XSD schema"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "SchemaString",
            "nameSpace": "",
            "basicName": "SchemaString",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "ScriptingHook",
        "methods": [],
        "typeParameters": [
          "T"
        ],
        "typeParameterConstraint": [
          null
        ],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "script to inject to tooling environment"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "StringType",
            "nameSpace": "",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "RAMLPointer",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "StringType",
            "nameSpace": "",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "RAMLSelector",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "StringType",
            "nameSpace": "",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
          }
        ],
        "moduleName": null
      }
    ],
    "aliases": [],
    "enumDeclarations": [],
    "imports": {
      "MetaModel": "c:\\GIT-repos\\raml-labs\\src\\raml1\\metamodel.ts"
    },
    "name": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
  },
  {
    "classes": [
      {
        "name": "ResourceTypeRef",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Sys.Reference",
            "nameSpace": "Sys",
            "basicName": "Reference",
            "typeKind": 0,
            "typeArguments": [
              {
                "typeName": "ResourceType",
                "nameSpace": "",
                "basicName": "ResourceType",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              }
            ],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "TraitRef",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Sys.Reference",
            "nameSpace": "Sys",
            "basicName": "Reference",
            "typeKind": 0,
            "typeArguments": [
              {
                "typeName": "Trait",
                "nameSpace": "",
                "basicName": "Trait",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              }
            ],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "SecuritySchemaPart",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.issue",
            "arguments": [
              "Specification is actually very vague here"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "MethodBase",
            "nameSpace": "",
            "basicName": "MethodBase",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "SecuritySchemaHook",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "parameters",
            "type": {
              "base": {
                "typeName": "models.DataElement",
                "nameSpace": "models",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              },
              "typeKind": 1
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "script",
            "type": {
              "typeName": "SecuritySchemaHookScript",
              "nameSpace": "",
              "basicName": "SecuritySchemaHookScript",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Allows customization of security schemeas"
            ]
          }
        ],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "SecuritySchemaHookScript",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Sys.ScriptingHook",
            "nameSpace": "Sys",
            "basicName": "ScriptingHook",
            "typeKind": 0,
            "typeArguments": [
              {
                "typeName": "auth.SecuritySchemeHook",
                "nameSpace": "auth",
                "basicName": "SecuritySchemeHook",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              }
            ],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "SecuritySchemaType",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "requiredSettings",
            "type": {
              "base": {
                "typeName": "models.DataElement",
                "nameSpace": "models",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "You may declare settings needed to use this type of security security schemas"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "locationKind",
                  "models.LocationKind.DECLARATIONS"
                ]
              },
              {
                "name": "MetaModel.declaringFields",
                "arguments": []
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "describedBy",
            "type": {
              "typeName": "SecuritySchemaPart",
              "nameSpace": "",
              "basicName": "SecuritySchemaPart",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The describedBy attribute MAY be used to apply a trait-like structure to a security scheme mechanism so as to extend the mechanism, such as specifying response codes, HTTP headers or custom documentation.\n        This extension allows API designers to describe security schemes. As a best practice, even for standard security schemes, API designers SHOULD describe the security schemes' required artifacts, such as headers, URI parameters, and so on. Including the security schemes' description completes an API's documentation."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.declaresSubTypeOf",
            "arguments": [
              "SecuritySchemaSettings"
            ]
          },
          {
            "name": "MetaModel.description",
            "arguments": [
              "Security schema type allows you to contribute your own security schema type with settings and optinal configurator for plugging into client sdks auth mechanism"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "Common.RAMLLanguageElement",
            "nameSpace": "Common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "SecuritySchemaSettings",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "authentificationConfigurator",
            "type": {
              "typeName": "SecuritySchemaHook",
              "nameSpace": "",
              "basicName": "SecuritySchemaHook",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "You may provide custom code to handle authentification here"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.issue",
            "arguments": [
              "Specification is actually very vague here"
            ]
          },
          {
            "name": "MetaModel.functionalDescriminator",
            "arguments": [
              "$parent.type"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "Common.RAMLLanguageElement",
            "nameSpace": "Common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "Oath1SecuritySchemaSettings",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "requestTokenUri",
            "type": {
              "typeName": "Sys.FixedUri",
              "nameSpace": "Sys",
              "basicName": "FixedUri",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.required",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The URI of the Temporary Credential Request endpoint as defined in RFC5849 Section 2.1"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "authorizationUri",
            "type": {
              "typeName": "Sys.FixedUri",
              "nameSpace": "Sys",
              "basicName": "FixedUri",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.required",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The URI of the Resource Owner Authorization endpoint as defined in RFC5849 Section 2.2"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "tokenCredentialsUri",
            "type": {
              "typeName": "Sys.FixedUri",
              "nameSpace": "Sys",
              "basicName": "FixedUri",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.required",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The URI of the Token Request endpoint as defined in RFC5849 Section 2.3"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "signatures",
            "type": {
              "base": {
                "typeName": "string",
                "nameSpace": "",
                "basicName": "string",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": null
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.oneOf",
                "arguments": [
                  [
                    "HMAC-SHA1",
                    "RSA-SHA1",
                    "PLAINTEXT"
                  ]
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.functionalDescriminator",
            "arguments": [
              "$parent.type=='OAuth 1.0'"
            ]
          },
          {
            "name": "MetaModel.issue",
            "arguments": [
              "Specification is actually very vague here"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "SecuritySchemaSettings",
            "nameSpace": "",
            "basicName": "SecuritySchemaSettings",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "Oath2SecurySchemaSettings",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "accessTokenUri",
            "type": {
              "typeName": "Sys.FixedUri",
              "nameSpace": "Sys",
              "basicName": "FixedUri",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.required",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The URI of the Token Endpoint as defined in RFC6749 [RFC6748] Section 3.2"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "authorizationUri",
            "type": {
              "typeName": "Sys.FixedUri",
              "nameSpace": "Sys",
              "basicName": "FixedUri",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.required",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The URI of the Authorization Endpoint as defined in RFC6749 [RFC6748] Section 3.1"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "authorizationGrants",
            "type": {
              "base": {
                "typeName": "string",
                "nameSpace": "",
                "basicName": "string",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": null
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.required",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "A list of the Authorization grants supported by the API As defined in RFC6749 [RFC6749] Sections 4.1, 4.2, 4.3 and 4.4, can be any of: code, token, owner or credentials."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "scopes",
            "type": {
              "base": {
                "typeName": "string",
                "nameSpace": "",
                "basicName": "string",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": null
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "A list of scopes supported by the API as defined in RFC6749 [RFC6749] Section 3.3"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.functionalDescriminator",
            "arguments": [
              "$parent.type=='OAuth 2.0'"
            ]
          },
          {
            "name": "MetaModel.issue",
            "arguments": [
              "Specification is actually very vague here"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "SecuritySchemaSettings",
            "nameSpace": "",
            "basicName": "SecuritySchemaSettings",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "APIKeySettings",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "queryParameterName",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "headerName",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.functionalDescriminator",
            "arguments": [
              "$parent.type=='APIKey'"
            ]
          },
          {
            "name": "MetaModel.issue",
            "arguments": [
              "Specification is actually very vague here"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "SecuritySchemaSettings",
            "nameSpace": "",
            "basicName": "SecuritySchemaSettings",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "SecuritySchemaRef",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Sys.Reference",
            "nameSpace": "Sys",
            "basicName": "Reference",
            "typeKind": 0,
            "typeArguments": [
              {
                "typeName": "SecuritySchema",
                "nameSpace": "",
                "basicName": "SecuritySchema",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              }
            ],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "SecuritySchema",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [
          {
            "typeName": "Sys.Referencable",
            "nameSpace": "Sys",
            "basicName": "Referencable",
            "typeKind": 0,
            "typeArguments": [
              {
                "typeName": "SecuritySchema",
                "nameSpace": "",
                "basicName": "SecuritySchema",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              }
            ],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "fields": [
          {
            "name": "name",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.key",
                "arguments": []
              },
              {
                "name": "MetaModel.startFrom",
                "arguments": [
                  ""
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "type",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.oneOf",
                "arguments": [
                  [
                    "OAuth 1.0",
                    "OAuth 2.0",
                    "Basic Authentication",
                    "Digest Authentication",
                    "APIKey",
                    "x-{other}"
                  ]
                ]
              },
              {
                "name": "MetaModel.descriminatingProperty",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The securitySchemes property MUST be used to specify an API's security mechanisms, including the required settings and the authentication methods that the API supports. one authentication method is allowed if the API supports them."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "description",
            "type": {
              "typeName": "Sys.MarkdownString",
              "nameSpace": "Sys",
              "basicName": "MarkdownString",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The description attribute MAY be used to describe a securitySchemes property."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "describedBy",
            "type": {
              "typeName": "SecuritySchemaPart",
              "nameSpace": "",
              "basicName": "SecuritySchemaPart",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The describedBy attribute MAY be used to apply a trait-like structure to a security scheme mechanism so as to extend the mechanism, such as specifying response codes, HTTP headers or custom documentation.\n        This extension allows API designers to describe security schemes. As a best practice, even for standard security schemes, API designers SHOULD describe the security schemes' required artifacts, such as headers, URI parameters, and so on. Including the security schemes' description completes an API's documentation."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "settings",
            "type": {
              "typeName": "SecuritySchemaSettings",
              "nameSpace": "",
              "basicName": "SecuritySchemaSettings",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The settings attribute MAY be used to provide security schema-specific information. Depending on the value of the type parameter, its attributes can vary.\n        The following lists describe the minimum set of properties which any processing application MUST provide and validate if it chooses to implement the Security Scheme type. Processing applications MAY choose to recognize other properties for things such as token lifetime, preferred cryptographic algorithms, an so on."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Declares globally referancable security schema definition"
            ]
          },
          {
            "name": "MetaModel.actuallyExports",
            "arguments": [
              "$self"
            ]
          },
          {
            "name": "MetaModel.referenceIs",
            "arguments": [
              "settings"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "Common.RAMLLanguageElement",
            "nameSpace": "Common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "Oath2",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "OAuth 2.0"
            },
            "optional": false
          },
          {
            "name": "settings",
            "type": {
              "typeName": "Oath2SecurySchemaSettings",
              "nameSpace": "",
              "basicName": "Oath2SecurySchemaSettings",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Declares globally referancable security schema definition"
            ]
          },
          {
            "name": "MetaModel.actuallyExports",
            "arguments": [
              "$self"
            ]
          },
          {
            "name": "MetaModel.referenceIs",
            "arguments": [
              "settings"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "SecuritySchema",
            "nameSpace": "",
            "basicName": "SecuritySchema",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "Oath1",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "OAuth 1.0"
            },
            "optional": false
          },
          {
            "name": "settings",
            "type": {
              "typeName": "Oath1SecuritySchemaSettings",
              "nameSpace": "",
              "basicName": "Oath1SecuritySchemaSettings",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Declares globally referancable security schema definition"
            ]
          },
          {
            "name": "MetaModel.actuallyExports",
            "arguments": [
              "$self"
            ]
          },
          {
            "name": "MetaModel.referenceIs",
            "arguments": [
              "settings"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "SecuritySchema",
            "nameSpace": "",
            "basicName": "SecuritySchema",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "APIKey",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "APIKey"
            },
            "optional": false
          },
          {
            "name": "settings",
            "type": {
              "typeName": "APIKeySettings",
              "nameSpace": "",
              "basicName": "APIKeySettings",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Declares globally referancable security schema definition"
            ]
          },
          {
            "name": "MetaModel.actuallyExports",
            "arguments": [
              "$self"
            ]
          },
          {
            "name": "MetaModel.referenceIs",
            "arguments": [
              "settings"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "SecuritySchema",
            "nameSpace": "",
            "basicName": "SecuritySchema",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "Basic",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "Basic Authentication"
            },
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Declares globally referancable security schema definition"
            ]
          },
          {
            "name": "MetaModel.actuallyExports",
            "arguments": [
              "$self"
            ]
          },
          {
            "name": "MetaModel.referenceIs",
            "arguments": [
              "settings"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "SecuritySchema",
            "nameSpace": "",
            "basicName": "SecuritySchema",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "Digest",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "Digest Authentication"
            },
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Declares globally referancable security schema definition"
            ]
          },
          {
            "name": "MetaModel.actuallyExports",
            "arguments": [
              "$self"
            ]
          },
          {
            "name": "MetaModel.referenceIs",
            "arguments": [
              "settings"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "SecuritySchema",
            "nameSpace": "",
            "basicName": "SecuritySchema",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "Custom",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "x-{other}"
            },
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Declares globally referancable security schema definition"
            ]
          },
          {
            "name": "MetaModel.actuallyExports",
            "arguments": [
              "$self"
            ]
          },
          {
            "name": "MetaModel.referenceIs",
            "arguments": [
              "settings"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "SecuritySchema",
            "nameSpace": "",
            "basicName": "SecuritySchema",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "MethodBase",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "responses",
            "type": {
              "base": {
                "typeName": "Bodies.Response",
                "nameSpace": "Bodies",
                "basicName": "Response",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "response",
                  "true"
                ]
              },
              {
                "name": "MetaModel.newInstanceName",
                "arguments": [
                  "New Response"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Resource methods MAY have one or more responses. Responses MAY be described using the description property, and MAY include example attributes or schema properties.\n"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "body",
            "type": {
              "base": {
                "typeName": "models.DataElement",
                "nameSpace": "models",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.newInstanceName",
                "arguments": [
                  "New Body"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Some method verbs expect the resource to be sent as a request body. For example, to create a resource, the request must include the details of the resource to create.\nResources CAN have alternate representations. For example, an API might support both JSON and XML representations.\nA method's body is defined in the body property as a hashmap, in which the key MUST be a valid media type."
                ]
              },
              {
                "name": "MetaModel.needsClarification",
                "arguments": [
                  "Ensure that forms spec is consistent with it"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "protocols",
            "type": {
              "base": {
                "typeName": "string",
                "nameSpace": "",
                "basicName": "string",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": null
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.oneOf",
                "arguments": [
                  [
                    "HTTP",
                    "HTTPS"
                  ]
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "Not clear how it should work in combination with baseUri also is it also related to resources and types/traits"
                ]
              },
              {
                "name": "MetaModel.needsClarification",
                "arguments": [
                  "Actually it is a set"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "A method can override an API's protocols value for that single method by setting a different value for the fields."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "is",
            "type": {
              "base": {
                "typeName": "TraitRef",
                "nameSpace": "",
                "basicName": "TraitRef",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Instantiation of applyed traits"
                ]
              },
              {
                "name": "MetaModel.thisFeatureCovers",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/98"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "securedBy",
            "type": {
              "base": {
                "typeName": "SecuritySchemaRef",
                "nameSpace": "",
                "basicName": "SecuritySchemaRef",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.allowNull",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  " securityScheme may also be applied to a resource by using the securedBy key, which is equivalent to applying the securityScheme to all methods that may be declared, explicitly or implicitly, by defining the resourceTypes or traits property for that resource.\nTo indicate that the method may be called without applying any securityScheme, the method may be annotated with the null securityScheme."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Params.HasNormalParameters",
            "nameSpace": "Params",
            "basicName": "HasNormalParameters",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "Trait",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [
          {
            "typeName": "Sys.DeclaresDynamicType",
            "nameSpace": "Sys",
            "basicName": "DeclaresDynamicType",
            "typeKind": 0,
            "typeArguments": [
              {
                "typeName": "Trait",
                "nameSpace": "",
                "basicName": "Trait",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              }
            ],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "fields": [
          {
            "name": "name",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.key",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Name of the trait"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "usage",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.inlinedTemplates",
            "arguments": []
          },
          {
            "name": "MetaModel.allowQuestion",
            "arguments": []
          }
        ],
        "extends": [
          {
            "typeName": "MethodBase",
            "nameSpace": "",
            "basicName": "MethodBase",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "ResourceBase",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "methods",
            "type": {
              "base": {
                "typeName": "Method",
                "nameSpace": "",
                "basicName": "Method",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Methods that are part of this resource type definition"
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "definition system did not represents that ? is allowed after method names here"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "is",
            "type": {
              "base": {
                "typeName": "TraitRef",
                "nameSpace": "",
                "basicName": "TraitRef",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Instantiation of applyed traits"
                ]
              },
              {
                "name": "MetaModel.thisFeatureCovers",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/98"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "type",
            "type": {
              "typeName": "ResourceTypeRef",
              "nameSpace": "",
              "basicName": "ResourceTypeRef",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Instantiation of applyed resource type"
                ]
              },
              {
                "name": "MetaModel.thisFeatureCovers",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/98"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "securedBy",
            "type": {
              "base": {
                "typeName": "SecuritySchemaRef",
                "nameSpace": "",
                "basicName": "SecuritySchemaRef",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.allowNull",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  " securityScheme may also be applied to a resource by using the securedBy key, which is equivalent to applying the securityScheme to all methods that may be declared, explicitly or implicitly, by defining the resourceTypes or traits property for that resource.\nTo indicate that the method may be called without applying any securityScheme, the method may be annotated with the null securityScheme."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "uriParameters",
            "type": {
              "base": {
                "typeName": "models.DataElement",
                "nameSpace": "models",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/71"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "location",
                  "models.ModelLocation.URI"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "locationKind",
                  "models.LocationKind.APISTRUCTURE"
                ]
              },
              {
                "name": "MetaModel.valueRestriction",
                "arguments": [
                  "_.find(relativeUri.templateArguments(),$value.name)",
                  "Uri parameter names should match to template names in relative uri"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Uri parameters of this resource"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Common.RAMLLanguageElement",
            "nameSpace": "Common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "ResourceType",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [
          {
            "typeName": "Sys.DeclaresDynamicType",
            "nameSpace": "Sys",
            "basicName": "DeclaresDynamicType",
            "typeKind": 0,
            "typeArguments": [
              {
                "typeName": "ResourceType",
                "nameSpace": "",
                "basicName": "ResourceType",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              }
            ],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "fields": [
          {
            "name": "name",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.key",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Name of the resource type"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "usage",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.inlinedTemplates",
            "arguments": []
          },
          {
            "name": "MetaModel.allowQuestion",
            "arguments": []
          }
        ],
        "extends": [
          {
            "typeName": "ResourceBase",
            "nameSpace": "",
            "basicName": "ResourceBase",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "Method",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "signature",
            "type": {
              "typeName": "Sys.SchemaString",
              "nameSpace": "Sys",
              "basicName": "SchemaString",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.canBeValue",
                "arguments": []
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "method",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.key",
                "arguments": []
              },
              {
                "name": "MetaModel.extraMetaKey",
                "arguments": [
                  "methods"
                ]
              },
              {
                "name": "MetaModel.oneOf",
                "arguments": [
                  [
                    "get",
                    "put",
                    "post",
                    "delete",
                    "options",
                    "head",
                    "patch"
                  ]
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Method that can be called"
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/95"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "MethodBase",
            "nameSpace": "",
            "basicName": "MethodBase",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "Resource",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "signature",
            "type": {
              "typeName": "Sys.SchemaString",
              "nameSpace": "Sys",
              "basicName": "SchemaString",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.canBeValue",
                "arguments": []
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "relativeUri",
            "type": {
              "typeName": "Sys.RelativeUri",
              "nameSpace": "Sys",
              "basicName": "RelativeUri",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.key",
                "arguments": []
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/73"
                ]
              },
              {
                "name": "MetaModel.grammarTokenKind",
                "arguments": [
                  "entity.name.tag.yaml"
                ]
              },
              {
                "name": "MetaModel.startFrom",
                "arguments": [
                  "/"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Relative URL of this resource from the parent resource"
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/87"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "resources",
            "type": {
              "base": {
                "typeName": "Resource",
                "nameSpace": "",
                "basicName": "Resource",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.newInstanceName",
                "arguments": [
                  "New Resource"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Children resources"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "ResourceBase",
            "nameSpace": "",
            "basicName": "ResourceBase",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
          }
        ],
        "moduleName": null
      }
    ],
    "aliases": [],
    "enumDeclarations": [],
    "imports": {
      "MetaModel": "c:\\GIT-repos\\raml-labs\\src\\raml1\\metamodel.ts",
      "Sys": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts",
      "Params": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\parameters.ts",
      "Bodies": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\bodies.ts",
      "Common": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\common.ts",
      "Declarations": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\declarations.ts",
      "models": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts",
      "auth": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\auth.ts"
    },
    "name": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\methodsAndResources.ts"
  },
  {
    "classes": [
      {
        "name": "FileParameter",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "file"
            },
            "optional": false
          },
          {
            "name": "fileTypes",
            "type": {
              "base": {
                "typeName": "Sys.ContentType",
                "nameSpace": "Sys",
                "basicName": "ContentType",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\parameters.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "It should also include a new property: fileTypes, which should be a list of valid content-type strings for the file. The file type */* should be a valid value."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "minLength",
            "type": {
              "typeName": "number",
              "nameSpace": "",
              "basicName": "number",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The minLength attribute specifies the parameter value's minimum number of bytes."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "maxLength",
            "type": {
              "typeName": "number",
              "nameSpace": "",
              "basicName": "number",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The maxLength attribute specifies the parameter value's maximum number of bytes."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.thisFeatureCovers",
            "arguments": [
              "https://github.com/raml-org/raml-spec/issues/94"
            ]
          },
          {
            "name": "MetaModel.description",
            "arguments": [
              "(Applicable only to Form properties) Value is a file. Client generators SHOULD use this type to handle file uploads correctly."
            ]
          }
        ],
        "extends": [
          {
            "typeName": "datamodel.DataElement",
            "nameSpace": "datamodel",
            "basicName": "DataElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\parameters.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "HasNormalParameters",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "queryParameters",
            "type": {
              "base": {
                "typeName": "datamodel.DataElement",
                "nameSpace": "datamodel",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\parameters.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "fieldOrParam",
                  true
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/78"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "location",
                  "datamodel.ModelLocation.QUERY"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "locationKind",
                  "datamodel.LocationKind.APISTRUCTURE"
                ]
              },
              {
                "name": "MetaModel.newInstanceName",
                "arguments": [
                  "New query parameter"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "An APIs resources MAY be filtered (to return a subset of results) or altered (such as transforming a response body from JSON to XML format) by the use of query strings. If the resource or its method supports a query string, the query string MUST be defined by the queryParameters property"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "headers",
            "type": {
              "base": {
                "typeName": "datamodel.DataElement",
                "nameSpace": "datamodel",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\parameters.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "fieldOrParam",
                  true
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/59"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "location",
                  "datamodel.ModelLocation.HEADERS"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "locationKind",
                  "datamodel.LocationKind.APISTRUCTURE"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Headers that allowed at this position"
                ]
              },
              {
                "name": "MetaModel.newInstanceName",
                "arguments": [
                  "New Header"
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "It is not clear if this also allowed for resources(check)"
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "cover wildcards ({*})"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Common.RAMLLanguageElement",
            "nameSpace": "Common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\parameters.ts"
          }
        ],
        "moduleName": null
      }
    ],
    "aliases": [],
    "enumDeclarations": [],
    "imports": {
      "MetaModel": "c:\\GIT-repos\\raml-labs\\src\\raml1\\metamodel.ts",
      "Sys": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts",
      "Common": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\common.ts",
      "datamodel": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
    },
    "name": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\parameters.ts"
  },
  {
    "classes": [
      {
        "name": "RAMLLanguageElement",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "displayName",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The displayName attribute specifies the $self's display name. It is a friendly name used only for display or documentation purposes. If displayName is not specified, it defaults to the element's key (the name of the property itself)."
                ]
              },
              {
                "name": "MetaModel.thisFeatureCovers",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/136"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "description",
            "type": {
              "typeName": "Sys.MarkdownString",
              "nameSpace": "Sys",
              "basicName": "MarkdownString",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\common.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The description attribute describes the intended use or meaning of the $self. This value MAY be formatted using Markdown [MARKDOWN]"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "annotations",
            "type": {
              "base": {
                "typeName": "Decls.AnnotationRef",
                "nameSpace": "Decls",
                "basicName": "AnnotationRef",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\common.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.version",
                "arguments": [
                  "MetaModel.RAMLVersion.RAML10"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "locationKind",
                  "datamodel.LocationKind.APISTRUCTURE"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "location",
                  "datamodel.ModelLocation.ANNOTATION"
                ]
              },
              {
                "name": "MetaModel.thisFeatureCovers",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/110"
                ]
              },
              {
                "name": "MetaModel.thisFeatureCovers",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/74"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Most of RAML model elements may have attached annotations decribing additional meta data about this element"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "RAMLSimpleElement",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [],
        "moduleName": null
      }
    ],
    "aliases": [],
    "enumDeclarations": [],
    "imports": {
      "MetaModel": "c:\\GIT-repos\\raml-labs\\src\\raml1\\metamodel.ts",
      "Sys": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts",
      "Decls": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\declarations.ts"
    },
    "name": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\common.ts"
  },
  {
    "classes": [
      {
        "name": "AnnotationType",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [
          {
            "typeName": "Sys.DeclaresDynamicType",
            "nameSpace": "Sys",
            "basicName": "DeclaresDynamicType",
            "typeKind": 0,
            "typeArguments": [
              {
                "typeName": "AnnotationType",
                "nameSpace": "",
                "basicName": "AnnotationType",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\declarations.ts"
              }
            ],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\declarations.ts"
          }
        ],
        "fields": [
          {
            "name": "name",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.key",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Name of this annotation type"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "usage",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "parameters",
            "type": {
              "base": {
                "typeName": "datamodel.DataElement",
                "nameSpace": "datamodel",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\declarations.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "fieldOrParam",
                  true
                ]
              },
              {
                "name": "MetaModel.declaringFields",
                "arguments": []
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "locationKind",
                  "datamodel.LocationKind.APISTRUCTURE"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "location",
                  "datamodel.ModelLocation.ANNOTATION"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Declarations of parameters allowed in this annotation type"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "allowMultiple",
            "type": {
              "typeName": "boolean",
              "nameSpace": "",
              "basicName": "boolean",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.declaringFields",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "If set to true parameter can accept multiple values"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "allowedTargets",
            "type": {
              "base": {
                "typeName": "AnnotationTarget",
                "nameSpace": "",
                "basicName": "AnnotationTarget",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\declarations.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.extraMetaKey",
                "arguments": [
                  "annotationTargets"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Places where this annotation might be placed"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.declaresSubTypeOf",
            "arguments": [
              "Annotation"
            ]
          },
          {
            "name": "MetaModel.thisFeatureCovers",
            "arguments": [
              "https://github.com/raml-org/raml-spec/issues/147"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "common.RAMLLanguageElement",
            "nameSpace": "common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\declarations.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "AnnotationRef",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Instantiation of annotations. It allows you to attach some meta information to your API"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "Sys.Reference",
            "nameSpace": "Sys",
            "basicName": "Reference",
            "typeKind": 0,
            "typeArguments": [
              {
                "typeName": "AnnotationType",
                "nameSpace": "",
                "basicName": "AnnotationType",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\declarations.ts"
              }
            ],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\declarations.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "AnnotationTarget",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Sys.ValueType",
            "nameSpace": "Sys",
            "basicName": "ValueType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\declarations.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "Annotation",
        "methods": [],
        "typeParameters": [
          "T"
        ],
        "typeParameterConstraint": [
          null
        ],
        "implements": [],
        "fields": [
          {
            "name": "name",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.key",
                "arguments": []
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [],
        "moduleName": null
      }
    ],
    "aliases": [],
    "enumDeclarations": [],
    "imports": {
      "MetaModel": "c:\\GIT-repos\\raml-labs\\src\\raml1\\metamodel.ts",
      "Sys": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts",
      "datamodel": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts",
      "common": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\common.ts"
    },
    "name": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\declarations.ts"
  },
  {
    "classes": [
      {
        "name": "ExampleSpec",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "content",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.selfNode",
                "arguments": []
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "strict",
            "type": {
              "typeName": "boolean",
              "nameSpace": "",
              "basicName": "boolean",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "name",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.key",
                "arguments": []
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Common.RAMLLanguageElement",
            "nameSpace": "Common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "DataElement",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "name",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.key",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "name of the parameter"
                ]
              },
              {
                "name": "MetaModel.extraMetaKey",
                "arguments": [
                  "headers"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "facets",
            "type": {
              "base": {
                "typeName": "DataElement",
                "nameSpace": "",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.declaringFields",
                "arguments": []
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "schema",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "usage",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "type",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.allowMultiple",
                "arguments": []
              },
              {
                "name": "MetaModel.needsClarification",
                "arguments": [
                  "I suggest to remove multiple type feature from RAML 1.0 in favour of parameter overloading"
                ]
              },
              {
                "name": "MetaModel.canBeValue",
                "arguments": []
              },
              {
                "name": "MetaModel.defaultValue",
                "arguments": [
                  "string"
                ]
              },
              {
                "name": "MetaModel.descriminatingProperty",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The type attribute specifies the primitive type of the parameter's resolved value. API clients MUST return/throw an error if the parameter's resolved value does not match the specified type. If type is not specified, it defaults to string."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "location",
            "type": {
              "typeName": "ModelLocation",
              "nameSpace": "",
              "basicName": "ModelLocation",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.system",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Location of the parameter (can not be edited by user)"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "locationKind",
            "type": {
              "typeName": "LocationKind",
              "nameSpace": "",
              "basicName": "LocationKind",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.system",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Kind of location"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "default",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The default attribute specifies the default value to use for the property if the property is omitted or its value is not specified. This SHOULD NOT be interpreted as a requirement for the client to send the default attribute's value if there is no other value to send. Instead, the default attribute's value is the value the server uses if the client does not send a value if send default by client is not set to true."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "example",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.selfNode",
                "arguments": []
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "(Optional) The example attribute shows an example value for the property. This can be used, e.g., by documentation generators to generate sample values for the property."
                ]
              },
              {
                "name": "MetaModel.needsClarification",
                "arguments": [
                  "It sounds consistent to allow multiple examples for parameters, but it will make hard to describe difference between 0.8 and 1.0 in terms of def system"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "repeat",
            "type": {
              "typeName": "boolean",
              "nameSpace": "",
              "basicName": "boolean",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.requireValue",
                "arguments": [
                  "fieldOrParam",
                  true
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "The repeat attribute specifies that the parameter can be repeated. If the parameter can be used multiple times, the repeat parameter value MUST be set to 'true'. Otherwise, the default value is 'false' and the parameter may not be repeated."
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "semantic of repeat is not clearly specified and actually multiple possible reasonable options exists at the same time "
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/152"
                ]
              },
              {
                "name": "MetaModel.requireValue",
                "arguments": [
                  "locationKind",
                  "LocationKind.APISTRUCTURE"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "examples",
            "type": {
              "base": {
                "typeName": "ExampleSpec",
                "nameSpace": "",
                "basicName": "ExampleSpec",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
              },
              "typeKind": 1
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "required",
            "type": {
              "typeName": "boolean",
              "nameSpace": "",
              "basicName": "boolean",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.requireValue",
                "arguments": [
                  "fieldOrParam",
                  true
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Set to true if parameter is required"
                ]
              },
              {
                "name": "MetaModel.describesAnnotation",
                "arguments": [
                  "required"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.convertsToGlobalOfType",
            "arguments": [
              "SchemaString"
            ]
          },
          {
            "name": "MetaModel.canInherit",
            "arguments": [
              "mediaType"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "Common.RAMLLanguageElement",
            "nameSpace": "Common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "ArrayField",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "array"
            },
            "optional": false
          },
          {
            "name": "uniqueItems",
            "type": {
              "typeName": "boolean",
              "nameSpace": "",
              "basicName": "boolean",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.facetId",
                "arguments": [
                  "uniqueItems"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "minItems",
            "type": {
              "typeName": "number",
              "nameSpace": "",
              "basicName": "number",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.facetId",
                "arguments": [
                  "minItems"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "maxItems",
            "type": {
              "typeName": "number",
              "nameSpace": "",
              "basicName": "number",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.facetId",
                "arguments": [
                  "maxItems"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.convertsToGlobalOfType",
            "arguments": [
              "SchemaString"
            ]
          },
          {
            "name": "MetaModel.requireValue",
            "arguments": [
              "locationKind",
              "LocationKind.MODELS"
            ]
          },
          {
            "name": "MetaModel.alias",
            "arguments": [
              "array"
            ]
          },
          {
            "name": "MetaModel.declaresSubTypeOf",
            "arguments": [
              "DataElement"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "DataElement",
            "nameSpace": "",
            "basicName": "DataElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "UnionField",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "discriminator",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.selector",
                "arguments": [
                  "*.DataElement"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "union"
            },
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.convertsToGlobalOfType",
            "arguments": [
              "SchemaString"
            ]
          },
          {
            "name": "MetaModel.requireValue",
            "arguments": [
              "locationKind",
              "LocationKind.MODELS"
            ]
          },
          {
            "name": "MetaModel.declaresSubTypeOf",
            "arguments": [
              "DataElement"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "DataElement",
            "nameSpace": "",
            "basicName": "DataElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "DataElementRef",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Sys.Reference",
            "nameSpace": "Sys",
            "basicName": "Reference",
            "typeKind": 0,
            "typeArguments": [
              {
                "typeName": "DataElement",
                "nameSpace": "",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
              }
            ],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "ObjectField",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "properties",
            "type": {
              "base": {
                "typeName": "DataElement",
                "nameSpace": "",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "fieldOrParam",
                  true
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "minProperties",
            "type": {
              "typeName": "number",
              "nameSpace": "",
              "basicName": "number",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.facetId",
                "arguments": [
                  "minProperties"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "maxProperties",
            "type": {
              "typeName": "number",
              "nameSpace": "",
              "basicName": "number",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.facetId",
                "arguments": [
                  "maxProperties"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "additionalProperties",
            "type": {
              "typeName": "DataElement",
              "nameSpace": "",
              "basicName": "DataElement",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "patternProperties",
            "type": {
              "base": {
                "typeName": "DataElement",
                "nameSpace": "",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
              },
              "typeKind": 1
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "discriminator",
            "type": {
              "typeName": "pointer",
              "nameSpace": "",
              "basicName": "pointer",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.selector",
                "arguments": [
                  "*.DataElement"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "discriminatorValue",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "object"
            },
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.definingPropertyIsEnough",
            "arguments": [
              "properties"
            ]
          },
          {
            "name": "MetaModel.setsContextValue",
            "arguments": [
              "field",
              "true"
            ]
          },
          {
            "name": "MetaModel.convertsToGlobalOfType",
            "arguments": [
              "SchemaString"
            ]
          },
          {
            "name": "MetaModel.declaresSubTypeOf",
            "arguments": [
              "DataElement"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "DataElement",
            "nameSpace": "",
            "basicName": "DataElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "StrElement",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "pattern",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "(Optional, applicable only for parameters of type string) The pattern attribute is a regular expression that a parameter of type string MUST match. Regular expressions MUST follow the regular expression specification from ECMA 262/Perl 5. The pattern MAY be enclosed in double quotes for readability and clarity."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "minLength",
            "type": {
              "typeName": "number",
              "nameSpace": "",
              "basicName": "number",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.thisFeatureCovers",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/141"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "(Optional, applicable only for parameters of type string) The minLength attribute specifies the parameter value's minimum number of characters.The length is equal to the number of 16-bit Unicode characters in the string"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "maxLength",
            "type": {
              "typeName": "number",
              "nameSpace": "",
              "basicName": "number",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "(Optional, applicable only for parameters of type string) The maxLength attribute specifies the parameter value's maximum number of characters.The length is equal to the number of 16-bit Unicode characters in the string"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "string"
            },
            "optional": false
          },
          {
            "name": "enum",
            "type": {
              "base": {
                "typeName": "string",
                "nameSpace": "",
                "basicName": "string",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": null
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.thisFeatureCovers",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/82"
                ]
              },
              {
                "name": "MetaModel.describesAnnotation",
                "arguments": [
                  "oneOf"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "(Optional, applicable only for parameters of type string) The enum attribute provides an enumeration of the parameter's valid values. This MUST be an array. If the enum attribute is defined, API clients and servers MUST verify that a parameter's value matches a value in the enum array. If there is no matching value, the clients and servers MUST treat this as an error."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Value must be a string"
            ]
          },
          {
            "name": "MetaModel.declaresSubTypeOf",
            "arguments": [
              "DataElement"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "DataElement",
            "nameSpace": "",
            "basicName": "DataElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "BooleanElement",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "boolean"
            },
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Value must be a boolean"
            ]
          },
          {
            "name": "MetaModel.declaresSubTypeOf",
            "arguments": [
              "DataElement"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "DataElement",
            "nameSpace": "",
            "basicName": "DataElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "ValueElement",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "value"
            },
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Value must be a boolean"
            ]
          },
          {
            "name": "MetaModel.declaresSubTypeOf",
            "arguments": [
              "DataElement"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "DataElement",
            "nameSpace": "",
            "basicName": "DataElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "NumberElement",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "number"
            },
            "optional": false
          },
          {
            "name": "minimum",
            "type": {
              "typeName": "number",
              "nameSpace": "",
              "basicName": "number",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "(Optional, applicable only for parameters of type number or integer) The minimum attribute specifies the parameter's minimum value."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "maximum",
            "type": {
              "typeName": "number",
              "nameSpace": "",
              "basicName": "number",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "(Optional, applicable only for parameters of type number or integer) The maximum attribute specifies the parameter's maximum value."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "enum",
            "type": {
              "base": {
                "typeName": "string",
                "nameSpace": "",
                "basicName": "string",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": null
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.thisFeatureCovers",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/82"
                ]
              },
              {
                "name": "MetaModel.describesAnnotation",
                "arguments": [
                  "oneOf"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "(Optional, applicable only for parameters of type string) The enum attribute provides an enumeration of the parameter's valid values. This MUST be an array. If the enum attribute is defined, API clients and servers MUST verify that a parameter's value matches a value in the enum array. If there is no matching value, the clients and servers MUST treat this as an error."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "format",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.oneOf",
                "arguments": [
                  [
                    "int32",
                    "int64",
                    "int",
                    "long",
                    "float",
                    "double",
                    "int16",
                    "int8"
                  ]
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Value MUST be a number. Indicate floating point numbers as defined by YAML."
            ]
          },
          {
            "name": "MetaModel.declaresSubTypeOf",
            "arguments": [
              "DataElement"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "DataElement",
            "nameSpace": "",
            "basicName": "DataElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "IntegerElement",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "integer"
            },
            "optional": false
          },
          {
            "name": "format",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.oneOf",
                "arguments": [
                  [
                    "int32",
                    "int64",
                    "int",
                    "long",
                    "int16",
                    "int8"
                  ]
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Value MUST be a integer."
            ]
          },
          {
            "name": "MetaModel.declaresSubTypeOf",
            "arguments": [
              "DataElement"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "NumberElement",
            "nameSpace": "",
            "basicName": "NumberElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "RAMLPointerElement",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "pointer"
            },
            "optional": false
          },
          {
            "name": "target",
            "type": {
              "typeName": "Sys.RAMLSelector",
              "nameSpace": "Sys",
              "basicName": "RAMLSelector",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.requireValue",
            "arguments": [
              "locationKind",
              "LocationKind.APISTRUCTURE"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "DataElement",
            "nameSpace": "",
            "basicName": "DataElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "pointer",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Sys.ValueType",
            "nameSpace": "Sys",
            "basicName": "ValueType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "RAMLExpression",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "ramlexpression"
            },
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.requireValue",
            "arguments": [
              "locationKind",
              "LocationKind.APISTRUCTURE"
            ]
          },
          {
            "name": "MetaModel.requireValue",
            "arguments": [
              "location",
              "ModelLocation.ANNOTATION"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "DataElement",
            "nameSpace": "",
            "basicName": "DataElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "ScriptHookElement",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "script"
            },
            "optional": false
          },
          {
            "name": "declararedIn",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "interfaceName",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Name of the interface which scripts should comply to"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.requireValue",
            "arguments": [
              "locationKind",
              "LocationKind.APISTRUCTURE"
            ]
          },
          {
            "name": "MetaModel.requireValue",
            "arguments": [
              "location",
              "ModelLocation.ANNOTATION"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "DataElement",
            "nameSpace": "",
            "basicName": "DataElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "SchemaElement",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "schema"
            },
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.requireValue",
            "arguments": [
              "locationKind",
              "LocationKind.APISTRUCTURE"
            ]
          },
          {
            "name": "MetaModel.nameAtRuntime",
            "arguments": [
              "SchemaString"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "DataElement",
            "nameSpace": "",
            "basicName": "DataElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "DateElement",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": null,
            "annotations": [],
            "valueConstraint": {
              "isCallConstraint": false,
              "value": "date"
            },
            "optional": false
          },
          {
            "name": "dateFormat",
            "type": {
              "typeName": "Sys.DateFormatSpec",
              "nameSpace": "Sys",
              "basicName": "DateFormatSpec",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.thisFeatureCovers",
                "arguments": [
                  "https://github.com/raml-org/raml-spec/issues/105"
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "Value MUST be a string representation of a date as defined in RFC2616 Section 3.3 [RFC2616]. or according to specified date format"
            ]
          },
          {
            "name": "MetaModel.declaresSubTypeOf",
            "arguments": [
              "DataElement"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "DataElement",
            "nameSpace": "",
            "basicName": "DataElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
          }
        ],
        "moduleName": null
      }
    ],
    "aliases": [],
    "enumDeclarations": [
      {
        "name": "ModelLocation",
        "members": [
          "QUERY",
          "HEADERS",
          "URI",
          "FORM",
          "BURI",
          "ANNOTATION",
          "MODEL",
          "SECURITYSCHEMATYPE"
        ]
      },
      {
        "name": "LocationKind",
        "members": [
          "APISTRUCTURE",
          "DECLARATIONS",
          "MODELS"
        ]
      }
    ],
    "imports": {
      "MetaModel": "c:\\GIT-repos\\raml-labs\\src\\raml1\\metamodel.ts",
      "Sys": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts",
      "Bodies": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\bodies.ts",
      "Common": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\common.ts",
      "Declarations": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\declarations.ts"
    },
    "name": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts"
  },
  {
    "classes": [
      {
        "name": "MimeTypeModel",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "type",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "tree",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": true
          },
          {
            "name": "subtype",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "suffix",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": true
          },
          {
            "name": "parameters",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": true
          }
        ],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "MimeType",
        "methods": [
          {
            "name": "isForm",
            "start": 383,
            "end": 608,
            "text": "\n    isForm(){\n        if (this.value()==\"application/x-www-form-urlencoded\"||this.value()=='multipart/form-data'){\n            return true;\n        }\n        //TODO USE PARSE\n        return false;//more smart code here\n    }"
          },
          {
            "name": "isXML",
            "start": 608,
            "end": 779,
            "text": "\n\n    isXML(){\n        //TODO USE PARSE\n\n        if (this.value()==\"application/xml\"){\n            return true;\n        }\n        return false;//more smart code here\n    }"
          },
          {
            "name": "isJSON",
            "start": 779,
            "end": 952,
            "text": "\n\n    isJSON(){\n        //TODO USE PARSE\n\n        if (this.value()==\"application/json\"){\n            return true;\n        }\n        return false;//more smart code here\n    }"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": false,
        "annotations": [
          {
            "name": "MetaModel.description",
            "arguments": [
              "This sub type of the string represents mime types"
            ]
          }
        ],
        "extends": [
          {
            "typeName": "Sys.StringType",
            "nameSpace": "Sys",
            "basicName": "StringType",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\bodies.ts"
          }
        ],
        "moduleName": null
      },
      {
        "name": "Response",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "code",
            "type": {
              "typeName": "Sys.StatusCode",
              "nameSpace": "Sys",
              "basicName": "StatusCode",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\bodies.ts"
            },
            "annotations": [
              {
                "name": "MetaModel.key",
                "arguments": []
              },
              {
                "name": "MetaModel.extraMetaKey",
                "arguments": [
                  "statusCodes"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Responses MUST be a map of one or more HTTP status codes, where each status code itself is a map that describes that status code."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "headers",
            "type": {
              "base": {
                "typeName": "models.DataElement",
                "nameSpace": "models",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\bodies.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "fieldOrParam",
                  true
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "location",
                  "models.ModelLocation.HEADERS"
                ]
              },
              {
                "name": "MetaModel.setsContextValue",
                "arguments": [
                  "locationKind",
                  "models.LocationKind.APISTRUCTURE"
                ]
              },
              {
                "name": "MetaModel.newInstanceName",
                "arguments": [
                  "New Header"
                ]
              },
              {
                "name": "MetaModel.issue",
                "arguments": [
                  "it seems to use different wildcard then in methods and resources"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "An API's methods may support custom header values in responses. The custom, non-standard HTTP headers MUST be specified by the headers property.\n        API's may include the the placeholder token {?} in a header name to indicate that any number of headers that conform to the specified format can be sent in responses. This is particularly useful for APIs that allow HTTP headers that conform to some naming convention to send arbitrary, custom data.\n\nIn the following example, the header x-metadata-{?} is used to send metadata that has been saved with the media."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "body",
            "type": {
              "base": {
                "typeName": "models.DataElement",
                "nameSpace": "models",
                "basicName": "DataElement",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\bodies.ts"
              },
              "typeKind": 1
            },
            "annotations": [
              {
                "name": "MetaModel.newInstanceName",
                "arguments": [
                  "New Body"
                ]
              },
              {
                "name": "MetaModel.description",
                "arguments": [
                  "Each response MAY contain a body property, which conforms to the same structure as request body properties (see Body). Responses that can return more than one response code MAY therefore have multiple bodies defined.\nFor APIs without a priori knowledge of the response types for their responses, \"*/*\" MAY be used to indicate that responses that do not matching other defined data types MUST be accepted. Processing applications MUST match the most descriptive media type first if \"*/*\" is used."
                ]
              }
            ],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": false,
        "annotations": [],
        "extends": [
          {
            "typeName": "Common.RAMLLanguageElement",
            "nameSpace": "Common",
            "basicName": "RAMLLanguageElement",
            "typeKind": 0,
            "typeArguments": [],
            "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\bodies.ts"
          }
        ],
        "moduleName": null
      }
    ],
    "aliases": [],
    "enumDeclarations": [],
    "imports": {
      "MetaModel": "c:\\GIT-repos\\raml-labs\\src\\raml1\\metamodel.ts",
      "Sys": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts",
      "models": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\datamodel.ts",
      "Common": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\common.ts"
    },
    "name": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\bodies.ts"
  },
  {
    "classes": [
      {
        "name": "Status",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "code",
            "type": {
              "typeName": "StatusCode",
              "nameSpace": "",
              "basicName": "StatusCode",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\auth.ts"
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "message",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "AuthentificationState",
        "methods": [
          {
            "name": "testAccessControl",
            "start": 435,
            "end": 564,
            "text": "\n\n    /**\n     * allows to test if method can be accessed\n     * @param req\n     */\n    testAccessControl(req:har.Request):Status"
          },
          {
            "name": "testAccessControl",
            "start": 564,
            "end": 622,
            "text": "\n\n\n    testAccessControl(method:RamlWrapper.Method):Status"
          },
          {
            "name": "status",
            "start": 622,
            "end": 644,
            "text": "\n\n    status():Status;"
          },
          {
            "name": "schemeId",
            "start": 644,
            "end": 667,
            "text": "\n\n    schemeId():string"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "AuthentificationParameters",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "AuthData",
        "methods": [
          {
            "name": "api",
            "start": 754,
            "end": 780,
            "text": "\n    api():RamlWrapper.Api"
          },
          {
            "name": "apiUrl",
            "start": 780,
            "end": 801,
            "text": "\n    apiUrl():string;"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "authentificationParameters",
            "type": {
              "typeName": "AuthentificationParameters",
              "nameSpace": "",
              "basicName": "AuthentificationParameters",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\auth.ts"
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "ParameterSpec",
        "methods": [
          {
            "name": "name",
            "start": 887,
            "end": 905,
            "text": "\n    name():string"
          },
          {
            "name": "required",
            "start": 905,
            "end": 929,
            "text": "\n    required():boolean;"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "PromptSpec",
        "methods": [
          {
            "name": "name",
            "start": 1031,
            "end": 1049,
            "text": "\n    name():string"
          },
          {
            "name": "description",
            "start": 1049,
            "end": 1074,
            "text": "\n    description():string"
          },
          {
            "name": "toPrompt",
            "start": 1074,
            "end": 1106,
            "text": "\n    toPrompt():ParameterSpec[];"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "UserResponse",
        "methods": [
          {
            "name": "isCancelled",
            "start": 1157,
            "end": 1183,
            "text": "\n    isCancelled():boolean"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "QueryListener",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "EndPoint",
        "methods": [
          {
            "name": "endpointUrl",
            "start": 1265,
            "end": 1290,
            "text": "\n    endpointUrl():string"
          },
          {
            "name": "addListener",
            "start": 1290,
            "end": 1331,
            "text": "\n    addListener(listener:QueryListener);"
          },
          {
            "name": "removeListener",
            "start": 1331,
            "end": 1374,
            "text": "\n    removeListener(listenr:QueryListener);"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "EndPointSpec",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "url",
            "type": {
              "typeName": "string",
              "nameSpace": "",
              "basicName": "string",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          },
          {
            "name": "needToSendResponse",
            "type": {
              "typeName": "boolean",
              "nameSpace": "",
              "basicName": "boolean",
              "typeKind": 0,
              "typeArguments": [],
              "modulePath": null
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "SecurityEnvironment",
        "methods": [
          {
            "name": "executeHTTPRequest",
            "start": 1481,
            "end": 1635,
            "text": "\n\n    /**\n     * execute authentification step to external service\n     * @param reg\n     */\n    executeHTTPRequest(reg:har.Request):Promise<har.Response>"
          },
          {
            "name": "askForExtraData",
            "start": 1635,
            "end": 1822,
            "text": "\n\n\n    /**\n     * asks for extra parameters( stored in cfg file or asked in dialog)\n     * @param parameterSpec\n     */\n    askForExtraData(parameterSpec:PromptSpec):Promise<UserResponse>"
          },
          {
            "name": "getOrCreateEndPoint",
            "start": 1822,
            "end": 1894,
            "text": "\n\n\n    // create\n    getOrCreateEndPoint(EndPointSpec):Promise<EndPoint>"
          },
          {
            "name": "hasEndpoints",
            "start": 1894,
            "end": 1923,
            "text": "\n\n    hasEndpoints():boolean;"
          },
          {
            "name": "isInteractive",
            "start": 1923,
            "end": 1952,
            "text": "\n    isInteractive():boolean;"
          },
          {
            "name": "isGraphical",
            "start": 1952,
            "end": 1978,
            "text": "\n    isGraphical():boolean"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "AuthentificationManager",
        "methods": [
          {
            "name": "supports",
            "start": 2016,
            "end": 2067,
            "text": "\n\n    supports(client:SecurityEnvironment):boolean;"
          },
          {
            "name": "doAuth",
            "start": 2067,
            "end": 2318,
            "text": "\n\n    /**\n     * performs authentification\n     * everything may happen here even sending horse rider to a new city\n     * or flight to moon\n     * @param env\n     */\n    doAuth(env:SecurityEnvironment,authData:AuthData):Promise<AuthentificationState>"
          },
          {
            "name": "doLogout",
            "start": 2318,
            "end": 2540,
            "text": "\n\n    /**\n     * performs log out\n     * if it is needed to blow a nuke to logout it is possible\n     * @param env\n     */\n    doLogout(env:SecurityEnvironment,authData:AuthentificationState):Promise<AuthentificationState>"
          },
          {
            "name": "addAuthDataToRequest",
            "start": 2540,
            "end": 2780,
            "text": "\n\n\n    /**\n     * performs arbitrary request transform (as a sample might change actual url)\n     * or do complex encoding\n     * @param req\n     */\n    addAuthDataToRequest(req:har.Request,state:AuthentificationState):Promise<har.Response>"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "SchemeInfo",
        "methods": [
          {
            "name": "name",
            "start": 2838,
            "end": 2856,
            "text": "\n    name():string"
          },
          {
            "name": "description",
            "start": 2856,
            "end": 2881,
            "text": "\n    description():string"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [
          {
            "name": "parameterSpec",
            "type": {
              "base": {
                "typeName": "ParameterSpec",
                "nameSpace": "",
                "basicName": "ParameterSpec",
                "typeKind": 0,
                "typeArguments": [],
                "modulePath": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\auth.ts"
              },
              "typeKind": 1
            },
            "annotations": [],
            "valueConstraint": null,
            "optional": false
          }
        ],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "SecurityScheme",
        "methods": [
          {
            "name": "info",
            "start": 2909,
            "end": 2932,
            "text": "\n\n    info():SchemeInfo"
          },
          {
            "name": "id",
            "start": 2932,
            "end": 2948,
            "text": "\n    id():string"
          },
          {
            "name": "needsEndpoints",
            "start": 2948,
            "end": 2978,
            "text": "\n    needsEndpoints():boolean;"
          },
          {
            "name": "isInteractive",
            "start": 2978,
            "end": 3007,
            "text": "\n    isInteractive():boolean;"
          },
          {
            "name": "isGraphical",
            "start": 3007,
            "end": 3126,
            "text": "\n    /***\n     * means that you potentially need to have graphical display to pass it\n     */\n    isGraphical():boolean"
          },
          {
            "name": "createAuthManager",
            "start": 3126,
            "end": 3176,
            "text": "\n\n    createAuthManager():AuthentificationManager;"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "SecurityAwareApiClient",
        "methods": [
          {
            "name": "api",
            "start": 3213,
            "end": 3239,
            "text": "\n    api():RamlWrapper.Api"
          },
          {
            "name": "securitySchemes",
            "start": 3239,
            "end": 3279,
            "text": "\n\n    securitySchemes():SecurityScheme[]"
          },
          {
            "name": "getOrCreateAuthManager",
            "start": 3279,
            "end": 3349,
            "text": "\n\n    getOrCreateAuthManager(s:SecurityScheme):AuthentificationManager"
          },
          {
            "name": "doAuth",
            "start": 3349,
            "end": 3415,
            "text": "\n\n    doAuth(scheme:SecurityScheme):Promise<AuthentificationState>"
          },
          {
            "name": "doAuthSync",
            "start": 3415,
            "end": 3475,
            "text": "\n    doAuthSync(scheme:SecurityScheme):AuthentificationState"
          },
          {
            "name": "setCurrentAuthData",
            "start": 3475,
            "end": 3531,
            "text": "\n\n\n\n    setCurrentAuthData(state:AuthentificationState);"
          },
          {
            "name": "getCurrentAuthData",
            "start": 3531,
            "end": 3605,
            "text": "//needed for multiple users\n    getCurrentAuthData():AuthentificationState"
          }
        ],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      },
      {
        "name": "SecuritySchemeHook",
        "methods": [],
        "typeParameters": [],
        "typeParameterConstraint": [],
        "implements": [],
        "fields": [],
        "isInterface": true,
        "annotations": [],
        "extends": [],
        "moduleName": null
      }
    ],
    "aliases": [],
    "enumDeclarations": [
      {
        "name": "StatusCode",
        "members": [
          "OK",
          "WARNING",
          "ERROR",
          "UNKNOWN",
          "CANCELLED"
        ]
      }
    ],
    "imports": {
      "Sys": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\systemTypes.ts"
    },
    "name": "c:\\GIT-repos\\raml-labs\\src\\raml1\\spec-1.0\\auth.ts"
  }
]