




using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using RAML.Api.Core;
using Raml.Common;

namespace Box
{
    public partial class Items
    {
        private readonly MoviesApi proxy;

        internal Items(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Retrieves the files and/or folders contained within this folder without any other metadata about the folder. 
		/// </summary>
		/// <param name="folderId"></param>
		/// <param name="getitemsquery">query properties</param>
        public virtual async Task<Models.ItemsGetResponse> Get(string folderId, Models.GetItemsQuery getitemsquery)
        {

            var url = "folders/{folderId}/items";
            url = url.Replace("{folderId}", folderId.ToString());
            if(getitemsquery != null)
            {
                url += "?";
                if(getitemsquery.Limit != null)
					url += "&limit=" + getitemsquery.Limit;
                if(getitemsquery.Offset != null)
					url += "&offset=" + getitemsquery.Offset;
                if(getitemsquery.Fields != null)
					url += "&fields=" + getitemsquery.Fields;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"description\": \"For files is 'file'\",            \"type\": \"string\"          },          \"id\": {            \"description\": \"Box's unique string identifying this file.\",            \"type\": \"string\"          },          \"sequence_id\": {            \"description\": \"A unique ID for use with the /events endpoint.\",            \"type\": \"string\"          },          \"etag\": {            \"description\": \"A unique string identifying the version of this file.\",            \"type\": \"string\"          },          \"sha1\": {            \"description\": \"The sha1 hash of this file.\",            \"type\": \"string\"          },          \"name\": {            \"description\": \"The name of this file.\",            \"type\": \"string\"          },          \"description\": {            \"description\": \"The description of this file.\",            \"type\": \"string\"          },          \"size\": {            \"description\": \"Size of this file in bytes.\",            \"type\": \"integer\"          },          \"path_collection\": {            \"type\": \"object\",            \"paths\": {              \"properties\": {                \"total_count\": {                  \"type\": \"integer\"                },                \"entries\": {                  \"properties\": {                    \"type\": {                      \"type\": \"string\"                    },                    \"id\": {                      \"type\": \"string\"                    },                    \"sequence_id\": {                      \"type\": \"string\"                    },                    \"etag\": {                      \"type\": \"string\"                    },                    \"name\": {                      \"type\": \"string\"                    }                  },                  \"type\": \"array\"                },                \"description\": \"Array of entries.\",                \"type\": \"array\"              },              \"type\": \"object\"            },            \"description\": \"The path of folders to this item, starting at the root.\"          },          \"created_at\": {            \"type\": \"string\",            \"description\": \"When this file was created on Box's servers.\"          },          \"modified_at\": {            \"type\": \"string\",            \"description\": \"When this file was last updated on the Box servers.\"          },          \"trashed_at\": {            \"type\": \"string\",            \"description\": \"When this file was last moved to the trash.\"          },          \"purged_at\": {            \"type\": \"string\",            \"description\": \"When this file will be permanently deleted.\"          },          \"content_created_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was created.\"          },          \"content_modified_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was last modified.\"          },          \"created_by\": {            \"type\": \"object\",            \"description\": \"The user who first created file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"modified_by\": {            \"type\": \"object\",            \"description\": \"The user who last updated this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"owned_by\": {            \"type\": \"object\",            \"description\": \"The user who owns this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"shared_link\": {            \"type\": \"object\",            \"description\": \"The shared link object for this file.\",            \"properties\": {              \"url\": {                \"type\": \"string\"              },              \"download_url\": {                \"type\": \"string\"              },              \"vanity_url\": {                \"type\": \"string\"              },              \"is_password_enabled\": {                \"type\": \"boolean\"              },              \"unshared_at\": {                \"type\": \"string\"              },              \"download_count\": {                \"type\": \"integer\"              },              \"preview_count\": {                \"type\": \"integer\"              },              \"access\": {                \"type\": \"string\"              },              \"permissions\": {                \"properties\": {                  \"can_download\": {                    \"type\": \"boolean\"                  },                  \"can_preview\": {                    \"type\": \"boolean\"                  }                }              }            }          },          \"parent\": {            \"type\": \"object\",            \"description\": \"The folder this file is contained in.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"item_status\": {            \"description\": \"Whether this item is deleted or not.\",            \"type\": \"string\"          },          \"version_number\": {            \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",            \"required\": false,            \"type\": \"string\"          },          \"comment_count\": {            \"description\": \"The number of comments on a file\",            \"required\": false,            \"type\": \"integer\"          }        }      }    },    \"offset\": {      \"type\": \"integer\"    },    \"limit\": {      \"type\": \"integer\"    },    \"order\": {      \"type\": \"array\",      \"ord\": {        \"properties\": {          \"by\": {            \"type\": \"string\"          },          \"direction\": {            \"type\": \"string\"          }        },        \"type\": \"object\"      },      \"required\": false    }  }}", response.Content);
				}
					
			}

            return new Models.ItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"description\": \"For files is 'file'\",            \"type\": \"string\"          },          \"id\": {            \"description\": \"Box's unique string identifying this file.\",            \"type\": \"string\"          },          \"sequence_id\": {            \"description\": \"A unique ID for use with the /events endpoint.\",            \"type\": \"string\"          },          \"etag\": {            \"description\": \"A unique string identifying the version of this file.\",            \"type\": \"string\"          },          \"sha1\": {            \"description\": \"The sha1 hash of this file.\",            \"type\": \"string\"          },          \"name\": {            \"description\": \"The name of this file.\",            \"type\": \"string\"          },          \"description\": {            \"description\": \"The description of this file.\",            \"type\": \"string\"          },          \"size\": {            \"description\": \"Size of this file in bytes.\",            \"type\": \"integer\"          },          \"path_collection\": {            \"type\": \"object\",            \"paths\": {              \"properties\": {                \"total_count\": {                  \"type\": \"integer\"                },                \"entries\": {                  \"properties\": {                    \"type\": {                      \"type\": \"string\"                    },                    \"id\": {                      \"type\": \"string\"                    },                    \"sequence_id\": {                      \"type\": \"string\"                    },                    \"etag\": {                      \"type\": \"string\"                    },                    \"name\": {                      \"type\": \"string\"                    }                  },                  \"type\": \"array\"                },                \"description\": \"Array of entries.\",                \"type\": \"array\"              },              \"type\": \"object\"            },            \"description\": \"The path of folders to this item, starting at the root.\"          },          \"created_at\": {            \"type\": \"string\",            \"description\": \"When this file was created on Box's servers.\"          },          \"modified_at\": {            \"type\": \"string\",            \"description\": \"When this file was last updated on the Box servers.\"          },          \"trashed_at\": {            \"type\": \"string\",            \"description\": \"When this file was last moved to the trash.\"          },          \"purged_at\": {            \"type\": \"string\",            \"description\": \"When this file will be permanently deleted.\"          },          \"content_created_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was created.\"          },          \"content_modified_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was last modified.\"          },          \"created_by\": {            \"type\": \"object\",            \"description\": \"The user who first created file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"modified_by\": {            \"type\": \"object\",            \"description\": \"The user who last updated this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"owned_by\": {            \"type\": \"object\",            \"description\": \"The user who owns this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"shared_link\": {            \"type\": \"object\",            \"description\": \"The shared link object for this file.\",            \"properties\": {              \"url\": {                \"type\": \"string\"              },              \"download_url\": {                \"type\": \"string\"              },              \"vanity_url\": {                \"type\": \"string\"              },              \"is_password_enabled\": {                \"type\": \"boolean\"              },              \"unshared_at\": {                \"type\": \"string\"              },              \"download_count\": {                \"type\": \"integer\"              },              \"preview_count\": {                \"type\": \"integer\"              },              \"access\": {                \"type\": \"string\"              },              \"permissions\": {                \"properties\": {                  \"can_download\": {                    \"type\": \"boolean\"                  },                  \"can_preview\": {                    \"type\": \"boolean\"                  }                }              }            }          },          \"parent\": {            \"type\": \"object\",            \"description\": \"The folder this file is contained in.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"item_status\": {            \"description\": \"Whether this item is deleted or not.\",            \"type\": \"string\"          },          \"version_number\": {            \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",            \"required\": false,            \"type\": \"string\"          },          \"comment_count\": {            \"description\": \"The number of comments on a file\",            \"required\": false,            \"type\": \"integer\"          }        }      }    },    \"offset\": {      \"type\": \"integer\"    },    \"limit\": {      \"type\": \"integer\"    },    \"order\": {      \"type\": \"array\",      \"ord\": {        \"properties\": {          \"by\": {            \"type\": \"string\"          },          \"direction\": {            \"type\": \"string\"          }        },        \"type\": \"object\"      },      \"required\": false    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Retrieves the files and/or folders contained within this folder without any other metadata about the folder. 
		/// </summary>
		/// <param name="request">Models.ItemsGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.ItemsGetResponse> Get(Models.ItemsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "folders/{folderId}/items";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FolderId == null)
				throw new InvalidOperationException("Uri Parameter FolderId cannot be null");

            url = url.Replace("{folderId}", request.UriParameters.FolderId.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Limit != null)
                    url += "&limit=" + request.Query.Limit;
                if(request.Query.Offset != null)
                    url += "&offset=" + request.Query.Offset;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"description\": \"For files is 'file'\",            \"type\": \"string\"          },          \"id\": {            \"description\": \"Box's unique string identifying this file.\",            \"type\": \"string\"          },          \"sequence_id\": {            \"description\": \"A unique ID for use with the /events endpoint.\",            \"type\": \"string\"          },          \"etag\": {            \"description\": \"A unique string identifying the version of this file.\",            \"type\": \"string\"          },          \"sha1\": {            \"description\": \"The sha1 hash of this file.\",            \"type\": \"string\"          },          \"name\": {            \"description\": \"The name of this file.\",            \"type\": \"string\"          },          \"description\": {            \"description\": \"The description of this file.\",            \"type\": \"string\"          },          \"size\": {            \"description\": \"Size of this file in bytes.\",            \"type\": \"integer\"          },          \"path_collection\": {            \"type\": \"object\",            \"paths\": {              \"properties\": {                \"total_count\": {                  \"type\": \"integer\"                },                \"entries\": {                  \"properties\": {                    \"type\": {                      \"type\": \"string\"                    },                    \"id\": {                      \"type\": \"string\"                    },                    \"sequence_id\": {                      \"type\": \"string\"                    },                    \"etag\": {                      \"type\": \"string\"                    },                    \"name\": {                      \"type\": \"string\"                    }                  },                  \"type\": \"array\"                },                \"description\": \"Array of entries.\",                \"type\": \"array\"              },              \"type\": \"object\"            },            \"description\": \"The path of folders to this item, starting at the root.\"          },          \"created_at\": {            \"type\": \"string\",            \"description\": \"When this file was created on Box's servers.\"          },          \"modified_at\": {            \"type\": \"string\",            \"description\": \"When this file was last updated on the Box servers.\"          },          \"trashed_at\": {            \"type\": \"string\",            \"description\": \"When this file was last moved to the trash.\"          },          \"purged_at\": {            \"type\": \"string\",            \"description\": \"When this file will be permanently deleted.\"          },          \"content_created_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was created.\"          },          \"content_modified_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was last modified.\"          },          \"created_by\": {            \"type\": \"object\",            \"description\": \"The user who first created file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"modified_by\": {            \"type\": \"object\",            \"description\": \"The user who last updated this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"owned_by\": {            \"type\": \"object\",            \"description\": \"The user who owns this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"shared_link\": {            \"type\": \"object\",            \"description\": \"The shared link object for this file.\",            \"properties\": {              \"url\": {                \"type\": \"string\"              },              \"download_url\": {                \"type\": \"string\"              },              \"vanity_url\": {                \"type\": \"string\"              },              \"is_password_enabled\": {                \"type\": \"boolean\"              },              \"unshared_at\": {                \"type\": \"string\"              },              \"download_count\": {                \"type\": \"integer\"              },              \"preview_count\": {                \"type\": \"integer\"              },              \"access\": {                \"type\": \"string\"              },              \"permissions\": {                \"properties\": {                  \"can_download\": {                    \"type\": \"boolean\"                  },                  \"can_preview\": {                    \"type\": \"boolean\"                  }                }              }            }          },          \"parent\": {            \"type\": \"object\",            \"description\": \"The folder this file is contained in.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"item_status\": {            \"description\": \"Whether this item is deleted or not.\",            \"type\": \"string\"          },          \"version_number\": {            \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",            \"required\": false,            \"type\": \"string\"          },          \"comment_count\": {            \"description\": \"The number of comments on a file\",            \"required\": false,            \"type\": \"integer\"          }        }      }    },    \"offset\": {      \"type\": \"integer\"    },    \"limit\": {      \"type\": \"integer\"    },    \"order\": {      \"type\": \"array\",      \"ord\": {        \"properties\": {          \"by\": {            \"type\": \"string\"          },          \"direction\": {            \"type\": \"string\"          }        },        \"type\": \"object\"      },      \"required\": false    }  }}", response.Content);
				}
				
            }
            return new Models.ItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"description\": \"For files is 'file'\",            \"type\": \"string\"          },          \"id\": {            \"description\": \"Box's unique string identifying this file.\",            \"type\": \"string\"          },          \"sequence_id\": {            \"description\": \"A unique ID for use with the /events endpoint.\",            \"type\": \"string\"          },          \"etag\": {            \"description\": \"A unique string identifying the version of this file.\",            \"type\": \"string\"          },          \"sha1\": {            \"description\": \"The sha1 hash of this file.\",            \"type\": \"string\"          },          \"name\": {            \"description\": \"The name of this file.\",            \"type\": \"string\"          },          \"description\": {            \"description\": \"The description of this file.\",            \"type\": \"string\"          },          \"size\": {            \"description\": \"Size of this file in bytes.\",            \"type\": \"integer\"          },          \"path_collection\": {            \"type\": \"object\",            \"paths\": {              \"properties\": {                \"total_count\": {                  \"type\": \"integer\"                },                \"entries\": {                  \"properties\": {                    \"type\": {                      \"type\": \"string\"                    },                    \"id\": {                      \"type\": \"string\"                    },                    \"sequence_id\": {                      \"type\": \"string\"                    },                    \"etag\": {                      \"type\": \"string\"                    },                    \"name\": {                      \"type\": \"string\"                    }                  },                  \"type\": \"array\"                },                \"description\": \"Array of entries.\",                \"type\": \"array\"              },              \"type\": \"object\"            },            \"description\": \"The path of folders to this item, starting at the root.\"          },          \"created_at\": {            \"type\": \"string\",            \"description\": \"When this file was created on Box's servers.\"          },          \"modified_at\": {            \"type\": \"string\",            \"description\": \"When this file was last updated on the Box servers.\"          },          \"trashed_at\": {            \"type\": \"string\",            \"description\": \"When this file was last moved to the trash.\"          },          \"purged_at\": {            \"type\": \"string\",            \"description\": \"When this file will be permanently deleted.\"          },          \"content_created_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was created.\"          },          \"content_modified_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was last modified.\"          },          \"created_by\": {            \"type\": \"object\",            \"description\": \"The user who first created file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"modified_by\": {            \"type\": \"object\",            \"description\": \"The user who last updated this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"owned_by\": {            \"type\": \"object\",            \"description\": \"The user who owns this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"shared_link\": {            \"type\": \"object\",            \"description\": \"The shared link object for this file.\",            \"properties\": {              \"url\": {                \"type\": \"string\"              },              \"download_url\": {                \"type\": \"string\"              },              \"vanity_url\": {                \"type\": \"string\"              },              \"is_password_enabled\": {                \"type\": \"boolean\"              },              \"unshared_at\": {                \"type\": \"string\"              },              \"download_count\": {                \"type\": \"integer\"              },              \"preview_count\": {                \"type\": \"integer\"              },              \"access\": {                \"type\": \"string\"              },              \"permissions\": {                \"properties\": {                  \"can_download\": {                    \"type\": \"boolean\"                  },                  \"can_preview\": {                    \"type\": \"boolean\"                  }                }              }            }          },          \"parent\": {            \"type\": \"object\",            \"description\": \"The folder this file is contained in.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"item_status\": {            \"description\": \"Whether this item is deleted or not.\",            \"type\": \"string\"          },          \"version_number\": {            \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",            \"required\": false,            \"type\": \"string\"          },          \"comment_count\": {            \"description\": \"The number of comments on a file\",            \"required\": false,            \"type\": \"integer\"          }        }      }    },    \"offset\": {      \"type\": \"integer\"    },    \"limit\": {      \"type\": \"integer\"    },    \"order\": {      \"type\": \"array\",      \"ord\": {        \"properties\": {          \"by\": {            \"type\": \"string\"          },          \"direction\": {            \"type\": \"string\"          }        },        \"type\": \"object\"      },      \"required\": false    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Copy
    {
        private readonly MoviesApi proxy;

        internal Copy(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Used to create a copy of a folder in another folder. The original version of the folder will not be altered. 
		/// </summary>
		/// <param name="copypostrequestcontent"></param>
		/// <param name="folderId"></param>
        public virtual async Task<Models.CopyPostResponse> Post(Models.CopyPostRequestContent copypostrequestcontent, string folderId)
        {

            var url = "folders/{folderId}/copy";
            url = url.Replace("{folderId}", folderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.CopyPostRequestContent), copypostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.CopyPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to create a copy of a folder in another folder. The original version of the folder will not be altered. 
		/// </summary>
		/// <param name="request">Models.CopyPostRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.CopyPostResponse> Post(Models.CopyPostRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "folders/{folderId}/copy";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FolderId == null)
				throw new InvalidOperationException("Uri Parameter FolderId cannot be null");

            url = url.Replace("{folderId}", request.UriParameters.FolderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.CopyPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.CopyPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Collaborations
    {
        private readonly MoviesApi proxy;

        internal Collaborations(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Use this to get a list of all the collaborations on a folder i.e. all of the users that have access to that folder. 
		/// </summary>
		/// <param name="folderId"></param>
        public virtual async Task<Models.CollaborationsGetResponse> Get(string folderId)
        {

            var url = "folders/{folderId}/collaborations";
            url = url.Replace("{folderId}", folderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"expires_at\": {            \"type\": \"string\"          },          \"status\": {            \"type\": \"string\"          },          \"accessible_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"role\": {            \"type\": \"string\"          },          \"acknowledged_at\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.CollaborationsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"expires_at\": {            \"type\": \"string\"          },          \"status\": {            \"type\": \"string\"          },          \"accessible_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"role\": {            \"type\": \"string\"          },          \"acknowledged_at\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Use this to get a list of all the collaborations on a folder i.e. all of the users that have access to that folder. 
		/// </summary>
		/// <param name="request">Models.CollaborationsGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.CollaborationsGetResponse> Get(Models.CollaborationsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "folders/{folderId}/collaborations";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FolderId == null)
				throw new InvalidOperationException("Uri Parameter FolderId cannot be null");

            url = url.Replace("{folderId}", request.UriParameters.FolderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"expires_at\": {            \"type\": \"string\"          },          \"status\": {            \"type\": \"string\"          },          \"accessible_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"role\": {            \"type\": \"string\"          },          \"acknowledged_at\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.CollaborationsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"expires_at\": {            \"type\": \"string\"          },          \"status\": {            \"type\": \"string\"          },          \"accessible_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"role\": {            \"type\": \"string\"          },          \"acknowledged_at\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Trash
    {
        private readonly MoviesApi proxy;

        internal Trash(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Permanently deletes an item that is in the trash. The item will no longer exist in Box. This action cannot be undone. 
		/// </summary>
		/// <param name="folderId"></param>
        public virtual async Task<ApiResponse> Delete(string folderId)
        {

            var url = "folders/{folderId}/trash";
            url = url.Replace("{folderId}", folderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Permanently deletes an item that is in the trash. The item will no longer exist in Box. This action cannot be undone. 
		/// </summary>
		/// <param name="request">Models.TrashDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.TrashDeleteRequest request)
        {

            var url = "folders/{folderId}/trash";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FolderId == null)
				throw new InvalidOperationException("Uri Parameter FolderId cannot be null");

            url = url.Replace("{folderId}", request.UriParameters.FolderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

        /// <summary>
		/// Retrieves an item that has been moved to the trash. The full item will be returned, including information about when the it was moved to the trash. 
		/// </summary>
		/// <param name="folderId"></param>
        public virtual async Task<Models.TrashGetResponse> Get(string folderId)
        {

            var url = "folders/{folderId}/trash";
            url = url.Replace("{folderId}", folderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.TrashGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Retrieves an item that has been moved to the trash. The full item will be returned, including information about when the it was moved to the trash. 
		/// </summary>
		/// <param name="request">Models.TrashGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.TrashGetResponse> Get(Models.TrashGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "folders/{folderId}/trash";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FolderId == null)
				throw new InvalidOperationException("Uri Parameter FolderId cannot be null");

            url = url.Replace("{folderId}", request.UriParameters.FolderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.TrashGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class TrashItems
    {
        private readonly MoviesApi proxy;

        internal TrashItems(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Retrieves the files and/or folders that have been moved to the trash. Any attribute in the full files or folders objects can be passed in with the fields parameter to get specific attributes, and only those specific attributes back; otherwise, the mini format is returned for each item by default. Multiple attributes can be passed in separated by commas e.g. `fields=name,created_at`. Paginated results can be retrieved using the limit and offset parameters. 
		/// </summary>
		/// <param name="gettrashitemsquery">query properties</param>
        public virtual async Task<Models.TrashItemsGetResponse> Get(Models.GetTrashItemsQuery gettrashitemsquery)
        {

            var url = "folders/trash/items";
            if(gettrashitemsquery != null)
            {
                url += "?";
                if(gettrashitemsquery.Limit != null)
					url += "&limit=" + gettrashitemsquery.Limit;
                if(gettrashitemsquery.Offset != null)
					url += "&offset=" + gettrashitemsquery.Offset;
                if(gettrashitemsquery.Fields != null)
					url += "&fields=" + gettrashitemsquery.Fields;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"description\": \"For files is 'file'\",            \"type\": \"string\"          },          \"id\": {            \"description\": \"Box's unique string identifying this file.\",            \"type\": \"string\"          },          \"sequence_id\": {            \"description\": \"A unique ID for use with the /events endpoint.\",            \"type\": \"string\"          },          \"etag\": {            \"description\": \"A unique string identifying the version of this file.\",            \"type\": \"string\"          },          \"sha1\": {            \"description\": \"The sha1 hash of this file.\",            \"type\": \"string\"          },          \"name\": {            \"description\": \"The name of this file.\",            \"type\": \"string\"          },          \"description\": {            \"description\": \"The description of this file.\",            \"type\": \"string\"          },          \"size\": {            \"description\": \"Size of this file in bytes.\",            \"type\": \"integer\"          },          \"path_collection\": {            \"type\": \"object\",            \"paths\": {              \"properties\": {                \"total_count\": {                  \"type\": \"integer\"                },                \"entries\": {                  \"properties\": {                    \"type\": {                      \"type\": \"string\"                    },                    \"id\": {                      \"type\": \"string\"                    },                    \"sequence_id\": {                      \"type\": \"string\"                    },                    \"etag\": {                      \"type\": \"string\"                    },                    \"name\": {                      \"type\": \"string\"                    }                  },                  \"type\": \"array\"                },                \"description\": \"Array of entries.\",                \"type\": \"array\"              },              \"type\": \"object\"            },            \"description\": \"The path of folders to this item, starting at the root.\"          },          \"created_at\": {            \"type\": \"string\",            \"description\": \"When this file was created on Box's servers.\"          },          \"modified_at\": {            \"type\": \"string\",            \"description\": \"When this file was last updated on the Box servers.\"          },          \"trashed_at\": {            \"type\": \"string\",            \"description\": \"When this file was last moved to the trash.\"          },          \"purged_at\": {            \"type\": \"string\",            \"description\": \"When this file will be permanently deleted.\"          },          \"content_created_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was created.\"          },          \"content_modified_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was last modified.\"          },          \"created_by\": {            \"type\": \"object\",            \"description\": \"The user who first created file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"modified_by\": {            \"type\": \"object\",            \"description\": \"The user who last updated this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"owned_by\": {            \"type\": \"object\",            \"description\": \"The user who owns this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"shared_link\": {            \"type\": \"object\",            \"description\": \"The shared link object for this file.\",            \"properties\": {              \"url\": {                \"type\": \"string\"              },              \"download_url\": {                \"type\": \"string\"              },              \"vanity_url\": {                \"type\": \"string\"              },              \"is_password_enabled\": {                \"type\": \"boolean\"              },              \"unshared_at\": {                \"type\": \"string\"              },              \"download_count\": {                \"type\": \"integer\"              },              \"preview_count\": {                \"type\": \"integer\"              },              \"access\": {                \"type\": \"string\"              },              \"permissions\": {                \"properties\": {                  \"can_download\": {                    \"type\": \"boolean\"                  },                  \"can_preview\": {                    \"type\": \"boolean\"                  }                }              }            }          },          \"parent\": {            \"type\": \"object\",            \"description\": \"The folder this file is contained in.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"item_status\": {            \"description\": \"Whether this item is deleted or not.\",            \"type\": \"string\"          },          \"version_number\": {            \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",            \"required\": false,            \"type\": \"string\"          },          \"comment_count\": {            \"description\": \"The number of comments on a file\",            \"required\": false,            \"type\": \"integer\"          }        }      }    },    \"offset\": {      \"type\": \"integer\"    },    \"limit\": {      \"type\": \"integer\"    },    \"order\": {      \"type\": \"array\",      \"ord\": {        \"properties\": {          \"by\": {            \"type\": \"string\"          },          \"direction\": {            \"type\": \"string\"          }        },        \"type\": \"object\"      },      \"required\": false    }  }}", response.Content);
				}
					
			}

            return new Models.TrashItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"description\": \"For files is 'file'\",            \"type\": \"string\"          },          \"id\": {            \"description\": \"Box's unique string identifying this file.\",            \"type\": \"string\"          },          \"sequence_id\": {            \"description\": \"A unique ID for use with the /events endpoint.\",            \"type\": \"string\"          },          \"etag\": {            \"description\": \"A unique string identifying the version of this file.\",            \"type\": \"string\"          },          \"sha1\": {            \"description\": \"The sha1 hash of this file.\",            \"type\": \"string\"          },          \"name\": {            \"description\": \"The name of this file.\",            \"type\": \"string\"          },          \"description\": {            \"description\": \"The description of this file.\",            \"type\": \"string\"          },          \"size\": {            \"description\": \"Size of this file in bytes.\",            \"type\": \"integer\"          },          \"path_collection\": {            \"type\": \"object\",            \"paths\": {              \"properties\": {                \"total_count\": {                  \"type\": \"integer\"                },                \"entries\": {                  \"properties\": {                    \"type\": {                      \"type\": \"string\"                    },                    \"id\": {                      \"type\": \"string\"                    },                    \"sequence_id\": {                      \"type\": \"string\"                    },                    \"etag\": {                      \"type\": \"string\"                    },                    \"name\": {                      \"type\": \"string\"                    }                  },                  \"type\": \"array\"                },                \"description\": \"Array of entries.\",                \"type\": \"array\"              },              \"type\": \"object\"            },            \"description\": \"The path of folders to this item, starting at the root.\"          },          \"created_at\": {            \"type\": \"string\",            \"description\": \"When this file was created on Box's servers.\"          },          \"modified_at\": {            \"type\": \"string\",            \"description\": \"When this file was last updated on the Box servers.\"          },          \"trashed_at\": {            \"type\": \"string\",            \"description\": \"When this file was last moved to the trash.\"          },          \"purged_at\": {            \"type\": \"string\",            \"description\": \"When this file will be permanently deleted.\"          },          \"content_created_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was created.\"          },          \"content_modified_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was last modified.\"          },          \"created_by\": {            \"type\": \"object\",            \"description\": \"The user who first created file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"modified_by\": {            \"type\": \"object\",            \"description\": \"The user who last updated this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"owned_by\": {            \"type\": \"object\",            \"description\": \"The user who owns this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"shared_link\": {            \"type\": \"object\",            \"description\": \"The shared link object for this file.\",            \"properties\": {              \"url\": {                \"type\": \"string\"              },              \"download_url\": {                \"type\": \"string\"              },              \"vanity_url\": {                \"type\": \"string\"              },              \"is_password_enabled\": {                \"type\": \"boolean\"              },              \"unshared_at\": {                \"type\": \"string\"              },              \"download_count\": {                \"type\": \"integer\"              },              \"preview_count\": {                \"type\": \"integer\"              },              \"access\": {                \"type\": \"string\"              },              \"permissions\": {                \"properties\": {                  \"can_download\": {                    \"type\": \"boolean\"                  },                  \"can_preview\": {                    \"type\": \"boolean\"                  }                }              }            }          },          \"parent\": {            \"type\": \"object\",            \"description\": \"The folder this file is contained in.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"item_status\": {            \"description\": \"Whether this item is deleted or not.\",            \"type\": \"string\"          },          \"version_number\": {            \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",            \"required\": false,            \"type\": \"string\"          },          \"comment_count\": {            \"description\": \"The number of comments on a file\",            \"required\": false,            \"type\": \"integer\"          }        }      }    },    \"offset\": {      \"type\": \"integer\"    },    \"limit\": {      \"type\": \"integer\"    },    \"order\": {      \"type\": \"array\",      \"ord\": {        \"properties\": {          \"by\": {            \"type\": \"string\"          },          \"direction\": {            \"type\": \"string\"          }        },        \"type\": \"object\"      },      \"required\": false    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Retrieves the files and/or folders that have been moved to the trash. Any attribute in the full files or folders objects can be passed in with the fields parameter to get specific attributes, and only those specific attributes back; otherwise, the mini format is returned for each item by default. Multiple attributes can be passed in separated by commas e.g. `fields=name,created_at`. Paginated results can be retrieved using the limit and offset parameters. 
		/// </summary>
		/// <param name="request">Models.TrashItemsGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.TrashItemsGetResponse> Get(Models.TrashItemsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "folders/trash/items";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Limit != null)
                    url += "&limit=" + request.Query.Limit;
                if(request.Query.Offset != null)
                    url += "&offset=" + request.Query.Offset;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"description\": \"For files is 'file'\",            \"type\": \"string\"          },          \"id\": {            \"description\": \"Box's unique string identifying this file.\",            \"type\": \"string\"          },          \"sequence_id\": {            \"description\": \"A unique ID for use with the /events endpoint.\",            \"type\": \"string\"          },          \"etag\": {            \"description\": \"A unique string identifying the version of this file.\",            \"type\": \"string\"          },          \"sha1\": {            \"description\": \"The sha1 hash of this file.\",            \"type\": \"string\"          },          \"name\": {            \"description\": \"The name of this file.\",            \"type\": \"string\"          },          \"description\": {            \"description\": \"The description of this file.\",            \"type\": \"string\"          },          \"size\": {            \"description\": \"Size of this file in bytes.\",            \"type\": \"integer\"          },          \"path_collection\": {            \"type\": \"object\",            \"paths\": {              \"properties\": {                \"total_count\": {                  \"type\": \"integer\"                },                \"entries\": {                  \"properties\": {                    \"type\": {                      \"type\": \"string\"                    },                    \"id\": {                      \"type\": \"string\"                    },                    \"sequence_id\": {                      \"type\": \"string\"                    },                    \"etag\": {                      \"type\": \"string\"                    },                    \"name\": {                      \"type\": \"string\"                    }                  },                  \"type\": \"array\"                },                \"description\": \"Array of entries.\",                \"type\": \"array\"              },              \"type\": \"object\"            },            \"description\": \"The path of folders to this item, starting at the root.\"          },          \"created_at\": {            \"type\": \"string\",            \"description\": \"When this file was created on Box's servers.\"          },          \"modified_at\": {            \"type\": \"string\",            \"description\": \"When this file was last updated on the Box servers.\"          },          \"trashed_at\": {            \"type\": \"string\",            \"description\": \"When this file was last moved to the trash.\"          },          \"purged_at\": {            \"type\": \"string\",            \"description\": \"When this file will be permanently deleted.\"          },          \"content_created_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was created.\"          },          \"content_modified_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was last modified.\"          },          \"created_by\": {            \"type\": \"object\",            \"description\": \"The user who first created file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"modified_by\": {            \"type\": \"object\",            \"description\": \"The user who last updated this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"owned_by\": {            \"type\": \"object\",            \"description\": \"The user who owns this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"shared_link\": {            \"type\": \"object\",            \"description\": \"The shared link object for this file.\",            \"properties\": {              \"url\": {                \"type\": \"string\"              },              \"download_url\": {                \"type\": \"string\"              },              \"vanity_url\": {                \"type\": \"string\"              },              \"is_password_enabled\": {                \"type\": \"boolean\"              },              \"unshared_at\": {                \"type\": \"string\"              },              \"download_count\": {                \"type\": \"integer\"              },              \"preview_count\": {                \"type\": \"integer\"              },              \"access\": {                \"type\": \"string\"              },              \"permissions\": {                \"properties\": {                  \"can_download\": {                    \"type\": \"boolean\"                  },                  \"can_preview\": {                    \"type\": \"boolean\"                  }                }              }            }          },          \"parent\": {            \"type\": \"object\",            \"description\": \"The folder this file is contained in.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"item_status\": {            \"description\": \"Whether this item is deleted or not.\",            \"type\": \"string\"          },          \"version_number\": {            \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",            \"required\": false,            \"type\": \"string\"          },          \"comment_count\": {            \"description\": \"The number of comments on a file\",            \"required\": false,            \"type\": \"integer\"          }        }      }    },    \"offset\": {      \"type\": \"integer\"    },    \"limit\": {      \"type\": \"integer\"    },    \"order\": {      \"type\": \"array\",      \"ord\": {        \"properties\": {          \"by\": {            \"type\": \"string\"          },          \"direction\": {            \"type\": \"string\"          }        },        \"type\": \"object\"      },      \"required\": false    }  }}", response.Content);
				}
				
            }
            return new Models.TrashItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"description\": \"For files is 'file'\",            \"type\": \"string\"          },          \"id\": {            \"description\": \"Box's unique string identifying this file.\",            \"type\": \"string\"          },          \"sequence_id\": {            \"description\": \"A unique ID for use with the /events endpoint.\",            \"type\": \"string\"          },          \"etag\": {            \"description\": \"A unique string identifying the version of this file.\",            \"type\": \"string\"          },          \"sha1\": {            \"description\": \"The sha1 hash of this file.\",            \"type\": \"string\"          },          \"name\": {            \"description\": \"The name of this file.\",            \"type\": \"string\"          },          \"description\": {            \"description\": \"The description of this file.\",            \"type\": \"string\"          },          \"size\": {            \"description\": \"Size of this file in bytes.\",            \"type\": \"integer\"          },          \"path_collection\": {            \"type\": \"object\",            \"paths\": {              \"properties\": {                \"total_count\": {                  \"type\": \"integer\"                },                \"entries\": {                  \"properties\": {                    \"type\": {                      \"type\": \"string\"                    },                    \"id\": {                      \"type\": \"string\"                    },                    \"sequence_id\": {                      \"type\": \"string\"                    },                    \"etag\": {                      \"type\": \"string\"                    },                    \"name\": {                      \"type\": \"string\"                    }                  },                  \"type\": \"array\"                },                \"description\": \"Array of entries.\",                \"type\": \"array\"              },              \"type\": \"object\"            },            \"description\": \"The path of folders to this item, starting at the root.\"          },          \"created_at\": {            \"type\": \"string\",            \"description\": \"When this file was created on Box's servers.\"          },          \"modified_at\": {            \"type\": \"string\",            \"description\": \"When this file was last updated on the Box servers.\"          },          \"trashed_at\": {            \"type\": \"string\",            \"description\": \"When this file was last moved to the trash.\"          },          \"purged_at\": {            \"type\": \"string\",            \"description\": \"When this file will be permanently deleted.\"          },          \"content_created_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was created.\"          },          \"content_modified_at\": {            \"type\": \"string\",            \"description\": \"When the content of this file was last modified.\"          },          \"created_by\": {            \"type\": \"object\",            \"description\": \"The user who first created file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"modified_by\": {            \"type\": \"object\",            \"description\": \"The user who last updated this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"owned_by\": {            \"type\": \"object\",            \"description\": \"The user who owns this file.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"shared_link\": {            \"type\": \"object\",            \"description\": \"The shared link object for this file.\",            \"properties\": {              \"url\": {                \"type\": \"string\"              },              \"download_url\": {                \"type\": \"string\"              },              \"vanity_url\": {                \"type\": \"string\"              },              \"is_password_enabled\": {                \"type\": \"boolean\"              },              \"unshared_at\": {                \"type\": \"string\"              },              \"download_count\": {                \"type\": \"integer\"              },              \"preview_count\": {                \"type\": \"integer\"              },              \"access\": {                \"type\": \"string\"              },              \"permissions\": {                \"properties\": {                  \"can_download\": {                    \"type\": \"boolean\"                  },                  \"can_preview\": {                    \"type\": \"boolean\"                  }                }              }            }          },          \"parent\": {            \"type\": \"object\",            \"description\": \"The folder this file is contained in.\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"item_status\": {            \"description\": \"Whether this item is deleted or not.\",            \"type\": \"string\"          },          \"version_number\": {            \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",            \"required\": false,            \"type\": \"string\"          },          \"comment_count\": {            \"description\": \"The number of comments on a file\",            \"required\": false,            \"type\": \"integer\"          }        }      }    },    \"offset\": {      \"type\": \"integer\"    },    \"limit\": {      \"type\": \"integer\"    },    \"order\": {      \"type\": \"array\",      \"ord\": {        \"properties\": {          \"by\": {            \"type\": \"string\"          },          \"direction\": {            \"type\": \"string\"          }        },        \"type\": \"object\"      },      \"required\": false    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Folders
    {
        private readonly MoviesApi proxy;

        internal Folders(MoviesApi proxy)
        {
            this.proxy = proxy;
        }
        public virtual TrashItems TrashItems
        {
            get { return new TrashItems(proxy); }
        }
        public virtual Items Items
        {
            get { return new Items(proxy); }
        }
        public virtual Copy Copy
        {
            get { return new Copy(proxy); }
        }
        public virtual Collaborations Collaborations
        {
            get { return new Collaborations(proxy); }
        }
        public virtual Trash Trash
        {
            get { return new Trash(proxy); }
        }

        /// <summary>
		/// Allows to create new Folder
		/// </summary>
		/// <param name="folderspostrequestcontent"></param>
        public virtual async Task<Models.FoldersPostResponse> Post(Models.FoldersPostRequestContent folderspostrequestcontent)
        {

            var url = "folders";
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.FoldersPostRequestContent), folderspostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.FoldersPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Allows to create new Folder
		/// </summary>
		/// <param name="request">Models.FoldersPostRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.FoldersPostResponse> Post(Models.FoldersPostRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "folders";
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.FoldersPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.FoldersPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Used to delete a folder. A recursive parameter must be included in order to delete folders that have items inside of them. An optional `If-Match` header can be included to ensure that client only deletes the folder if it knows about the latest version. 
		/// </summary>
		/// <param name="folderId">The ID of the parent folder</param>
		/// <param name="deletefoldersquery">query properties</param>
        public virtual async Task<ApiResponse> Delete(string folderId, Models.DeleteFoldersQuery deletefoldersquery)
        {

            var url = "folders/{folderId}";
            url = url.Replace("{folderId}", folderId.ToString());
            if(deletefoldersquery != null)
            {
                url += "?";
                if(deletefoldersquery.Recursive != null)
					url += "&recursive=" + deletefoldersquery.Recursive;
            }
            var req = new HttpRequestMessage(HttpMethod.Delete, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Used to delete a folder. A recursive parameter must be included in order to delete folders that have items inside of them. An optional `If-Match` header can be included to ensure that client only deletes the folder if it knows about the latest version. 
		/// </summary>
		/// <param name="request">Models.FoldersDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.FoldersDeleteRequest request)
        {

            var url = "folders/{folderId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FolderId == null)
				throw new InvalidOperationException("Uri Parameter FolderId cannot be null");

            url = url.Replace("{folderId}", request.UriParameters.FolderId.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Recursive != null)
                    url += "&recursive=" + request.Query.Recursive;
            }
            var req = new HttpRequestMessage(HttpMethod.Delete, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

        /// <summary>
		/// Restores an item that has been moved to the trash. Default behavior is to restore the item to the folder it was in before it was moved to the trash. If that parent folder no longer exists or if there is now an item with the same name in that parent folder, the new parent folder and/or new name will need to be included in the request. 
		/// </summary>
		/// <param name="folderidpostrequestcontent"></param>
		/// <param name="folderId">The ID of the parent folder</param>
        public virtual async Task<Models.FoldersPostByFolderIdResponse> PostByFolderId(Models.FolderIdPostRequestContent folderidpostrequestcontent, string folderId)
        {

            var url = "folders/{folderId}";
            url = url.Replace("{folderId}", folderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.FolderIdPostRequestContent), folderidpostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync(Models.FoldersPostByFolderIdResponse.GetSchema(response.StatusCode), response.Content);
				}
					
			}

            return new Models.FoldersPostByFolderIdResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid(Models.FoldersPostByFolderIdResponse.GetSchema(response.StatusCode), response.Content), true)
                                            };

        }

        /// <summary>
		/// Restores an item that has been moved to the trash. Default behavior is to restore the item to the folder it was in before it was moved to the trash. If that parent folder no longer exists or if there is now an item with the same name in that parent folder, the new parent folder and/or new name will need to be included in the request. 
		/// </summary>
		/// <param name="request">Models.FoldersPostByFolderIdRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.FoldersPostByFolderIdResponse> PostByFolderId(Models.FoldersPostByFolderIdRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "folders/{folderId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FolderId == null)
				throw new InvalidOperationException("Uri Parameter FolderId cannot be null");

            url = url.Replace("{folderId}", request.UriParameters.FolderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.FolderIdPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync(Models.FoldersPostByFolderIdResponse.GetSchema(response.StatusCode), response.Content);
				}
				
            }
            return new Models.FoldersPostByFolderIdResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid(Models.FoldersPostByFolderIdResponse.GetSchema(response.StatusCode), response.Content), true)
                                            };
        }

        /// <summary>
		/// Used to update information about the folder. To move a folder, update the ID of its parent. To enable an email address that can be used to upload files to this folder, update the `folder_upload_email` attribute. An optional If-Match header can be included to ensure that client only updates the folder if it knows about the latest version. 
		/// </summary>
		/// <param name="folderidputrequestcontent"></param>
		/// <param name="folderId">The ID of the parent folder</param>
        public virtual async Task<Models.FoldersPutResponse> Put(Models.FolderIdPutRequestContent folderidputrequestcontent, string folderId)
        {

            var url = "folders/{folderId}";
            url = url.Replace("{folderId}", folderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.FolderIdPutRequestContent), folderidputrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.FoldersPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to update information about the folder. To move a folder, update the ID of its parent. To enable an email address that can be used to upload files to this folder, update the `folder_upload_email` attribute. An optional If-Match header can be included to ensure that client only updates the folder if it knows about the latest version. 
		/// </summary>
		/// <param name="request">Models.FoldersPutRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.FoldersPutResponse> Put(Models.FoldersPutRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "folders/{folderId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FolderId == null)
				throw new InvalidOperationException("Uri Parameter FolderId cannot be null");

            url = url.Replace("{folderId}", request.UriParameters.FolderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.FolderIdPutRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.FoldersPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Retrieves the full metadata about a folder, including information about when it was last updated as well as the files and folders contained in it. The root folder of a Box account is always represented by the id **0**. 
		/// </summary>
		/// <param name="folderId">The ID of the parent folder</param>
        public virtual async Task<Models.FoldersGetResponse> Get(string folderId)
        {

            var url = "folders/{folderId}";
            url = url.Replace("{folderId}", folderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.FoldersGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Retrieves the full metadata about a folder, including information about when it was last updated as well as the files and folders contained in it. The root folder of a Box account is always represented by the id **0**. 
		/// </summary>
		/// <param name="request">Models.FoldersGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.FoldersGetResponse> Get(Models.FoldersGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "folders/{folderId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FolderId == null)
				throw new InvalidOperationException("Uri Parameter FolderId cannot be null");

            url = url.Replace("{folderId}", request.UriParameters.FolderId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.FoldersGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Current
    {
        private readonly MoviesApi proxy;

        internal Current(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Promote an Old Version of a File If there are previous versions of this file, this method can be used to promote one of the older versions to the top of the stack. This actually mints a copy of the old version and puts it on the top of the versions stack. The file will have the exact same contents, the same SHA1/etag, and the same name as the original. Other properties such as comments do not get updated to their former values. 
		/// </summary>
		/// <param name="currentpostrequestcontent"></param>
		/// <param name="fileId"></param>
        public virtual async Task<Models.CurrentPostResponse> Post(Models.CurrentPostRequestContent currentpostrequestcontent, string fileId)
        {

            var url = "files/{fileId}/versions/current";
            url = url.Replace("{fileId}", fileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.CurrentPostRequestContent), currentpostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"type\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"id\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"sha1\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"name\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"size\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"created_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_by\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"login\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.CurrentPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"type\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"id\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"sha1\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"name\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"size\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"created_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_by\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"login\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Promote an Old Version of a File If there are previous versions of this file, this method can be used to promote one of the older versions to the top of the stack. This actually mints a copy of the old version and puts it on the top of the versions stack. The file will have the exact same contents, the same SHA1/etag, and the same name as the original. Other properties such as comments do not get updated to their former values. 
		/// </summary>
		/// <param name="request">Models.CurrentPostRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.CurrentPostResponse> Post(Models.CurrentPostRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "files/{fileId}/versions/current";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.CurrentPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"type\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"id\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"sha1\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"name\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"size\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"created_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_by\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"login\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.CurrentPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"type\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"id\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"sha1\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"name\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"size\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"created_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_by\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"login\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Versions
    {
        private readonly MoviesApi proxy;

        internal Versions(MoviesApi proxy)
        {
            this.proxy = proxy;
        }
        public virtual Current Current
        {
            get { return new Current(proxy); }
        }

        /// <summary>
		/// If there are previous versions of this file, this method can be used to retrieve metadata about the older versions. **ALERT: Versions are only tracked for Box users with premium accounts.** 
		/// </summary>
		/// <param name="fileId"></param>
        public virtual async Task<Models.VersionsGetResponse> Get(string fileId)
        {

            var url = "files/{fileId}/versions";
            url = url.Replace("{fileId}", fileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"sha1\": {            \"type\": \"string\"          },          \"name\": {            \"type\": \"string\"          },          \"size\": {            \"type\": \"integer\"          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"modified_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          }        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.VersionsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"sha1\": {            \"type\": \"string\"          },          \"name\": {            \"type\": \"string\"          },          \"size\": {            \"type\": \"integer\"          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"modified_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          }        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// If there are previous versions of this file, this method can be used to retrieve metadata about the older versions. **ALERT: Versions are only tracked for Box users with premium accounts.** 
		/// </summary>
		/// <param name="request">Models.VersionsGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.VersionsGetResponse> Get(Models.VersionsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "files/{fileId}/versions";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"sha1\": {            \"type\": \"string\"          },          \"name\": {            \"type\": \"string\"          },          \"size\": {            \"type\": \"integer\"          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"modified_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          }        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.VersionsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"sha1\": {            \"type\": \"string\"          },          \"name\": {            \"type\": \"string\"          },          \"size\": {            \"type\": \"integer\"          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"modified_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          }        }      }    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Discards a specific file version to the trash.. Discards a specific file version to the trash.  Trash: Depending on the enterprise settings for this user, the item will either be actually deleted from Box or moved to the trash. 
		/// </summary>
		/// <param name="version_id"></param>
		/// <param name="fileId"></param>
        public virtual async Task<ApiResponse> Delete(string version_id, string fileId)
        {

            var url = "files/{fileId}/versions/{version_id}";
            url = url.Replace("{version_id}", version_id.ToString());
            url = url.Replace("{fileId}", fileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Discards a specific file version to the trash.. Discards a specific file version to the trash.  Trash: Depending on the enterprise settings for this user, the item will either be actually deleted from Box or moved to the trash. 
		/// </summary>
		/// <param name="request">Models.VersionsDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.VersionsDeleteRequest request)
        {

            var url = "files/{fileId}/versions/{version_id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Version_id == null)
				throw new InvalidOperationException("Uri Parameter Version_id cannot be null");

            url = url.Replace("{version_id}", request.UriParameters.Version_id.ToString());

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class FilesFileIdCopy
    {
        private readonly MoviesApi proxy;

        internal FilesFileIdCopy(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Used to create a copy of a file in another folder. The original version of the file will not be altered. 
		/// </summary>
		/// <param name="copypostrequestcontent"></param>
		/// <param name="fileId"></param>
        public virtual async Task<Models.FilesFileIdCopyPostResponse> Post(Models.CopyPostRequestContent copypostrequestcontent, string fileId)
        {

            var url = "files/{fileId}/copy";
            url = url.Replace("{fileId}", fileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.CopyPostRequestContent), copypostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.FilesFileIdCopyPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to create a copy of a file in another folder. The original version of the file will not be altered. 
		/// </summary>
		/// <param name="request">Models.FilesFileIdCopyPostRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.FilesFileIdCopyPostResponse> Post(Models.FilesFileIdCopyPostRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "files/{fileId}/copy";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.CopyPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.FilesFileIdCopyPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class FilesFileIdTrash
    {
        private readonly MoviesApi proxy;

        internal FilesFileIdTrash(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Permanently deletes an item that is in the trash. The item will no longer exist in Box. This action cannot be undone. 
		/// </summary>
		/// <param name="fileId"></param>
        public virtual async Task<ApiResponse> Delete(string fileId)
        {

            var url = "files/{fileId}/trash";
            url = url.Replace("{fileId}", fileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Permanently deletes an item that is in the trash. The item will no longer exist in Box. This action cannot be undone. 
		/// </summary>
		/// <param name="request">Models.FilesFileIdTrashDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.FilesFileIdTrashDeleteRequest request)
        {

            var url = "files/{fileId}/trash";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

        /// <summary>
		/// Retrieves an item that has been moved to the trash. The full item will be returned, including information about when the it was moved to the trash. 
		/// </summary>
		/// <param name="fileId"></param>
        public virtual async Task<Models.FilesFileIdTrashGetResponse> Get(string fileId)
        {

            var url = "files/{fileId}/trash";
            url = url.Replace("{fileId}", fileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.FilesFileIdTrashGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Retrieves an item that has been moved to the trash. The full item will be returned, including information about when the it was moved to the trash. 
		/// </summary>
		/// <param name="request">Models.FilesFileIdTrashGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.FilesFileIdTrashGetResponse> Get(Models.FilesFileIdTrashGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "files/{fileId}/trash";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.FilesFileIdTrashGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Tasks
    {
        private readonly MoviesApi proxy;

        internal Tasks(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Retrieves all of the tasks for given file. A collection of mini task objects is returned. If there are no tasks, an empty collection will be returned. 
		/// </summary>
		/// <param name="fileId"></param>
        public virtual async Task<Models.TasksGetResponse> Get(string fileId)
        {

            var url = "files/{fileId}/tasks";
            url = url.Replace("{fileId}", fileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"sha1\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"due_at\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.TasksGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"sha1\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"due_at\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Retrieves all of the tasks for given file. A collection of mini task objects is returned. If there are no tasks, an empty collection will be returned. 
		/// </summary>
		/// <param name="request">Models.TasksGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.TasksGetResponse> Get(Models.TasksGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "files/{fileId}/tasks";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"sha1\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"due_at\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.TasksGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"sha1\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"due_at\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class ThumbnailExtension
    {
        private readonly MoviesApi proxy;

        internal ThumbnailExtension(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Retrieves a thumbnail, or smaller image representation, of this file. Sizes of 32x32, 64x64, 128x128, and 256x256 can be returned. Currently thumbnails are only available in .png format and will only be generated for image file formats. There are three success cases that your application needs to account for:   - If the thumbnail isn&apos;t available yet, a 202 Accepted HTTP status will       be returned, including a &apos;Location&apos; header pointing to a placeholder       graphic that can be used until the thumbnail is returned. A `Retry-After`       header will also be returned, indicating the time in seconds after which       the thumbnail will be available. Your application should only attempt to       get the thumbnail again after Retry-After time.   - If Box can&apos;t generate a thumbnail for this file type, a 302 Found       response will be returned, redirecting to a placeholder graphic in the       requested size for this particular file type.   - If Box is unable to generate a thumbnail for this particular file, a       404 &apos;Not Found&apos; response will be returned with a code of       preview_cannot_be_generated. If there are any bad parameters sent in, a       standard 400 &apos;Bad Request&apos; will be returned. 
		/// </summary>
		/// <param name="extension">Generated file&apos;s extension. Currently thumbnails are only available in .png formatand will only be generated for image file formats.</param>
		/// <param name="fileId"></param>
		/// <param name="getthumbnailextensionquery">query properties</param>
        public virtual async Task<Models.ThumbnailExtensionGetResponse> Get(string extension, string fileId, Models.GetThumbnailExtensionQuery getthumbnailextensionquery)
        {

            var url = "files/{fileId}/thumbnail{extension}";
            url = url.Replace("{extension}", extension.ToString());
            url = url.Replace("{fileId}", fileId.ToString());
            if(getthumbnailextensionquery != null)
            {
                url += "?";
                if(getthumbnailextensionquery.Min_height != null)
					url += "&min_height=" + getthumbnailextensionquery.Min_height;
                if(getthumbnailextensionquery.Min_width != null)
					url += "&min_width=" + getthumbnailextensionquery.Min_width;
                if(getthumbnailextensionquery.Max_height != null)
					url += "&max_height=" + getthumbnailextensionquery.Max_height;
                if(getthumbnailextensionquery.Max_width != null)
					url += "&max_width=" + getthumbnailextensionquery.Max_width;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            var headers = new Models.GetThumbnailExtensionAcceptedResponseHeader();
            headers.SetProperties(response.Headers);
            return new Models.ThumbnailExtensionGetResponse  
                                            {
                                                RawContent = response.Content,
                                                Headers = headers, 
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Retrieves a thumbnail, or smaller image representation, of this file. Sizes of 32x32, 64x64, 128x128, and 256x256 can be returned. Currently thumbnails are only available in .png format and will only be generated for image file formats. There are three success cases that your application needs to account for:   - If the thumbnail isn&apos;t available yet, a 202 Accepted HTTP status will       be returned, including a &apos;Location&apos; header pointing to a placeholder       graphic that can be used until the thumbnail is returned. A `Retry-After`       header will also be returned, indicating the time in seconds after which       the thumbnail will be available. Your application should only attempt to       get the thumbnail again after Retry-After time.   - If Box can&apos;t generate a thumbnail for this file type, a 302 Found       response will be returned, redirecting to a placeholder graphic in the       requested size for this particular file type.   - If Box is unable to generate a thumbnail for this particular file, a       404 &apos;Not Found&apos; response will be returned with a code of       preview_cannot_be_generated. If there are any bad parameters sent in, a       standard 400 &apos;Bad Request&apos; will be returned. 
		/// </summary>
		/// <param name="request">Models.ThumbnailExtensionGetRequest</param>
        public virtual async Task<Models.ThumbnailExtensionGetResponse> Get(Models.ThumbnailExtensionGetRequest request)
        {

            var url = "files/{fileId}/thumbnail{extension}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Extension == null)
				throw new InvalidOperationException("Uri Parameter Extension cannot be null");

            url = url.Replace("{extension}", request.UriParameters.Extension.ToString());

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Min_height != null)
                    url += "&min_height=" + request.Query.Min_height;
                if(request.Query.Min_width != null)
                    url += "&min_width=" + request.Query.Min_width;
                if(request.Query.Max_height != null)
                    url += "&max_height=" + request.Query.Max_height;
                if(request.Query.Max_width != null)
                    url += "&max_width=" + request.Query.Max_width;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            var headers = new Models.GetThumbnailExtensionAcceptedResponseHeader();
            headers.SetProperties(response.Headers);
            return new Models.ThumbnailExtensionGetResponse  
                                            {
                                                RawContent = response.Content,
                                                Headers = headers, 
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Comments
    {
        private readonly MoviesApi proxy;

        internal Comments(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Retrieves the comments on a particular file, if any exist. A collection of comment objects are returned. If there are no comments on the file, an empty comments array is returned. 
		/// </summary>
		/// <param name="fileId"></param>
        public virtual async Task<Models.CommentsGetResponse> Get(string fileId)
        {

            var url = "files/{fileId}/comments";
            url = url.Replace("{fileId}", fileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" : [        {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"is_reply_comment\" : {              \"type\" : \"boolean\" ,              \"required\" : false            } ,            \"message\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"created_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }      ]    }  }}", response.Content);
				}
					
			}

            return new Models.CommentsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" : [        {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"is_reply_comment\" : {              \"type\" : \"boolean\" ,              \"required\" : false            } ,            \"message\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"created_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }      ]    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Retrieves the comments on a particular file, if any exist. A collection of comment objects are returned. If there are no comments on the file, an empty comments array is returned. 
		/// </summary>
		/// <param name="request">Models.CommentsGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.CommentsGetResponse> Get(Models.CommentsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "files/{fileId}/comments";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" : [        {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"is_reply_comment\" : {              \"type\" : \"boolean\" ,              \"required\" : false            } ,            \"message\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"created_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }      ]    }  }}", response.Content);
				}
				
            }
            return new Models.CommentsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" : [        {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"is_reply_comment\" : {              \"type\" : \"boolean\" ,              \"required\" : false            } ,            \"message\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"created_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }      ]    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Content
    {
        private readonly MoviesApi proxy;

        internal Content(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Retrieves the actual data of the file. An optional version parameter can be set to download a previous version of the file. 
		/// </summary>
		/// <param name="fileId"></param>
		/// <param name="getcontentquery">query properties</param>
        public virtual async Task<ApiResponse> Get(string fileId, Models.GetContentQuery getcontentquery)
        {

            var url = "files/{fileId}/content";
            url = url.Replace("{fileId}", fileId.ToString());
            if(getcontentquery != null)
            {
                url += "?";
                if(getcontentquery.Version != null)
					url += "&version=" + getcontentquery.Version;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Retrieves the actual data of the file. An optional version parameter can be set to download a previous version of the file. 
		/// </summary>
		/// <param name="request">Models.ContentGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ContentGetRequest request)
        {

            var url = "files/{fileId}/content";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class FilesFileId
    {
        private readonly MoviesApi proxy;

        internal FilesFileId(MoviesApi proxy)
        {
            this.proxy = proxy;
        }
        public virtual Versions Versions
        {
            get { return new Versions(proxy); }
        }
        public virtual FilesFileIdCopy FilesFileIdCopy
        {
            get { return new FilesFileIdCopy(proxy); }
        }
        public virtual FilesFileIdTrash FilesFileIdTrash
        {
            get { return new FilesFileIdTrash(proxy); }
        }
        public virtual Tasks Tasks
        {
            get { return new Tasks(proxy); }
        }
        public virtual ThumbnailExtension ThumbnailExtension
        {
            get { return new ThumbnailExtension(proxy); }
        }
        public virtual Comments Comments
        {
            get { return new Comments(proxy); }
        }
        public virtual Content Content
        {
            get { return new Content(proxy); }
        }

        /// <summary>
		/// Discards a file to the trash. The &apos;etag&apos; of the file can be included as an `If-Match` header to prevent race conditions. Trash: Depending on the enterprise settings for this user, the item will either be actually deleted from Box or moved to the trash. 
		/// </summary>
		/// <param name="fileId">Box&apos;s unique string identifying this file.</param>
        public virtual async Task<ApiResponse> Delete(string fileId)
        {

            var url = "files/{fileId}";
            url = url.Replace("{fileId}", fileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Discards a file to the trash. The &apos;etag&apos; of the file can be included as an `If-Match` header to prevent race conditions. Trash: Depending on the enterprise settings for this user, the item will either be actually deleted from Box or moved to the trash. 
		/// </summary>
		/// <param name="request">Models.FilesFileIdDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.FilesFileIdDeleteRequest request)
        {

            var url = "files/{fileId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

        /// <summary>
		/// Restores an item that has been moved to the trash. Default behavior is to restore the item to the folder it was in before it was moved to the trash. If that parent folder no longer exists or if there is now an item with the same name in that parent folder, the new parent folder and/or new name will need to be included in the request. 
		/// </summary>
		/// <param name="filesfileidpostrequestcontent"></param>
		/// <param name="fileId">Box&apos;s unique string identifying this file.</param>
        public virtual async Task<Models.FilesFileIdPostResponse> Post(Models.FilesFileIdPostRequestContent filesfileidpostrequestcontent, string fileId)
        {

            var url = "files/{fileId}";
            url = url.Replace("{fileId}", fileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.FilesFileIdPostRequestContent), filesfileidpostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync(Models.FilesFileIdPostResponse.GetSchema(response.StatusCode), response.Content);
				}
					
			}

            return new Models.FilesFileIdPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid(Models.FilesFileIdPostResponse.GetSchema(response.StatusCode), response.Content), true)
                                            };

        }

        /// <summary>
		/// Restores an item that has been moved to the trash. Default behavior is to restore the item to the folder it was in before it was moved to the trash. If that parent folder no longer exists or if there is now an item with the same name in that parent folder, the new parent folder and/or new name will need to be included in the request. 
		/// </summary>
		/// <param name="request">Models.FilesFileIdPostRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.FilesFileIdPostResponse> Post(Models.FilesFileIdPostRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "files/{fileId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.FilesFileIdPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync(Models.FilesFileIdPostResponse.GetSchema(response.StatusCode), response.Content);
				}
				
            }
            return new Models.FilesFileIdPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid(Models.FilesFileIdPostResponse.GetSchema(response.StatusCode), response.Content), true)
                                            };
        }

        /// <summary>
		/// Used to update individual or multiple fields in the file object, including renaming the file, changing its description, and creating a shared link for the file. To move a file, change the ID of its parent folder. An optional `If-Match` header can be included to ensure that client only updates the file if it knows about the latest version. 
		/// </summary>
		/// <param name="filesfileidputrequestcontent"></param>
		/// <param name="fileId">Box&apos;s unique string identifying this file.</param>
        public virtual async Task<Models.FilesFileIdPutResponse> Put(Models.FilesFileIdPutRequestContent filesfileidputrequestcontent, string fileId)
        {

            var url = "files/{fileId}";
            url = url.Replace("{fileId}", fileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.FilesFileIdPutRequestContent), filesfileidputrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.FilesFileIdPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to update individual or multiple fields in the file object, including renaming the file, changing its description, and creating a shared link for the file. To move a file, change the ID of its parent folder. An optional `If-Match` header can be included to ensure that client only updates the file if it knows about the latest version. 
		/// </summary>
		/// <param name="request">Models.FilesFileIdPutRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.FilesFileIdPutResponse> Put(Models.FilesFileIdPutRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "files/{fileId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.FilesFileIdPutRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.FilesFileIdPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Used to retrieve the metadata about a file.
		/// </summary>
		/// <param name="fileId">Box&apos;s unique string identifying this file.</param>
        public virtual async Task<Models.FilesFileIdGetResponse> Get(string fileId)
        {

            var url = "files/{fileId}";
            url = url.Replace("{fileId}", fileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.FilesFileIdGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to retrieve the metadata about a file.
		/// </summary>
		/// <param name="request">Models.FilesFileIdGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.FilesFileIdGetResponse> Get(Models.FilesFileIdGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "files/{fileId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FileId == null)
				throw new InvalidOperationException("Uri Parameter FileId cannot be null");

            url = url.Replace("{fileId}", request.UriParameters.FileId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.FilesFileIdGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class SharedItems
    {
        private readonly MoviesApi proxy;

        internal SharedItems(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Used to retrieve the metadata about a shared item when only given a shared link. Because of varying permission levels for shared links, a password may be required to retrieve the shared item. Once the item has been retrieved, you can make API requests against the actual resource `/files/{id}` or `/folders/{id}` as long as the shared link and optional password are in the header. A full file or folder object is returned if the shared link is valid and the user has access to it. An error may be returned if the link is invalid, if a password is required, or if the user does not have access to the file. 
		/// </summary>
        public virtual async Task<Models.SharedItemsGetResponse> Get()
        {

            var url = "shared_items";
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.SharedItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to retrieve the metadata about a shared item when only given a shared link. Because of varying permission levels for shared links, a password may be required to retrieve the shared item. Once the item has been retrieved, you can make API requests against the actual resource `/files/{id}` or `/folders/{id}` as long as the shared link and optional password are in the header. A full file or folder object is returned if the shared link is valid and the user has access to it. An error may be returned if the link is invalid, if a password is required, or if the user does not have access to the file. 
		/// </summary>
		/// <param name="request">Models.SharedItemsGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.SharedItemsGetResponse> Get(Models.SharedItemsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "shared_items";
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.SharedItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class CommentsA
    {
        private readonly MoviesApi proxy;

        internal CommentsA(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Used to add a comment by the user to a specific file or comment (i.e. as a reply comment). 
		/// </summary>
		/// <param name="commentspostrequestcontent"></param>
		/// <param name="postcommentsaquery">query properties</param>
        public virtual async Task<Models.CommentsAPostResponse> Post(Models.CommentsPostRequestContent commentspostrequestcontent, Models.PostCommentsAQuery postcommentsaquery)
        {

            var url = "comments";
            if(postcommentsaquery != null)
            {
                url += "?";
                if(postcommentsaquery.Fields != null)
					url += "&fields=" + postcommentsaquery.Fields;
            }
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.CommentsPostRequestContent), commentspostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync(Models.CommentsAPostResponse.GetSchema(response.StatusCode), response.Content);
				}
					
			}

            return new Models.CommentsAPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid(Models.CommentsAPostResponse.GetSchema(response.StatusCode), response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to add a comment by the user to a specific file or comment (i.e. as a reply comment). 
		/// </summary>
		/// <param name="request">Models.CommentsAPostRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.CommentsAPostResponse> Post(Models.CommentsAPostRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "comments";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.CommentsPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync(Models.CommentsAPostResponse.GetSchema(response.StatusCode), response.Content);
				}
				
            }
            return new Models.CommentsAPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid(Models.CommentsAPostResponse.GetSchema(response.StatusCode), response.Content), true)
                                            };
        }

        /// <summary>
		/// Permanently deletes a comment. An empty 204 response is returned to confirm deletion of the comment. Errors can be thrown if the ID is invalid or if the user is not authorized to delete this particular comment. 
		/// </summary>
		/// <param name="commentId">Box&apos;s unique string identifying this comment.</param>
        public virtual async Task<ApiResponse> Delete(string commentId)
        {

            var url = "comments/{commentId}";
            url = url.Replace("{commentId}", commentId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Permanently deletes a comment. An empty 204 response is returned to confirm deletion of the comment. Errors can be thrown if the ID is invalid or if the user is not authorized to delete this particular comment. 
		/// </summary>
		/// <param name="request">Models.CommentsADeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.CommentsADeleteRequest request)
        {

            var url = "comments/{commentId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.CommentId == null)
				throw new InvalidOperationException("Uri Parameter CommentId cannot be null");

            url = url.Replace("{commentId}", request.UriParameters.CommentId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

        /// <summary>
		/// Used to update the message of the comment. The full updated comment object is returned if the ID is valid and if the user has access to the comment. 
		/// </summary>
		/// <param name="commentidputrequestcontent"></param>
		/// <param name="commentId">Box&apos;s unique string identifying this comment.</param>
        public virtual async Task<Models.CommentsAPutResponse> Put(Models.CommentIdPutRequestContent commentidputrequestcontent, string commentId)
        {

            var url = "comments/{commentId}";
            url = url.Replace("{commentId}", commentId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.CommentIdPutRequestContent), commentidputrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"properties\": {    \"type\": {      \"description\": \"For comments is 'comment'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this comment.\",      \"type\": \"string\"    },    \"is_reply_comment\": {      \"description\": \"Whether or not this comment is a reply to another comment.\",      \"type\": \"boolean\"    },    \"message\": {      \"description\": \"The comment text that the user typed.\",      \"type\": \"string\"    },    \"tagged_message\": {      \"description\": \"The string representing the comment text with @mentions included.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"A mini user object representing the author of the comment.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was created.\"    },    \"item\": {      \"type\": \"object\",      \"description\": \"The object this comment was placed on.\",      \"properties\": {        \"id\": {          \"type\": \"string\"        },        \"type\": {          \"type\": \"string\"        }      }    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was last modified.\"    }  }}", response.Content);
				}
					
			}

            return new Models.CommentsAPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"properties\": {    \"type\": {      \"description\": \"For comments is 'comment'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this comment.\",      \"type\": \"string\"    },    \"is_reply_comment\": {      \"description\": \"Whether or not this comment is a reply to another comment.\",      \"type\": \"boolean\"    },    \"message\": {      \"description\": \"The comment text that the user typed.\",      \"type\": \"string\"    },    \"tagged_message\": {      \"description\": \"The string representing the comment text with @mentions included.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"A mini user object representing the author of the comment.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was created.\"    },    \"item\": {      \"type\": \"object\",      \"description\": \"The object this comment was placed on.\",      \"properties\": {        \"id\": {          \"type\": \"string\"        },        \"type\": {          \"type\": \"string\"        }      }    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was last modified.\"    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to update the message of the comment. The full updated comment object is returned if the ID is valid and if the user has access to the comment. 
		/// </summary>
		/// <param name="request">Models.CommentsAPutRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.CommentsAPutResponse> Put(Models.CommentsAPutRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "comments/{commentId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.CommentId == null)
				throw new InvalidOperationException("Uri Parameter CommentId cannot be null");

            url = url.Replace("{commentId}", request.UriParameters.CommentId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.CommentIdPutRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"properties\": {    \"type\": {      \"description\": \"For comments is 'comment'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this comment.\",      \"type\": \"string\"    },    \"is_reply_comment\": {      \"description\": \"Whether or not this comment is a reply to another comment.\",      \"type\": \"boolean\"    },    \"message\": {      \"description\": \"The comment text that the user typed.\",      \"type\": \"string\"    },    \"tagged_message\": {      \"description\": \"The string representing the comment text with @mentions included.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"A mini user object representing the author of the comment.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was created.\"    },    \"item\": {      \"type\": \"object\",      \"description\": \"The object this comment was placed on.\",      \"properties\": {        \"id\": {          \"type\": \"string\"        },        \"type\": {          \"type\": \"string\"        }      }    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was last modified.\"    }  }}", response.Content);
				}
				
            }
            return new Models.CommentsAPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"properties\": {    \"type\": {      \"description\": \"For comments is 'comment'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this comment.\",      \"type\": \"string\"    },    \"is_reply_comment\": {      \"description\": \"Whether or not this comment is a reply to another comment.\",      \"type\": \"boolean\"    },    \"message\": {      \"description\": \"The comment text that the user typed.\",      \"type\": \"string\"    },    \"tagged_message\": {      \"description\": \"The string representing the comment text with @mentions included.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"A mini user object representing the author of the comment.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was created.\"    },    \"item\": {      \"type\": \"object\",      \"description\": \"The object this comment was placed on.\",      \"properties\": {        \"id\": {          \"type\": \"string\"        },        \"type\": {          \"type\": \"string\"        }      }    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was last modified.\"    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Used to retrieve the message and metadata about a specific comment. Information about the user who created the comment is also included. 
		/// </summary>
		/// <param name="commentId">Box&apos;s unique string identifying this comment.</param>
        public virtual async Task<Models.CommentsAGetResponse> Get(string commentId)
        {

            var url = "comments/{commentId}";
            url = url.Replace("{commentId}", commentId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"properties\": {    \"type\": {      \"description\": \"For comments is 'comment'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this comment.\",      \"type\": \"string\"    },    \"is_reply_comment\": {      \"description\": \"Whether or not this comment is a reply to another comment.\",      \"type\": \"boolean\"    },    \"message\": {      \"description\": \"The comment text that the user typed.\",      \"type\": \"string\"    },    \"tagged_message\": {      \"description\": \"The string representing the comment text with @mentions included.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"A mini user object representing the author of the comment.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was created.\"    },    \"item\": {      \"type\": \"object\",      \"description\": \"The object this comment was placed on.\",      \"properties\": {        \"id\": {          \"type\": \"string\"        },        \"type\": {          \"type\": \"string\"        }      }    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was last modified.\"    }  }}", response.Content);
				}
					
			}

            return new Models.CommentsAGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"properties\": {    \"type\": {      \"description\": \"For comments is 'comment'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this comment.\",      \"type\": \"string\"    },    \"is_reply_comment\": {      \"description\": \"Whether or not this comment is a reply to another comment.\",      \"type\": \"boolean\"    },    \"message\": {      \"description\": \"The comment text that the user typed.\",      \"type\": \"string\"    },    \"tagged_message\": {      \"description\": \"The string representing the comment text with @mentions included.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"A mini user object representing the author of the comment.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was created.\"    },    \"item\": {      \"type\": \"object\",      \"description\": \"The object this comment was placed on.\",      \"properties\": {        \"id\": {          \"type\": \"string\"        },        \"type\": {          \"type\": \"string\"        }      }    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was last modified.\"    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to retrieve the message and metadata about a specific comment. Information about the user who created the comment is also included. 
		/// </summary>
		/// <param name="request">Models.CommentsAGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.CommentsAGetResponse> Get(Models.CommentsAGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "comments/{commentId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.CommentId == null)
				throw new InvalidOperationException("Uri Parameter CommentId cannot be null");

            url = url.Replace("{commentId}", request.UriParameters.CommentId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"properties\": {    \"type\": {      \"description\": \"For comments is 'comment'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this comment.\",      \"type\": \"string\"    },    \"is_reply_comment\": {      \"description\": \"Whether or not this comment is a reply to another comment.\",      \"type\": \"boolean\"    },    \"message\": {      \"description\": \"The comment text that the user typed.\",      \"type\": \"string\"    },    \"tagged_message\": {      \"description\": \"The string representing the comment text with @mentions included.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"A mini user object representing the author of the comment.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was created.\"    },    \"item\": {      \"type\": \"object\",      \"description\": \"The object this comment was placed on.\",      \"properties\": {        \"id\": {          \"type\": \"string\"        },        \"type\": {          \"type\": \"string\"        }      }    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was last modified.\"    }  }}", response.Content);
				}
				
            }
            return new Models.CommentsAGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"properties\": {    \"type\": {      \"description\": \"For comments is 'comment'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this comment.\",      \"type\": \"string\"    },    \"is_reply_comment\": {      \"description\": \"Whether or not this comment is a reply to another comment.\",      \"type\": \"boolean\"    },    \"message\": {      \"description\": \"The comment text that the user typed.\",      \"type\": \"string\"    },    \"tagged_message\": {      \"description\": \"The string representing the comment text with @mentions included.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"A mini user object representing the author of the comment.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was created.\"    },    \"item\": {      \"type\": \"object\",      \"description\": \"The object this comment was placed on.\",      \"properties\": {        \"id\": {          \"type\": \"string\"        },        \"type\": {          \"type\": \"string\"        }      }    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was last modified.\"    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class CollaborationsA
    {
        private readonly MoviesApi proxy;

        internal CollaborationsA(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Used to add a collaboration for a single user to a folder. Either an email address or a user ID can be used to create the collaboration. 
		/// </summary>
		/// <param name="collaborationspostrequestcontent"></param>
        public virtual async Task<Models.CollaborationsAPostResponse> Post(Models.CollaborationsPostRequestContent collaborationspostrequestcontent)
        {

            var url = "collaborations";
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.CollaborationsPostRequestContent), collaborationspostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.CollaborationsAPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to add a collaboration for a single user to a folder. Either an email address or a user ID can be used to create the collaboration. 
		/// </summary>
		/// <param name="request">Models.CollaborationsAPostRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.CollaborationsAPostResponse> Post(Models.CollaborationsAPostRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "collaborations";
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.CollaborationsPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.CollaborationsAPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Used to retrieve all pending collaboration invites for this user.
		/// </summary>
		/// <param name="getcollaborationsaquery">query properties</param>
        public virtual async Task<Models.CollaborationsAGetResponse> Get(Models.GetCollaborationsAQuery getcollaborationsaquery)
        {

            var url = "collaborations";
            if(getcollaborationsaquery != null)
            {
                url += "?";
                if(getcollaborationsaquery.Status != null)
					url += "&status=" + getcollaborationsaquery.Status;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"expires_at\": {            \"type\": \"string\"          },          \"status\": {            \"type\": \"string\"          },          \"accessible_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"role\": {            \"type\": \"string\"          },          \"acknowledged_at\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.CollaborationsAGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"expires_at\": {            \"type\": \"string\"          },          \"status\": {            \"type\": \"string\"          },          \"accessible_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"role\": {            \"type\": \"string\"          },          \"acknowledged_at\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to retrieve all pending collaboration invites for this user.
		/// </summary>
		/// <param name="request">Models.CollaborationsAGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.CollaborationsAGetResponse> Get(Models.CollaborationsAGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "collaborations";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Status != null)
                    url += "&status=" + request.Query.Status;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"expires_at\": {            \"type\": \"string\"          },          \"status\": {            \"type\": \"string\"          },          \"accessible_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"role\": {            \"type\": \"string\"          },          \"acknowledged_at\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.CollaborationsAGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"expires_at\": {            \"type\": \"string\"          },          \"status\": {            \"type\": \"string\"          },          \"accessible_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"role\": {            \"type\": \"string\"          },          \"acknowledged_at\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Used to delete a single collaboration.
		/// </summary>
		/// <param name="id"></param>
        public virtual async Task<ApiResponse> Delete(string id)
        {

            var url = "collaborations/{id}";
            url = url.Replace("{id}", id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Used to delete a single collaboration.
		/// </summary>
		/// <param name="request">Models.CollaborationsADeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.CollaborationsADeleteRequest request)
        {

            var url = "collaborations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

        /// <summary>
		/// Used to edit an existing collaboration. Descriptions of the various roles can be found here.
		/// </summary>
		/// <param name="idputrequestcontent"></param>
		/// <param name="id"></param>
        public virtual async Task<Models.CollaborationsAPutResponse> Put(Models.IdPutRequestContent idputrequestcontent, string id)
        {

            var url = "collaborations/{id}";
            url = url.Replace("{id}", id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.IdPutRequestContent), idputrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.CollaborationsAPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to edit an existing collaboration. Descriptions of the various roles can be found here.
		/// </summary>
		/// <param name="request">Models.CollaborationsAPutRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.CollaborationsAPutResponse> Put(Models.CollaborationsAPutRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "collaborations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.IdPutRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.CollaborationsAPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Search
    {
        private readonly MoviesApi proxy;

        internal Search(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Searching a User&apos;s Account. The search endpoint provides a simple way of finding items that are accessible in a given user&apos;s Box account. A collection of search results is returned. If there are no matching search results, the entries array will be empty. ALERT: We&apos;ll be adding more types of items returned as search results and more filters on search queries, so as you&apos;re parsing the results, be prepared to skip over any types of items your app does not recognize. 
		/// </summary>
		/// <param name="getsearchquery">query properties</param>
        public virtual async Task<Models.SearchGetResponse> Get(Models.GetSearchQuery getsearchquery)
        {

            var url = "search";
            if(getsearchquery != null)
            {
                url += "?";
                if(getsearchquery.Limit != null)
					url += "&limit=" + getsearchquery.Limit;
                if(getsearchquery.Offset != null)
					url += "&offset=" + getsearchquery.Offset;
                if(getsearchquery.Query != null)
					url += "&query=" + getsearchquery.Query;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" : [        {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sequence_id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"etag\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sha1\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"name\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"description\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"size\" : {              \"type\" : \"number\" ,              \"required\" : false            } ,            \"path_collection\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"total_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"entries\" : {                  \"type\" : \"array\" ,                  \"required\" : false ,                  \"items\" : [                    {                      \"type\" : \"object\" ,                      \"properties\" : {                        \"type\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"sequence_id\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"etag\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"name\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        }                      }                    }                  ]                }              }            } ,            \"created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"trashed_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"purged_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"content_created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"content_modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"created_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"modified_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"owned_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"shared_link\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"parent\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"sequence_id\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"etag\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"item_status\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        } , {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sequence_id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"etag\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sha1\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"name\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"description\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"size\" : {              \"type\" : \"number\" ,              \"required\" : false            } ,            \"path_collection\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"total_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"entries\" : {                  \"type\" : \"array\" ,                  \"required\" : false ,                  \"items\" : [                    {                      \"type\" : \"object\" ,                      \"properties\" : {                        \"type\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"sequence_id\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"etag\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"name\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        }                      }                    } , {                      \"type\" : \"object\" ,                      \"properties\" : {                        \"type\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"sequence_id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"etag\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"name\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        }                      }                    }                  ]                }              }            } ,            \"created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"trashed_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"purged_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"content_created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"content_modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"created_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"modified_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"owned_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"shared_link\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"url\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"download_url\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"vanity_url\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"effective_access\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"is_password_enabled\" : {                  \"type\" : \"boolean\" ,                  \"required\" : false                } ,                \"unshared_at\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"download_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"preview_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"access\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"permissions\" : {                  \"type\" : \"object\" ,                  \"required\" : false ,                  \"properties\" : {                    \"can_download\" : {                      \"type\" : \"boolean\" ,                      \"required\" : false                    } ,                    \"can_preview\" : {                      \"type\" : \"boolean\" ,                      \"required\" : false                    }                  }                }              }            } ,            \"parent\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"sequence_id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"etag\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"item_status\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }      ]    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content);
				}
					
			}

            return new Models.SearchGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" : [        {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sequence_id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"etag\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sha1\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"name\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"description\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"size\" : {              \"type\" : \"number\" ,              \"required\" : false            } ,            \"path_collection\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"total_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"entries\" : {                  \"type\" : \"array\" ,                  \"required\" : false ,                  \"items\" : [                    {                      \"type\" : \"object\" ,                      \"properties\" : {                        \"type\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"sequence_id\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"etag\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"name\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        }                      }                    }                  ]                }              }            } ,            \"created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"trashed_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"purged_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"content_created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"content_modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"created_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"modified_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"owned_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"shared_link\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"parent\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"sequence_id\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"etag\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"item_status\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        } , {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sequence_id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"etag\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sha1\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"name\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"description\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"size\" : {              \"type\" : \"number\" ,              \"required\" : false            } ,            \"path_collection\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"total_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"entries\" : {                  \"type\" : \"array\" ,                  \"required\" : false ,                  \"items\" : [                    {                      \"type\" : \"object\" ,                      \"properties\" : {                        \"type\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"sequence_id\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"etag\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"name\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        }                      }                    } , {                      \"type\" : \"object\" ,                      \"properties\" : {                        \"type\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"sequence_id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"etag\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"name\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        }                      }                    }                  ]                }              }            } ,            \"created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"trashed_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"purged_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"content_created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"content_modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"created_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"modified_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"owned_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"shared_link\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"url\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"download_url\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"vanity_url\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"effective_access\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"is_password_enabled\" : {                  \"type\" : \"boolean\" ,                  \"required\" : false                } ,                \"unshared_at\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"download_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"preview_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"access\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"permissions\" : {                  \"type\" : \"object\" ,                  \"required\" : false ,                  \"properties\" : {                    \"can_download\" : {                      \"type\" : \"boolean\" ,                      \"required\" : false                    } ,                    \"can_preview\" : {                      \"type\" : \"boolean\" ,                      \"required\" : false                    }                  }                }              }            } ,            \"parent\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"sequence_id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"etag\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"item_status\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }      ]    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Searching a User&apos;s Account. The search endpoint provides a simple way of finding items that are accessible in a given user&apos;s Box account. A collection of search results is returned. If there are no matching search results, the entries array will be empty. ALERT: We&apos;ll be adding more types of items returned as search results and more filters on search queries, so as you&apos;re parsing the results, be prepared to skip over any types of items your app does not recognize. 
		/// </summary>
		/// <param name="request">Models.SearchGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.SearchGetResponse> Get(Models.SearchGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "search";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Limit != null)
                    url += "&limit=" + request.Query.Limit;
                if(request.Query.Offset != null)
                    url += "&offset=" + request.Query.Offset;
                if(request.Query.Query != null)
                    url += "&query=" + request.Query.Query;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" : [        {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sequence_id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"etag\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sha1\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"name\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"description\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"size\" : {              \"type\" : \"number\" ,              \"required\" : false            } ,            \"path_collection\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"total_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"entries\" : {                  \"type\" : \"array\" ,                  \"required\" : false ,                  \"items\" : [                    {                      \"type\" : \"object\" ,                      \"properties\" : {                        \"type\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"sequence_id\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"etag\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"name\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        }                      }                    }                  ]                }              }            } ,            \"created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"trashed_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"purged_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"content_created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"content_modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"created_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"modified_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"owned_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"shared_link\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"parent\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"sequence_id\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"etag\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"item_status\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        } , {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sequence_id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"etag\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sha1\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"name\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"description\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"size\" : {              \"type\" : \"number\" ,              \"required\" : false            } ,            \"path_collection\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"total_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"entries\" : {                  \"type\" : \"array\" ,                  \"required\" : false ,                  \"items\" : [                    {                      \"type\" : \"object\" ,                      \"properties\" : {                        \"type\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"sequence_id\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"etag\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"name\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        }                      }                    } , {                      \"type\" : \"object\" ,                      \"properties\" : {                        \"type\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"sequence_id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"etag\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"name\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        }                      }                    }                  ]                }              }            } ,            \"created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"trashed_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"purged_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"content_created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"content_modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"created_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"modified_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"owned_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"shared_link\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"url\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"download_url\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"vanity_url\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"effective_access\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"is_password_enabled\" : {                  \"type\" : \"boolean\" ,                  \"required\" : false                } ,                \"unshared_at\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"download_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"preview_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"access\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"permissions\" : {                  \"type\" : \"object\" ,                  \"required\" : false ,                  \"properties\" : {                    \"can_download\" : {                      \"type\" : \"boolean\" ,                      \"required\" : false                    } ,                    \"can_preview\" : {                      \"type\" : \"boolean\" ,                      \"required\" : false                    }                  }                }              }            } ,            \"parent\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"sequence_id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"etag\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"item_status\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }      ]    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content);
				}
				
            }
            return new Models.SearchGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" : [        {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sequence_id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"etag\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sha1\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"name\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"description\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"size\" : {              \"type\" : \"number\" ,              \"required\" : false            } ,            \"path_collection\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"total_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"entries\" : {                  \"type\" : \"array\" ,                  \"required\" : false ,                  \"items\" : [                    {                      \"type\" : \"object\" ,                      \"properties\" : {                        \"type\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"sequence_id\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"etag\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"name\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        }                      }                    }                  ]                }              }            } ,            \"created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"trashed_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"purged_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"content_created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"content_modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"created_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"modified_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"owned_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"shared_link\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"parent\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"sequence_id\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"etag\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"item_status\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        } , {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sequence_id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"etag\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"sha1\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"name\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"description\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"size\" : {              \"type\" : \"number\" ,              \"required\" : false            } ,            \"path_collection\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"total_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"entries\" : {                  \"type\" : \"array\" ,                  \"required\" : false ,                  \"items\" : [                    {                      \"type\" : \"object\" ,                      \"properties\" : {                        \"type\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"sequence_id\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"etag\" : {                          \"type\" : \"object\" ,                          \"required\" : false                        } ,                        \"name\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        }                      }                    } , {                      \"type\" : \"object\" ,                      \"properties\" : {                        \"type\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"sequence_id\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"etag\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        } ,                        \"name\" : {                          \"type\" : \"string\" ,                          \"required\" : false                        }                      }                    }                  ]                }              }            } ,            \"created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"trashed_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"purged_at\" : {              \"type\" : \"object\" ,              \"required\" : false            } ,            \"content_created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"content_modified_at\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"created_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"modified_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"owned_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"shared_link\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"url\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"download_url\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"vanity_url\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"effective_access\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"is_password_enabled\" : {                  \"type\" : \"boolean\" ,                  \"required\" : false                } ,                \"unshared_at\" : {                  \"type\" : \"object\" ,                  \"required\" : false                } ,                \"download_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"preview_count\" : {                  \"type\" : \"number\" ,                  \"required\" : false                } ,                \"access\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"permissions\" : {                  \"type\" : \"object\" ,                  \"required\" : false ,                  \"properties\" : {                    \"can_download\" : {                      \"type\" : \"boolean\" ,                      \"required\" : false                    } ,                    \"can_preview\" : {                      \"type\" : \"boolean\" ,                      \"required\" : false                    }                  }                }              }            } ,            \"parent\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"sequence_id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"etag\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"item_status\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }      ]    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Events
    {
        private readonly MoviesApi proxy;

        internal Events(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Use this to get events for a given user. A chunk of event objects is returned for the user based on the parameters passed in. Parameters indicating how many chunks are left as well as the next stream_position are also returned. 
		/// </summary>
		/// <param name="geteventsquery">query properties</param>
        public virtual async Task<Models.EventsGetResponse> Get(Models.GetEventsQuery geteventsquery)
        {

            var url = "events";
            if(geteventsquery != null)
            {
                url += "?";
                if(geteventsquery.Stream_position != null)
					url += "&stream_position=" + geteventsquery.Stream_position;
                if(geteventsquery.Stream_type != null)
					url += "&stream_type=" + geteventsquery.Stream_type;
                if(geteventsquery.Limit != null)
					url += "&limit=" + geteventsquery.Limit;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"chunk_size\": {      \"type\": \"integer\"    },    \"next_stream_position\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"event_id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"recorded_at\": {            \"type\": \"string\"          },          \"event_type\": {            \"enum\": [              \"ITEM_CREATE\",              \"ITEM_UPLOAD\",              \"COMMENT_CREATE\",              \"ITEM_DOWNLOAD\",              \"ITEM_PREVIEW\",              \"ITEM_MOVE\",              \"ITEM_COPY\",              \"TASK_ASSIGNMENT_CREATE\",              \"LOCK_CREATE\",              \"LOCK_DESTROY\",              \"ITEM_TRASH\",              \"ITEM_UNDELETE_VIA_TRASH\",              \"COLLAB_ADD_COLLABORATOR\",              \"COLLAB_INVITE_COLLABORATOR\",              \"ITEM_SYNC\",              \"ITEM_UNSYNC\",              \"ITEM_RENAME\",              \"ITEM_SHARED_CREATE\",              \"ITEM_SHARED_UNSHARE\",              \"ITEM_SHARED\",              \"TAG_ITEM_CREATE\",              \"ADD_LOGIN_ACTIVITY_DEVICE\",              \"REMOVE_LOGIN_ACTIVITY_DEVICE\",              \"CHANGE_ADMIN_ROLE\"            ]          },          \"session_id\": {            \"type\": \"string\"          },          \"source\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"created_at\": {                \"type\": \"string\"              },              \"modified_at\": {                \"type\": \"string\"              },              \"description\": {                \"type\": \"string\"              },              \"size\": {                \"type\": \"integer\"              },              \"created_by\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  },                  \"login\": {                    \"type\": \"string\"                  }                }              },              \"modified_by\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  },                  \"login\": {                    \"type\": \"string\"                  }                }              },              \"owned_by\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  },                  \"login\": {                    \"type\": \"string\"                  }                }              },              \"shared_link\": {                \"type\": \"string\"              },              \"parent\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"sequence_id\": {                    \"type\": \"string\"                  },                  \"etag\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  }                }              },              \"item_status\": {                \"type\": \"string\"              },              \"synced\": {                \"type\": \"boolean\"              }            }          }        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.EventsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"chunk_size\": {      \"type\": \"integer\"    },    \"next_stream_position\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"event_id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"recorded_at\": {            \"type\": \"string\"          },          \"event_type\": {            \"enum\": [              \"ITEM_CREATE\",              \"ITEM_UPLOAD\",              \"COMMENT_CREATE\",              \"ITEM_DOWNLOAD\",              \"ITEM_PREVIEW\",              \"ITEM_MOVE\",              \"ITEM_COPY\",              \"TASK_ASSIGNMENT_CREATE\",              \"LOCK_CREATE\",              \"LOCK_DESTROY\",              \"ITEM_TRASH\",              \"ITEM_UNDELETE_VIA_TRASH\",              \"COLLAB_ADD_COLLABORATOR\",              \"COLLAB_INVITE_COLLABORATOR\",              \"ITEM_SYNC\",              \"ITEM_UNSYNC\",              \"ITEM_RENAME\",              \"ITEM_SHARED_CREATE\",              \"ITEM_SHARED_UNSHARE\",              \"ITEM_SHARED\",              \"TAG_ITEM_CREATE\",              \"ADD_LOGIN_ACTIVITY_DEVICE\",              \"REMOVE_LOGIN_ACTIVITY_DEVICE\",              \"CHANGE_ADMIN_ROLE\"            ]          },          \"session_id\": {            \"type\": \"string\"          },          \"source\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"created_at\": {                \"type\": \"string\"              },              \"modified_at\": {                \"type\": \"string\"              },              \"description\": {                \"type\": \"string\"              },              \"size\": {                \"type\": \"integer\"              },              \"created_by\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  },                  \"login\": {                    \"type\": \"string\"                  }                }              },              \"modified_by\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  },                  \"login\": {                    \"type\": \"string\"                  }                }              },              \"owned_by\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  },                  \"login\": {                    \"type\": \"string\"                  }                }              },              \"shared_link\": {                \"type\": \"string\"              },              \"parent\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"sequence_id\": {                    \"type\": \"string\"                  },                  \"etag\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  }                }              },              \"item_status\": {                \"type\": \"string\"              },              \"synced\": {                \"type\": \"boolean\"              }            }          }        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Use this to get events for a given user. A chunk of event objects is returned for the user based on the parameters passed in. Parameters indicating how many chunks are left as well as the next stream_position are also returned. 
		/// </summary>
		/// <param name="request">Models.EventsGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.EventsGetResponse> Get(Models.EventsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "events";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Stream_position != null)
                    url += "&stream_position=" + request.Query.Stream_position;
                if(request.Query.Stream_type != null)
                    url += "&stream_type=" + request.Query.Stream_type;
                if(request.Query.Limit != null)
                    url += "&limit=" + request.Query.Limit;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"chunk_size\": {      \"type\": \"integer\"    },    \"next_stream_position\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"event_id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"recorded_at\": {            \"type\": \"string\"          },          \"event_type\": {            \"enum\": [              \"ITEM_CREATE\",              \"ITEM_UPLOAD\",              \"COMMENT_CREATE\",              \"ITEM_DOWNLOAD\",              \"ITEM_PREVIEW\",              \"ITEM_MOVE\",              \"ITEM_COPY\",              \"TASK_ASSIGNMENT_CREATE\",              \"LOCK_CREATE\",              \"LOCK_DESTROY\",              \"ITEM_TRASH\",              \"ITEM_UNDELETE_VIA_TRASH\",              \"COLLAB_ADD_COLLABORATOR\",              \"COLLAB_INVITE_COLLABORATOR\",              \"ITEM_SYNC\",              \"ITEM_UNSYNC\",              \"ITEM_RENAME\",              \"ITEM_SHARED_CREATE\",              \"ITEM_SHARED_UNSHARE\",              \"ITEM_SHARED\",              \"TAG_ITEM_CREATE\",              \"ADD_LOGIN_ACTIVITY_DEVICE\",              \"REMOVE_LOGIN_ACTIVITY_DEVICE\",              \"CHANGE_ADMIN_ROLE\"            ]          },          \"session_id\": {            \"type\": \"string\"          },          \"source\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"created_at\": {                \"type\": \"string\"              },              \"modified_at\": {                \"type\": \"string\"              },              \"description\": {                \"type\": \"string\"              },              \"size\": {                \"type\": \"integer\"              },              \"created_by\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  },                  \"login\": {                    \"type\": \"string\"                  }                }              },              \"modified_by\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  },                  \"login\": {                    \"type\": \"string\"                  }                }              },              \"owned_by\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  },                  \"login\": {                    \"type\": \"string\"                  }                }              },              \"shared_link\": {                \"type\": \"string\"              },              \"parent\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"sequence_id\": {                    \"type\": \"string\"                  },                  \"etag\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  }                }              },              \"item_status\": {                \"type\": \"string\"              },              \"synced\": {                \"type\": \"boolean\"              }            }          }        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.EventsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"chunk_size\": {      \"type\": \"integer\"    },    \"next_stream_position\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"event_id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"recorded_at\": {            \"type\": \"string\"          },          \"event_type\": {            \"enum\": [              \"ITEM_CREATE\",              \"ITEM_UPLOAD\",              \"COMMENT_CREATE\",              \"ITEM_DOWNLOAD\",              \"ITEM_PREVIEW\",              \"ITEM_MOVE\",              \"ITEM_COPY\",              \"TASK_ASSIGNMENT_CREATE\",              \"LOCK_CREATE\",              \"LOCK_DESTROY\",              \"ITEM_TRASH\",              \"ITEM_UNDELETE_VIA_TRASH\",              \"COLLAB_ADD_COLLABORATOR\",              \"COLLAB_INVITE_COLLABORATOR\",              \"ITEM_SYNC\",              \"ITEM_UNSYNC\",              \"ITEM_RENAME\",              \"ITEM_SHARED_CREATE\",              \"ITEM_SHARED_UNSHARE\",              \"ITEM_SHARED\",              \"TAG_ITEM_CREATE\",              \"ADD_LOGIN_ACTIVITY_DEVICE\",              \"REMOVE_LOGIN_ACTIVITY_DEVICE\",              \"CHANGE_ADMIN_ROLE\"            ]          },          \"session_id\": {            \"type\": \"string\"          },          \"source\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"created_at\": {                \"type\": \"string\"              },              \"modified_at\": {                \"type\": \"string\"              },              \"description\": {                \"type\": \"string\"              },              \"size\": {                \"type\": \"integer\"              },              \"created_by\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  },                  \"login\": {                    \"type\": \"string\"                  }                }              },              \"modified_by\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  },                  \"login\": {                    \"type\": \"string\"                  }                }              },              \"owned_by\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  },                  \"login\": {                    \"type\": \"string\"                  }                }              },              \"shared_link\": {                \"type\": \"string\"              },              \"parent\": {                \"type\": \"object\",                \"properties\": {                  \"type\": {                    \"type\": \"string\"                  },                  \"id\": {                    \"type\": \"string\"                  },                  \"sequence_id\": {                    \"type\": \"string\"                  },                  \"etag\": {                    \"type\": \"string\"                  },                  \"name\": {                    \"type\": \"string\"                  }                }              },              \"item_status\": {                \"type\": \"string\"              },              \"synced\": {                \"type\": \"boolean\"              }            }          }        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Me
    {
        private readonly MoviesApi proxy;

        internal Me(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Get the Current User&apos;s Information. Retrieves information about the user who is currently logged in i.e. the user for whom this auth token was generated. Returns a single complete user object. An error is returned if a valid auth token is not included in the API request. 
		/// </summary>
        public virtual async Task<Models.MeGetResponse> Get()
        {

            var url = "users/me";
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For users is 'user'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this user.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this user.\",      \"type\": \"string\"    },    \"login\": {      \"description\": \"The email address this user uses to login.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this user was created.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this user was last modified.\"    },    \"role\": {      \"description\": \"This user's enterprise role.\",      \"enum\": [        \"admin\",        \"coadmin\",        \"user\"      ]    },    \"language\": {      \"description\": \"The language of this user. ISO 639-1 Language Code.\",      \"type\": \"string\",      \"maxLength\": 2    },    \"space_amount\": {      \"description\": \"The user's total available space amount in bytes.\",      \"type\": \"integer\"    },    \"space_used\": {      \"description\": \"The amount of space in use by the user.\",      \"type\": \"integer\"    },    \"max_upload_size\": {      \"description\": \"The maximum individual file size in bytes this user can have.\",      \"type\": \"integer\"    },    \"tracking_codes\": {      \"type\": \"array\",      \"description\": \"An array of key/value pairs set by the user's admin.\"    },    \"can_see_managed_users\": {      \"description\": \"Whether this user can see other enterprise users in its contact list.\",      \"type\": \"boolean\"    },    \"is_sync_enabled\": {      \"description\": \"Whether or not this user can use Box Sync\",      \"type\": \"boolean\"    },    \"status\": {      \"description\": \"Can be active or inactive.\",      \"enum\": [        \"active\",        \"inactive\"      ]    },    \"job_title\": {      \"description\": \"The user's job title.\",      \"type\": \"string\"    },    \"phone\": {      \"description\": \"The user's phone number.\",      \"type\": \"string\"    },    \"address\": {      \"description\": \"The user's address.\",      \"type\": \"string\"    },    \"avatar_url\": {      \"description\": \"URL of this user's avatar image.\",      \"type\": \"string\"    },    \"is_exempt_from_device_limits\": {      \"description\": \"Whether to exempt this user from Enterprise device limits.\",      \"type\": \"boolean\"    },    \"is_exempt_from_login_verification\": {      \"description\": \"Whether or not this user must use two-factor authentication.\",      \"type\": \"boolean\"    },    \"enterprise\": {      \"type\": \"object\",      \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.MeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For users is 'user'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this user.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this user.\",      \"type\": \"string\"    },    \"login\": {      \"description\": \"The email address this user uses to login.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this user was created.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this user was last modified.\"    },    \"role\": {      \"description\": \"This user's enterprise role.\",      \"enum\": [        \"admin\",        \"coadmin\",        \"user\"      ]    },    \"language\": {      \"description\": \"The language of this user. ISO 639-1 Language Code.\",      \"type\": \"string\",      \"maxLength\": 2    },    \"space_amount\": {      \"description\": \"The user's total available space amount in bytes.\",      \"type\": \"integer\"    },    \"space_used\": {      \"description\": \"The amount of space in use by the user.\",      \"type\": \"integer\"    },    \"max_upload_size\": {      \"description\": \"The maximum individual file size in bytes this user can have.\",      \"type\": \"integer\"    },    \"tracking_codes\": {      \"type\": \"array\",      \"description\": \"An array of key/value pairs set by the user's admin.\"    },    \"can_see_managed_users\": {      \"description\": \"Whether this user can see other enterprise users in its contact list.\",      \"type\": \"boolean\"    },    \"is_sync_enabled\": {      \"description\": \"Whether or not this user can use Box Sync\",      \"type\": \"boolean\"    },    \"status\": {      \"description\": \"Can be active or inactive.\",      \"enum\": [        \"active\",        \"inactive\"      ]    },    \"job_title\": {      \"description\": \"The user's job title.\",      \"type\": \"string\"    },    \"phone\": {      \"description\": \"The user's phone number.\",      \"type\": \"string\"    },    \"address\": {      \"description\": \"The user's address.\",      \"type\": \"string\"    },    \"avatar_url\": {      \"description\": \"URL of this user's avatar image.\",      \"type\": \"string\"    },    \"is_exempt_from_device_limits\": {      \"description\": \"Whether to exempt this user from Enterprise device limits.\",      \"type\": \"boolean\"    },    \"is_exempt_from_login_verification\": {      \"description\": \"Whether or not this user must use two-factor authentication.\",      \"type\": \"boolean\"    },    \"enterprise\": {      \"type\": \"object\",      \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Get the Current User&apos;s Information. Retrieves information about the user who is currently logged in i.e. the user for whom this auth token was generated. Returns a single complete user object. An error is returned if a valid auth token is not included in the API request. 
		/// </summary>
		/// <param name="request">ApiRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.MeGetResponse> Get(ApiRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "users/me";
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For users is 'user'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this user.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this user.\",      \"type\": \"string\"    },    \"login\": {      \"description\": \"The email address this user uses to login.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this user was created.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this user was last modified.\"    },    \"role\": {      \"description\": \"This user's enterprise role.\",      \"enum\": [        \"admin\",        \"coadmin\",        \"user\"      ]    },    \"language\": {      \"description\": \"The language of this user. ISO 639-1 Language Code.\",      \"type\": \"string\",      \"maxLength\": 2    },    \"space_amount\": {      \"description\": \"The user's total available space amount in bytes.\",      \"type\": \"integer\"    },    \"space_used\": {      \"description\": \"The amount of space in use by the user.\",      \"type\": \"integer\"    },    \"max_upload_size\": {      \"description\": \"The maximum individual file size in bytes this user can have.\",      \"type\": \"integer\"    },    \"tracking_codes\": {      \"type\": \"array\",      \"description\": \"An array of key/value pairs set by the user's admin.\"    },    \"can_see_managed_users\": {      \"description\": \"Whether this user can see other enterprise users in its contact list.\",      \"type\": \"boolean\"    },    \"is_sync_enabled\": {      \"description\": \"Whether or not this user can use Box Sync\",      \"type\": \"boolean\"    },    \"status\": {      \"description\": \"Can be active or inactive.\",      \"enum\": [        \"active\",        \"inactive\"      ]    },    \"job_title\": {      \"description\": \"The user's job title.\",      \"type\": \"string\"    },    \"phone\": {      \"description\": \"The user's phone number.\",      \"type\": \"string\"    },    \"address\": {      \"description\": \"The user's address.\",      \"type\": \"string\"    },    \"avatar_url\": {      \"description\": \"URL of this user's avatar image.\",      \"type\": \"string\"    },    \"is_exempt_from_device_limits\": {      \"description\": \"Whether to exempt this user from Enterprise device limits.\",      \"type\": \"boolean\"    },    \"is_exempt_from_login_verification\": {      \"description\": \"Whether or not this user must use two-factor authentication.\",      \"type\": \"boolean\"    },    \"enterprise\": {      \"type\": \"object\",      \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.MeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For users is 'user'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this user.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this user.\",      \"type\": \"string\"    },    \"login\": {      \"description\": \"The email address this user uses to login.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this user was created.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this user was last modified.\"    },    \"role\": {      \"description\": \"This user's enterprise role.\",      \"enum\": [        \"admin\",        \"coadmin\",        \"user\"      ]    },    \"language\": {      \"description\": \"The language of this user. ISO 639-1 Language Code.\",      \"type\": \"string\",      \"maxLength\": 2    },    \"space_amount\": {      \"description\": \"The user's total available space amount in bytes.\",      \"type\": \"integer\"    },    \"space_used\": {      \"description\": \"The amount of space in use by the user.\",      \"type\": \"integer\"    },    \"max_upload_size\": {      \"description\": \"The maximum individual file size in bytes this user can have.\",      \"type\": \"integer\"    },    \"tracking_codes\": {      \"type\": \"array\",      \"description\": \"An array of key/value pairs set by the user's admin.\"    },    \"can_see_managed_users\": {      \"description\": \"Whether this user can see other enterprise users in its contact list.\",      \"type\": \"boolean\"    },    \"is_sync_enabled\": {      \"description\": \"Whether or not this user can use Box Sync\",      \"type\": \"boolean\"    },    \"status\": {      \"description\": \"Can be active or inactive.\",      \"enum\": [        \"active\",        \"inactive\"      ]    },    \"job_title\": {      \"description\": \"The user's job title.\",      \"type\": \"string\"    },    \"phone\": {      \"description\": \"The user's phone number.\",      \"type\": \"string\"    },    \"address\": {      \"description\": \"The user's address.\",      \"type\": \"string\"    },    \"avatar_url\": {      \"description\": \"URL of this user's avatar image.\",      \"type\": \"string\"    },    \"is_exempt_from_device_limits\": {      \"description\": \"Whether to exempt this user from Enterprise device limits.\",      \"type\": \"boolean\"    },    \"is_exempt_from_login_verification\": {      \"description\": \"Whether or not this user must use two-factor authentication.\",      \"type\": \"boolean\"    },    \"enterprise\": {      \"type\": \"object\",      \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class EmailAliases
    {
        private readonly MoviesApi proxy;

        internal EmailAliases(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Add an Email Alias for a User. Adds a new email alias to the given user&apos;s account. Returns the newly created email_alias object. Errors will be thrown if the user_id is not valid or the particular user&apos;s email alias cannot be modified. 
		/// </summary>
		/// <param name="emailaliasespostrequestcontent"></param>
		/// <param name="userId"></param>
        public virtual async Task<Models.EmailAliasesPostResponse> Post(Models.EmailAliasesPostRequestContent emailaliasespostrequestcontent, string userId)
        {

            var url = "users/{userId}/email_aliases";
            url = url.Replace("{userId}", userId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.EmailAliasesPostRequestContent), emailaliasespostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"is_confirmed\": {			\"type\": \"boolean\"		},		\"email\": {			\"type\": \"string\"		}	}}", response.Content);
				}
					
			}

            return new Models.EmailAliasesPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"is_confirmed\": {			\"type\": \"boolean\"		},		\"email\": {			\"type\": \"string\"		}	}}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Add an Email Alias for a User. Adds a new email alias to the given user&apos;s account. Returns the newly created email_alias object. Errors will be thrown if the user_id is not valid or the particular user&apos;s email alias cannot be modified. 
		/// </summary>
		/// <param name="request">Models.EmailAliasesPostRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.EmailAliasesPostResponse> Post(Models.EmailAliasesPostRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "users/{userId}/email_aliases";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.UserId == null)
				throw new InvalidOperationException("Uri Parameter UserId cannot be null");

            url = url.Replace("{userId}", request.UriParameters.UserId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.EmailAliasesPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"is_confirmed\": {			\"type\": \"boolean\"		},		\"email\": {			\"type\": \"string\"		}	}}", response.Content);
				}
				
            }
            return new Models.EmailAliasesPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"is_confirmed\": {			\"type\": \"boolean\"		},		\"email\": {			\"type\": \"string\"		}	}}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Get All Email Aliases for a User. Retrieves all email aliases for this user. The collection of email aliases does not include the primary login for the user; use GET /users/USER_ID to retrieve the login email address. If the user_id is valid a collection of email aliases will be returned. 
		/// </summary>
		/// <param name="userId"></param>
        public virtual async Task<Models.EmailAliasesGetResponse> Get(string userId)
        {

            var url = "users/{userId}/email_aliases";
            url = url.Replace("{userId}", userId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"is_confirmed\": {            \"type\": \"boolean\"          },          \"email\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.EmailAliasesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"is_confirmed\": {            \"type\": \"boolean\"          },          \"email\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Get All Email Aliases for a User. Retrieves all email aliases for this user. The collection of email aliases does not include the primary login for the user; use GET /users/USER_ID to retrieve the login email address. If the user_id is valid a collection of email aliases will be returned. 
		/// </summary>
		/// <param name="request">Models.EmailAliasesGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.EmailAliasesGetResponse> Get(Models.EmailAliasesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "users/{userId}/email_aliases";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.UserId == null)
				throw new InvalidOperationException("Uri Parameter UserId cannot be null");

            url = url.Replace("{userId}", request.UriParameters.UserId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"is_confirmed\": {            \"type\": \"boolean\"          },          \"email\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.EmailAliasesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"is_confirmed\": {            \"type\": \"boolean\"          },          \"email\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Removes an email alias from a user. If the user has permission to remove this email alias, an empty 204 No Content response will be returned to  confirm deletion. 
		/// </summary>
		/// <param name="email_aliases_id"></param>
		/// <param name="userId"></param>
        public virtual async Task<ApiResponse> Delete(string email_aliases_id, string userId)
        {

            var url = "users/{userId}/email_aliases/{email_aliases_id}";
            url = url.Replace("{email_aliases_id}", email_aliases_id.ToString());
            url = url.Replace("{userId}", userId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Removes an email alias from a user. If the user has permission to remove this email alias, an empty 204 No Content response will be returned to  confirm deletion. 
		/// </summary>
		/// <param name="request">Models.EmailAliasesDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.EmailAliasesDeleteRequest request)
        {

            var url = "users/{userId}/email_aliases/{email_aliases_id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Email_aliases_id == null)
				throw new InvalidOperationException("Uri Parameter Email_aliases_id cannot be null");

            url = url.Replace("{email_aliases_id}", request.UriParameters.Email_aliases_id.ToString());

			if(request.UriParameters.UserId == null)
				throw new InvalidOperationException("Uri Parameter UserId cannot be null");

            url = url.Replace("{userId}", request.UriParameters.UserId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class FoldersFolderId
    {
        private readonly MoviesApi proxy;

        internal FoldersFolderId(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Move Folder into Another User&apos;s Folder. Moves all of the content from within one user&apos;s folder into a new folder in another user&apos;s account. You can move folders across users as long as the you have administrative permissions. To move everything from the root folder, use &quot;0&quot; which always represents the root folder of a Box account. 
		/// </summary>
		/// <param name="foldersfolderidputrequestcontent"></param>
		/// <param name="folderId">Folder&apos;s identifier</param>
		/// <param name="userId"></param>
		/// <param name="putfoldersfolderidquery">query properties</param>
        public virtual async Task<Models.FoldersFolderIdPutResponse> Put(Models.FoldersFolderIdPutRequestContent foldersfolderidputrequestcontent, string folderId, string userId, Models.PutFoldersFolderIdQuery putfoldersfolderidquery)
        {

            var url = "users/{userId}/folders/{folderId}";
            url = url.Replace("{folderId}", folderId.ToString());
            url = url.Replace("{userId}", userId.ToString());
            if(putfoldersfolderidquery != null)
            {
                url += "?";
                if(putfoldersfolderidquery.Notify != null)
					url += "&notify=" + putfoldersfolderidquery.Notify;
            }
            var req = new HttpRequestMessage(HttpMethod.Put, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.FoldersFolderIdPutRequestContent), foldersfolderidputrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.FoldersFolderIdPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Move Folder into Another User&apos;s Folder. Moves all of the content from within one user&apos;s folder into a new folder in another user&apos;s account. You can move folders across users as long as the you have administrative permissions. To move everything from the root folder, use &quot;0&quot; which always represents the root folder of a Box account. 
		/// </summary>
		/// <param name="request">Models.FoldersFolderIdPutRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.FoldersFolderIdPutResponse> Put(Models.FoldersFolderIdPutRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "users/{userId}/folders/{folderId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.FolderId == null)
				throw new InvalidOperationException("Uri Parameter FolderId cannot be null");

            url = url.Replace("{folderId}", request.UriParameters.FolderId.ToString());

			if(request.UriParameters.UserId == null)
				throw new InvalidOperationException("Uri Parameter UserId cannot be null");

            url = url.Replace("{userId}", request.UriParameters.UserId.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Notify != null)
                    url += "&notify=" + request.Query.Notify;
            }
            var req = new HttpRequestMessage(HttpMethod.Put, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.FoldersFolderIdPutRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.FoldersFolderIdPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Memberships
    {
        private readonly MoviesApi proxy;

        internal Memberships(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Retrieves all of the group memberships for a given enterprise. Note this is only available to group admins. To get a users groups use the users/me/memberships endpoint.
		/// </summary>
		/// <param name="userId"></param>
        public virtual async Task<Models.MembershipsGetResponse> Get(string userId)
        {

            var url = "users/{userId}/memberships";
            url = url.Replace("{userId}", userId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" :         {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"user\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"group\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"role\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }          } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content);
				}
					
			}

            return new Models.MembershipsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" :         {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"user\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"group\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"role\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }          } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Retrieves all of the group memberships for a given enterprise. Note this is only available to group admins. To get a users groups use the users/me/memberships endpoint.
		/// </summary>
		/// <param name="request">Models.MembershipsGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.MembershipsGetResponse> Get(Models.MembershipsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "users/{userId}/memberships";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.UserId == null)
				throw new InvalidOperationException("Uri Parameter UserId cannot be null");

            url = url.Replace("{userId}", request.UriParameters.UserId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" :         {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"user\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"group\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"role\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }          } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content);
				}
				
            }
            return new Models.MembershipsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" :         {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"user\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"group\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"role\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }          } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Users
    {
        private readonly MoviesApi proxy;

        internal Users(MoviesApi proxy)
        {
            this.proxy = proxy;
        }
        public virtual Me Me
        {
            get { return new Me(proxy); }
        }
        public virtual EmailAliases EmailAliases
        {
            get { return new EmailAliases(proxy); }
        }
        public virtual FoldersFolderId FoldersFolderId
        {
            get { return new FoldersFolderId(proxy); }
        }
        public virtual Memberships Memberships
        {
            get { return new Memberships(proxy); }
        }

        /// <summary>
		/// Used to provision a new user in an enterprise. This method only works for enterprise admins. 
		/// </summary>
		/// <param name="userspostrequestcontent"></param>
        public virtual async Task<Models.UsersPostResponse> Post(Models.UsersPostRequestContent userspostrequestcontent)
        {

            var url = "users";
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.UsersPostRequestContent), userspostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For users is 'user'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this user.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this user.\",      \"type\": \"string\"    },    \"login\": {      \"description\": \"The email address this user uses to login.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this user was created.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this user was last modified.\"    },    \"role\": {      \"description\": \"This user's enterprise role.\",      \"enum\": [        \"admin\",        \"coadmin\",        \"user\"      ]    },    \"language\": {      \"description\": \"The language of this user. ISO 639-1 Language Code.\",      \"type\": \"string\",      \"maxLength\": 2    },    \"space_amount\": {      \"description\": \"The user's total available space amount in bytes.\",      \"type\": \"integer\"    },    \"space_used\": {      \"description\": \"The amount of space in use by the user.\",      \"type\": \"integer\"    },    \"max_upload_size\": {      \"description\": \"The maximum individual file size in bytes this user can have.\",      \"type\": \"integer\"    },    \"tracking_codes\": {      \"type\": \"array\",      \"description\": \"An array of key/value pairs set by the user's admin.\"    },    \"can_see_managed_users\": {      \"description\": \"Whether this user can see other enterprise users in its contact list.\",      \"type\": \"boolean\"    },    \"is_sync_enabled\": {      \"description\": \"Whether or not this user can use Box Sync\",      \"type\": \"boolean\"    },    \"status\": {      \"description\": \"Can be active or inactive.\",      \"enum\": [        \"active\",        \"inactive\"      ]    },    \"job_title\": {      \"description\": \"The user's job title.\",      \"type\": \"string\"    },    \"phone\": {      \"description\": \"The user's phone number.\",      \"type\": \"string\"    },    \"address\": {      \"description\": \"The user's address.\",      \"type\": \"string\"    },    \"avatar_url\": {      \"description\": \"URL of this user's avatar image.\",      \"type\": \"string\"    },    \"is_exempt_from_device_limits\": {      \"description\": \"Whether to exempt this user from Enterprise device limits.\",      \"type\": \"boolean\"    },    \"is_exempt_from_login_verification\": {      \"description\": \"Whether or not this user must use two-factor authentication.\",      \"type\": \"boolean\"    },    \"enterprise\": {      \"type\": \"object\",      \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.UsersPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For users is 'user'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this user.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this user.\",      \"type\": \"string\"    },    \"login\": {      \"description\": \"The email address this user uses to login.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this user was created.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this user was last modified.\"    },    \"role\": {      \"description\": \"This user's enterprise role.\",      \"enum\": [        \"admin\",        \"coadmin\",        \"user\"      ]    },    \"language\": {      \"description\": \"The language of this user. ISO 639-1 Language Code.\",      \"type\": \"string\",      \"maxLength\": 2    },    \"space_amount\": {      \"description\": \"The user's total available space amount in bytes.\",      \"type\": \"integer\"    },    \"space_used\": {      \"description\": \"The amount of space in use by the user.\",      \"type\": \"integer\"    },    \"max_upload_size\": {      \"description\": \"The maximum individual file size in bytes this user can have.\",      \"type\": \"integer\"    },    \"tracking_codes\": {      \"type\": \"array\",      \"description\": \"An array of key/value pairs set by the user's admin.\"    },    \"can_see_managed_users\": {      \"description\": \"Whether this user can see other enterprise users in its contact list.\",      \"type\": \"boolean\"    },    \"is_sync_enabled\": {      \"description\": \"Whether or not this user can use Box Sync\",      \"type\": \"boolean\"    },    \"status\": {      \"description\": \"Can be active or inactive.\",      \"enum\": [        \"active\",        \"inactive\"      ]    },    \"job_title\": {      \"description\": \"The user's job title.\",      \"type\": \"string\"    },    \"phone\": {      \"description\": \"The user's phone number.\",      \"type\": \"string\"    },    \"address\": {      \"description\": \"The user's address.\",      \"type\": \"string\"    },    \"avatar_url\": {      \"description\": \"URL of this user's avatar image.\",      \"type\": \"string\"    },    \"is_exempt_from_device_limits\": {      \"description\": \"Whether to exempt this user from Enterprise device limits.\",      \"type\": \"boolean\"    },    \"is_exempt_from_login_verification\": {      \"description\": \"Whether or not this user must use two-factor authentication.\",      \"type\": \"boolean\"    },    \"enterprise\": {      \"type\": \"object\",      \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to provision a new user in an enterprise. This method only works for enterprise admins. 
		/// </summary>
		/// <param name="request">Models.UsersPostRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.UsersPostResponse> Post(Models.UsersPostRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "users";
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.UsersPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For users is 'user'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this user.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this user.\",      \"type\": \"string\"    },    \"login\": {      \"description\": \"The email address this user uses to login.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this user was created.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this user was last modified.\"    },    \"role\": {      \"description\": \"This user's enterprise role.\",      \"enum\": [        \"admin\",        \"coadmin\",        \"user\"      ]    },    \"language\": {      \"description\": \"The language of this user. ISO 639-1 Language Code.\",      \"type\": \"string\",      \"maxLength\": 2    },    \"space_amount\": {      \"description\": \"The user's total available space amount in bytes.\",      \"type\": \"integer\"    },    \"space_used\": {      \"description\": \"The amount of space in use by the user.\",      \"type\": \"integer\"    },    \"max_upload_size\": {      \"description\": \"The maximum individual file size in bytes this user can have.\",      \"type\": \"integer\"    },    \"tracking_codes\": {      \"type\": \"array\",      \"description\": \"An array of key/value pairs set by the user's admin.\"    },    \"can_see_managed_users\": {      \"description\": \"Whether this user can see other enterprise users in its contact list.\",      \"type\": \"boolean\"    },    \"is_sync_enabled\": {      \"description\": \"Whether or not this user can use Box Sync\",      \"type\": \"boolean\"    },    \"status\": {      \"description\": \"Can be active or inactive.\",      \"enum\": [        \"active\",        \"inactive\"      ]    },    \"job_title\": {      \"description\": \"The user's job title.\",      \"type\": \"string\"    },    \"phone\": {      \"description\": \"The user's phone number.\",      \"type\": \"string\"    },    \"address\": {      \"description\": \"The user's address.\",      \"type\": \"string\"    },    \"avatar_url\": {      \"description\": \"URL of this user's avatar image.\",      \"type\": \"string\"    },    \"is_exempt_from_device_limits\": {      \"description\": \"Whether to exempt this user from Enterprise device limits.\",      \"type\": \"boolean\"    },    \"is_exempt_from_login_verification\": {      \"description\": \"Whether or not this user must use two-factor authentication.\",      \"type\": \"boolean\"    },    \"enterprise\": {      \"type\": \"object\",      \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.UsersPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For users is 'user'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this user.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this user.\",      \"type\": \"string\"    },    \"login\": {      \"description\": \"The email address this user uses to login.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this user was created.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this user was last modified.\"    },    \"role\": {      \"description\": \"This user's enterprise role.\",      \"enum\": [        \"admin\",        \"coadmin\",        \"user\"      ]    },    \"language\": {      \"description\": \"The language of this user. ISO 639-1 Language Code.\",      \"type\": \"string\",      \"maxLength\": 2    },    \"space_amount\": {      \"description\": \"The user's total available space amount in bytes.\",      \"type\": \"integer\"    },    \"space_used\": {      \"description\": \"The amount of space in use by the user.\",      \"type\": \"integer\"    },    \"max_upload_size\": {      \"description\": \"The maximum individual file size in bytes this user can have.\",      \"type\": \"integer\"    },    \"tracking_codes\": {      \"type\": \"array\",      \"description\": \"An array of key/value pairs set by the user's admin.\"    },    \"can_see_managed_users\": {      \"description\": \"Whether this user can see other enterprise users in its contact list.\",      \"type\": \"boolean\"    },    \"is_sync_enabled\": {      \"description\": \"Whether or not this user can use Box Sync\",      \"type\": \"boolean\"    },    \"status\": {      \"description\": \"Can be active or inactive.\",      \"enum\": [        \"active\",        \"inactive\"      ]    },    \"job_title\": {      \"description\": \"The user's job title.\",      \"type\": \"string\"    },    \"phone\": {      \"description\": \"The user's phone number.\",      \"type\": \"string\"    },    \"address\": {      \"description\": \"The user's address.\",      \"type\": \"string\"    },    \"avatar_url\": {      \"description\": \"URL of this user's avatar image.\",      \"type\": \"string\"    },    \"is_exempt_from_device_limits\": {      \"description\": \"Whether to exempt this user from Enterprise device limits.\",      \"type\": \"boolean\"    },    \"is_exempt_from_login_verification\": {      \"description\": \"Whether or not this user must use two-factor authentication.\",      \"type\": \"boolean\"    },    \"enterprise\": {      \"type\": \"object\",      \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Get All Users in an Enterprise. Returns a list of all users for the Enterprise along with their user_id, public_name, and login. 
		/// </summary>
		/// <param name="getusersquery">query properties</param>
        public virtual async Task<Models.UsersGetResponse> Get(Models.GetUsersQuery getusersquery)
        {

            var url = "users";
            if(getusersquery != null)
            {
                url += "?";
                if(getusersquery.Limit != null)
					url += "&limit=" + getusersquery.Limit;
                if(getusersquery.Offset != null)
					url += "&offset=" + getusersquery.Offset;
                if(getusersquery.Filter_term != null)
					url += "&filter_term=" + getusersquery.Filter_term;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"description\": \"For users is 'user'.\",            \"type\": \"string\"          },          \"id\": {            \"description\": \"A unique string identifying this user.\",            \"type\": \"string\"          },          \"name\": {            \"description\": \"The name of this user.\",            \"type\": \"string\"          },          \"login\": {            \"description\": \"The email address this user uses to login.\",            \"type\": \"string\"          },          \"created_at\": {            \"type\": \"string\",            \"description\": \"The time this user was created.\"          },          \"modified_at\": {            \"type\": \"string\",            \"description\": \"The time this user was last modified.\"          },          \"role\": {            \"description\": \"This user's enterprise role.\",            \"enum\": [              \"admin\",              \"coadmin\",              \"user\"            ]          },          \"language\": {            \"description\": \"The language of this user. ISO 639-1 Language Code.\",            \"type\": \"string\"          },          \"space_amount\": {            \"description\": \"The user's total available space amount in bytes.\",            \"type\": \"integer\"          },          \"space_used\": {            \"description\": \"The amount of space in use by the user.\",            \"type\": \"integer\"          },          \"max_upload_size\": {            \"description\": \"The maximum individual file size in bytes this user can have.\",            \"type\": \"integer\"          },          \"tracking_codes\": {            \"type\": \"array\",            \"description\": \"An array of key/value pairs set by the user's admin.\"          },          \"can_see_managed_users\": {            \"description\": \"Whether this user can see other enterprise users in its contact list.\",            \"type\": \"boolean\"          },          \"is_sync_enabled\": {            \"description\": \"Whether or not this user can use Box Sync\",            \"type\": \"boolean\"          },          \"status\": {            \"description\": \"Can be active or inactive.\",            \"enum\": [              \"active\",              \"inactive\"            ]          },          \"job_title\": {            \"description\": \"The user's job title.\",            \"type\": \"string\"          },          \"phone\": {            \"description\": \"The user's phone number.\",            \"type\": \"string\"          },          \"address\": {            \"description\": \"The user's address.\",            \"type\": \"string\"          },          \"avatar_url\": {            \"description\": \"URL of this user's avatar image.\",            \"type\": \"string\"          },          \"is_exempt_from_device_limits\": {            \"description\": \"Whether to exempt this user from Enterprise device limits.\",            \"type\": \"boolean\"          },          \"is_exempt_from_login_verification\": {            \"description\": \"Whether or not this user must use two-factor authentication.\",            \"type\": \"boolean\"          },          \"enterprise\": {            \"type\": \"object\",            \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          }        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.UsersGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"description\": \"For users is 'user'.\",            \"type\": \"string\"          },          \"id\": {            \"description\": \"A unique string identifying this user.\",            \"type\": \"string\"          },          \"name\": {            \"description\": \"The name of this user.\",            \"type\": \"string\"          },          \"login\": {            \"description\": \"The email address this user uses to login.\",            \"type\": \"string\"          },          \"created_at\": {            \"type\": \"string\",            \"description\": \"The time this user was created.\"          },          \"modified_at\": {            \"type\": \"string\",            \"description\": \"The time this user was last modified.\"          },          \"role\": {            \"description\": \"This user's enterprise role.\",            \"enum\": [              \"admin\",              \"coadmin\",              \"user\"            ]          },          \"language\": {            \"description\": \"The language of this user. ISO 639-1 Language Code.\",            \"type\": \"string\"          },          \"space_amount\": {            \"description\": \"The user's total available space amount in bytes.\",            \"type\": \"integer\"          },          \"space_used\": {            \"description\": \"The amount of space in use by the user.\",            \"type\": \"integer\"          },          \"max_upload_size\": {            \"description\": \"The maximum individual file size in bytes this user can have.\",            \"type\": \"integer\"          },          \"tracking_codes\": {            \"type\": \"array\",            \"description\": \"An array of key/value pairs set by the user's admin.\"          },          \"can_see_managed_users\": {            \"description\": \"Whether this user can see other enterprise users in its contact list.\",            \"type\": \"boolean\"          },          \"is_sync_enabled\": {            \"description\": \"Whether or not this user can use Box Sync\",            \"type\": \"boolean\"          },          \"status\": {            \"description\": \"Can be active or inactive.\",            \"enum\": [              \"active\",              \"inactive\"            ]          },          \"job_title\": {            \"description\": \"The user's job title.\",            \"type\": \"string\"          },          \"phone\": {            \"description\": \"The user's phone number.\",            \"type\": \"string\"          },          \"address\": {            \"description\": \"The user's address.\",            \"type\": \"string\"          },          \"avatar_url\": {            \"description\": \"URL of this user's avatar image.\",            \"type\": \"string\"          },          \"is_exempt_from_device_limits\": {            \"description\": \"Whether to exempt this user from Enterprise device limits.\",            \"type\": \"boolean\"          },          \"is_exempt_from_login_verification\": {            \"description\": \"Whether or not this user must use two-factor authentication.\",            \"type\": \"boolean\"          },          \"enterprise\": {            \"type\": \"object\",            \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          }        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Get All Users in an Enterprise. Returns a list of all users for the Enterprise along with their user_id, public_name, and login. 
		/// </summary>
		/// <param name="request">Models.UsersGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.UsersGetResponse> Get(Models.UsersGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "users";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Limit != null)
                    url += "&limit=" + request.Query.Limit;
                if(request.Query.Offset != null)
                    url += "&offset=" + request.Query.Offset;
                if(request.Query.Filter_term != null)
                    url += "&filter_term=" + request.Query.Filter_term;
            }
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"description\": \"For users is 'user'.\",            \"type\": \"string\"          },          \"id\": {            \"description\": \"A unique string identifying this user.\",            \"type\": \"string\"          },          \"name\": {            \"description\": \"The name of this user.\",            \"type\": \"string\"          },          \"login\": {            \"description\": \"The email address this user uses to login.\",            \"type\": \"string\"          },          \"created_at\": {            \"type\": \"string\",            \"description\": \"The time this user was created.\"          },          \"modified_at\": {            \"type\": \"string\",            \"description\": \"The time this user was last modified.\"          },          \"role\": {            \"description\": \"This user's enterprise role.\",            \"enum\": [              \"admin\",              \"coadmin\",              \"user\"            ]          },          \"language\": {            \"description\": \"The language of this user. ISO 639-1 Language Code.\",            \"type\": \"string\"          },          \"space_amount\": {            \"description\": \"The user's total available space amount in bytes.\",            \"type\": \"integer\"          },          \"space_used\": {            \"description\": \"The amount of space in use by the user.\",            \"type\": \"integer\"          },          \"max_upload_size\": {            \"description\": \"The maximum individual file size in bytes this user can have.\",            \"type\": \"integer\"          },          \"tracking_codes\": {            \"type\": \"array\",            \"description\": \"An array of key/value pairs set by the user's admin.\"          },          \"can_see_managed_users\": {            \"description\": \"Whether this user can see other enterprise users in its contact list.\",            \"type\": \"boolean\"          },          \"is_sync_enabled\": {            \"description\": \"Whether or not this user can use Box Sync\",            \"type\": \"boolean\"          },          \"status\": {            \"description\": \"Can be active or inactive.\",            \"enum\": [              \"active\",              \"inactive\"            ]          },          \"job_title\": {            \"description\": \"The user's job title.\",            \"type\": \"string\"          },          \"phone\": {            \"description\": \"The user's phone number.\",            \"type\": \"string\"          },          \"address\": {            \"description\": \"The user's address.\",            \"type\": \"string\"          },          \"avatar_url\": {            \"description\": \"URL of this user's avatar image.\",            \"type\": \"string\"          },          \"is_exempt_from_device_limits\": {            \"description\": \"Whether to exempt this user from Enterprise device limits.\",            \"type\": \"boolean\"          },          \"is_exempt_from_login_verification\": {            \"description\": \"Whether or not this user must use two-factor authentication.\",            \"type\": \"boolean\"          },          \"enterprise\": {            \"type\": \"object\",            \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          }        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.UsersGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"description\": \"For users is 'user'.\",            \"type\": \"string\"          },          \"id\": {            \"description\": \"A unique string identifying this user.\",            \"type\": \"string\"          },          \"name\": {            \"description\": \"The name of this user.\",            \"type\": \"string\"          },          \"login\": {            \"description\": \"The email address this user uses to login.\",            \"type\": \"string\"          },          \"created_at\": {            \"type\": \"string\",            \"description\": \"The time this user was created.\"          },          \"modified_at\": {            \"type\": \"string\",            \"description\": \"The time this user was last modified.\"          },          \"role\": {            \"description\": \"This user's enterprise role.\",            \"enum\": [              \"admin\",              \"coadmin\",              \"user\"            ]          },          \"language\": {            \"description\": \"The language of this user. ISO 639-1 Language Code.\",            \"type\": \"string\"          },          \"space_amount\": {            \"description\": \"The user's total available space amount in bytes.\",            \"type\": \"integer\"          },          \"space_used\": {            \"description\": \"The amount of space in use by the user.\",            \"type\": \"integer\"          },          \"max_upload_size\": {            \"description\": \"The maximum individual file size in bytes this user can have.\",            \"type\": \"integer\"          },          \"tracking_codes\": {            \"type\": \"array\",            \"description\": \"An array of key/value pairs set by the user's admin.\"          },          \"can_see_managed_users\": {            \"description\": \"Whether this user can see other enterprise users in its contact list.\",            \"type\": \"boolean\"          },          \"is_sync_enabled\": {            \"description\": \"Whether or not this user can use Box Sync\",            \"type\": \"boolean\"          },          \"status\": {            \"description\": \"Can be active or inactive.\",            \"enum\": [              \"active\",              \"inactive\"            ]          },          \"job_title\": {            \"description\": \"The user's job title.\",            \"type\": \"string\"          },          \"phone\": {            \"description\": \"The user's phone number.\",            \"type\": \"string\"          },          \"address\": {            \"description\": \"The user's address.\",            \"type\": \"string\"          },          \"avatar_url\": {            \"description\": \"URL of this user's avatar image.\",            \"type\": \"string\"          },          \"is_exempt_from_device_limits\": {            \"description\": \"Whether to exempt this user from Enterprise device limits.\",            \"type\": \"boolean\"          },          \"is_exempt_from_login_verification\": {            \"description\": \"Whether or not this user must use two-factor authentication.\",            \"type\": \"boolean\"          },          \"enterprise\": {            \"type\": \"object\",            \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          }        }      }    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Deletes a user in an enterprise account. An empty 200 response is sent to confirm deletion of the user. If the user still has files in their accoun and the `force` parameter is not sent, an error is returned. 
		/// </summary>
		/// <param name="userId">Box&apos;s unique string identifying this user.</param>
		/// <param name="deleteusersquery">query properties</param>
        public virtual async Task<ApiResponse> Delete(string userId, Models.DeleteUsersQuery deleteusersquery)
        {

            var url = "users/{userId}";
            url = url.Replace("{userId}", userId.ToString());
            if(deleteusersquery != null)
            {
                url += "?";
                if(deleteusersquery.Notify != null)
					url += "&notify=" + deleteusersquery.Notify;
                if(deleteusersquery.Force != null)
					url += "&force=" + deleteusersquery.Force;
            }
            var req = new HttpRequestMessage(HttpMethod.Delete, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Deletes a user in an enterprise account. An empty 200 response is sent to confirm deletion of the user. If the user still has files in their accoun and the `force` parameter is not sent, an error is returned. 
		/// </summary>
		/// <param name="request">Models.UsersDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.UsersDeleteRequest request)
        {

            var url = "users/{userId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.UserId == null)
				throw new InvalidOperationException("Uri Parameter UserId cannot be null");

            url = url.Replace("{userId}", request.UriParameters.UserId.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Notify != null)
                    url += "&notify=" + request.Query.Notify;
                if(request.Query.Force != null)
                    url += "&force=" + request.Query.Force;
            }
            var req = new HttpRequestMessage(HttpMethod.Delete, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

        /// <summary>
		/// Update a User&apos;s Information. Used to edit the settings and information abou a user. This method only works for enterprise admins. To roll a user out of the enterprise (and convert them to a standalone free user), update the special `enterprise` attribute to be `null`. Returns the a full user object for the updated user. Errors may be thrown when the fields are invalid or this API call is made from a non-admin account. 
		/// </summary>
		/// <param name="useridputrequestcontent"></param>
		/// <param name="userId">Box&apos;s unique string identifying this user.</param>
		/// <param name="putusersquery">query properties</param>
        public virtual async Task<Models.UsersPutResponse> Put(Models.UserIdPutRequestContent useridputrequestcontent, string userId, Models.PutUsersQuery putusersquery)
        {

            var url = "users/{userId}";
            url = url.Replace("{userId}", userId.ToString());
            if(putusersquery != null)
            {
                url += "?";
                if(putusersquery.Notify != null)
					url += "&notify=" + putusersquery.Notify;
            }
            var req = new HttpRequestMessage(HttpMethod.Put, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.UserIdPutRequestContent), useridputrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For users is 'user'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this user.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this user.\",      \"type\": \"string\"    },    \"login\": {      \"description\": \"The email address this user uses to login.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this user was created.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this user was last modified.\"    },    \"role\": {      \"description\": \"This user's enterprise role.\",      \"enum\": [        \"admin\",        \"coadmin\",        \"user\"      ]    },    \"language\": {      \"description\": \"The language of this user. ISO 639-1 Language Code.\",      \"type\": \"string\",      \"maxLength\": 2    },    \"space_amount\": {      \"description\": \"The user's total available space amount in bytes.\",      \"type\": \"integer\"    },    \"space_used\": {      \"description\": \"The amount of space in use by the user.\",      \"type\": \"integer\"    },    \"max_upload_size\": {      \"description\": \"The maximum individual file size in bytes this user can have.\",      \"type\": \"integer\"    },    \"tracking_codes\": {      \"type\": \"array\",      \"description\": \"An array of key/value pairs set by the user's admin.\"    },    \"can_see_managed_users\": {      \"description\": \"Whether this user can see other enterprise users in its contact list.\",      \"type\": \"boolean\"    },    \"is_sync_enabled\": {      \"description\": \"Whether or not this user can use Box Sync\",      \"type\": \"boolean\"    },    \"status\": {      \"description\": \"Can be active or inactive.\",      \"enum\": [        \"active\",        \"inactive\"      ]    },    \"job_title\": {      \"description\": \"The user's job title.\",      \"type\": \"string\"    },    \"phone\": {      \"description\": \"The user's phone number.\",      \"type\": \"string\"    },    \"address\": {      \"description\": \"The user's address.\",      \"type\": \"string\"    },    \"avatar_url\": {      \"description\": \"URL of this user's avatar image.\",      \"type\": \"string\"    },    \"is_exempt_from_device_limits\": {      \"description\": \"Whether to exempt this user from Enterprise device limits.\",      \"type\": \"boolean\"    },    \"is_exempt_from_login_verification\": {      \"description\": \"Whether or not this user must use two-factor authentication.\",      \"type\": \"boolean\"    },    \"enterprise\": {      \"type\": \"object\",      \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.UsersPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For users is 'user'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this user.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this user.\",      \"type\": \"string\"    },    \"login\": {      \"description\": \"The email address this user uses to login.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this user was created.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this user was last modified.\"    },    \"role\": {      \"description\": \"This user's enterprise role.\",      \"enum\": [        \"admin\",        \"coadmin\",        \"user\"      ]    },    \"language\": {      \"description\": \"The language of this user. ISO 639-1 Language Code.\",      \"type\": \"string\",      \"maxLength\": 2    },    \"space_amount\": {      \"description\": \"The user's total available space amount in bytes.\",      \"type\": \"integer\"    },    \"space_used\": {      \"description\": \"The amount of space in use by the user.\",      \"type\": \"integer\"    },    \"max_upload_size\": {      \"description\": \"The maximum individual file size in bytes this user can have.\",      \"type\": \"integer\"    },    \"tracking_codes\": {      \"type\": \"array\",      \"description\": \"An array of key/value pairs set by the user's admin.\"    },    \"can_see_managed_users\": {      \"description\": \"Whether this user can see other enterprise users in its contact list.\",      \"type\": \"boolean\"    },    \"is_sync_enabled\": {      \"description\": \"Whether or not this user can use Box Sync\",      \"type\": \"boolean\"    },    \"status\": {      \"description\": \"Can be active or inactive.\",      \"enum\": [        \"active\",        \"inactive\"      ]    },    \"job_title\": {      \"description\": \"The user's job title.\",      \"type\": \"string\"    },    \"phone\": {      \"description\": \"The user's phone number.\",      \"type\": \"string\"    },    \"address\": {      \"description\": \"The user's address.\",      \"type\": \"string\"    },    \"avatar_url\": {      \"description\": \"URL of this user's avatar image.\",      \"type\": \"string\"    },    \"is_exempt_from_device_limits\": {      \"description\": \"Whether to exempt this user from Enterprise device limits.\",      \"type\": \"boolean\"    },    \"is_exempt_from_login_verification\": {      \"description\": \"Whether or not this user must use two-factor authentication.\",      \"type\": \"boolean\"    },    \"enterprise\": {      \"type\": \"object\",      \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Update a User&apos;s Information. Used to edit the settings and information abou a user. This method only works for enterprise admins. To roll a user out of the enterprise (and convert them to a standalone free user), update the special `enterprise` attribute to be `null`. Returns the a full user object for the updated user. Errors may be thrown when the fields are invalid or this API call is made from a non-admin account. 
		/// </summary>
		/// <param name="request">Models.UsersPutRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.UsersPutResponse> Put(Models.UsersPutRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "users/{userId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.UserId == null)
				throw new InvalidOperationException("Uri Parameter UserId cannot be null");

            url = url.Replace("{userId}", request.UriParameters.UserId.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Notify != null)
                    url += "&notify=" + request.Query.Notify;
            }
            var req = new HttpRequestMessage(HttpMethod.Put, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.UserIdPutRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For users is 'user'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this user.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this user.\",      \"type\": \"string\"    },    \"login\": {      \"description\": \"The email address this user uses to login.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this user was created.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this user was last modified.\"    },    \"role\": {      \"description\": \"This user's enterprise role.\",      \"enum\": [        \"admin\",        \"coadmin\",        \"user\"      ]    },    \"language\": {      \"description\": \"The language of this user. ISO 639-1 Language Code.\",      \"type\": \"string\",      \"maxLength\": 2    },    \"space_amount\": {      \"description\": \"The user's total available space amount in bytes.\",      \"type\": \"integer\"    },    \"space_used\": {      \"description\": \"The amount of space in use by the user.\",      \"type\": \"integer\"    },    \"max_upload_size\": {      \"description\": \"The maximum individual file size in bytes this user can have.\",      \"type\": \"integer\"    },    \"tracking_codes\": {      \"type\": \"array\",      \"description\": \"An array of key/value pairs set by the user's admin.\"    },    \"can_see_managed_users\": {      \"description\": \"Whether this user can see other enterprise users in its contact list.\",      \"type\": \"boolean\"    },    \"is_sync_enabled\": {      \"description\": \"Whether or not this user can use Box Sync\",      \"type\": \"boolean\"    },    \"status\": {      \"description\": \"Can be active or inactive.\",      \"enum\": [        \"active\",        \"inactive\"      ]    },    \"job_title\": {      \"description\": \"The user's job title.\",      \"type\": \"string\"    },    \"phone\": {      \"description\": \"The user's phone number.\",      \"type\": \"string\"    },    \"address\": {      \"description\": \"The user's address.\",      \"type\": \"string\"    },    \"avatar_url\": {      \"description\": \"URL of this user's avatar image.\",      \"type\": \"string\"    },    \"is_exempt_from_device_limits\": {      \"description\": \"Whether to exempt this user from Enterprise device limits.\",      \"type\": \"boolean\"    },    \"is_exempt_from_login_verification\": {      \"description\": \"Whether or not this user must use two-factor authentication.\",      \"type\": \"boolean\"    },    \"enterprise\": {      \"type\": \"object\",      \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.UsersPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For users is 'user'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this user.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this user.\",      \"type\": \"string\"    },    \"login\": {      \"description\": \"The email address this user uses to login.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this user was created.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this user was last modified.\"    },    \"role\": {      \"description\": \"This user's enterprise role.\",      \"enum\": [        \"admin\",        \"coadmin\",        \"user\"      ]    },    \"language\": {      \"description\": \"The language of this user. ISO 639-1 Language Code.\",      \"type\": \"string\",      \"maxLength\": 2    },    \"space_amount\": {      \"description\": \"The user's total available space amount in bytes.\",      \"type\": \"integer\"    },    \"space_used\": {      \"description\": \"The amount of space in use by the user.\",      \"type\": \"integer\"    },    \"max_upload_size\": {      \"description\": \"The maximum individual file size in bytes this user can have.\",      \"type\": \"integer\"    },    \"tracking_codes\": {      \"type\": \"array\",      \"description\": \"An array of key/value pairs set by the user's admin.\"    },    \"can_see_managed_users\": {      \"description\": \"Whether this user can see other enterprise users in its contact list.\",      \"type\": \"boolean\"    },    \"is_sync_enabled\": {      \"description\": \"Whether or not this user can use Box Sync\",      \"type\": \"boolean\"    },    \"status\": {      \"description\": \"Can be active or inactive.\",      \"enum\": [        \"active\",        \"inactive\"      ]    },    \"job_title\": {      \"description\": \"The user's job title.\",      \"type\": \"string\"    },    \"phone\": {      \"description\": \"The user's phone number.\",      \"type\": \"string\"    },    \"address\": {      \"description\": \"The user's address.\",      \"type\": \"string\"    },    \"avatar_url\": {      \"description\": \"URL of this user's avatar image.\",      \"type\": \"string\"    },    \"is_exempt_from_device_limits\": {      \"description\": \"Whether to exempt this user from Enterprise device limits.\",      \"type\": \"boolean\"    },    \"is_exempt_from_login_verification\": {      \"description\": \"Whether or not this user must use two-factor authentication.\",      \"type\": \"boolean\"    },    \"enterprise\": {      \"type\": \"object\",      \"description\": \"Mini representation of this user's enterprise, including the ID of its enterprise\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Assignments
    {
        private readonly MoviesApi proxy;

        internal Assignments(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Retrieves all of the assignments for a given task. A collection of task assignment mini objects will be returned upon success. 
		/// </summary>
		/// <param name="taskId"></param>
        public virtual async Task<Models.AssignmentsGetResponse> Get(string taskId)
        {

            var url = "tasks/{taskId}/assignments";
            url = url.Replace("{taskId}", taskId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"sha1\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"assigned_to\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          }        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.AssignmentsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"sha1\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"assigned_to\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          }        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Retrieves all of the assignments for a given task. A collection of task assignment mini objects will be returned upon success. 
		/// </summary>
		/// <param name="request">Models.AssignmentsGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.AssignmentsGetResponse> Get(Models.AssignmentsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "tasks/{taskId}/assignments";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.TaskId == null)
				throw new InvalidOperationException("Uri Parameter TaskId cannot be null");

            url = url.Replace("{taskId}", request.UriParameters.TaskId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"sha1\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"assigned_to\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          }        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.AssignmentsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"sha1\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            }          },          \"assigned_to\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          }        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class TasksA
    {
        private readonly MoviesApi proxy;

        internal TasksA(MoviesApi proxy)
        {
            this.proxy = proxy;
        }
        public virtual Assignments Assignments
        {
            get { return new Assignments(proxy); }
        }

        /// <summary>
		/// Create a Task. Used to create a single task for single user on a single file. A new task object will be returned upon success. 
		/// </summary>
		/// <param name="taskspostrequestcontent"></param>
        public virtual async Task<Models.TasksAPostResponse> Post(Models.TasksPostRequestContent taskspostrequestcontent)
        {

            var url = "tasks";
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.TasksPostRequestContent), taskspostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.TasksAPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Create a Task. Used to create a single task for single user on a single file. A new task object will be returned upon success. 
		/// </summary>
		/// <param name="request">Models.TasksAPostRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.TasksAPostResponse> Post(Models.TasksAPostRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "tasks";
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.TasksPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.TasksAPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Permanently deletes a specific task. An empty 204 response will be returned upon success. 
		/// </summary>
		/// <param name="taskId"></param>
        public virtual async Task<ApiResponse> Delete(string taskId)
        {

            var url = "tasks/{taskId}";
            url = url.Replace("{taskId}", taskId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Permanently deletes a specific task. An empty 204 response will be returned upon success. 
		/// </summary>
		/// <param name="request">Models.TasksADeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.TasksADeleteRequest request)
        {

            var url = "tasks/{taskId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.TaskId == null)
				throw new InvalidOperationException("Uri Parameter TaskId cannot be null");

            url = url.Replace("{taskId}", request.UriParameters.TaskId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

        /// <summary>
		/// Updates a specific task.
		/// </summary>
		/// <param name="taskidputrequestcontent"></param>
		/// <param name="taskId"></param>
        public virtual async Task<Models.TasksAPutResponse> Put(Models.TaskIdPutRequestContent taskidputrequestcontent, string taskId)
        {

            var url = "tasks/{taskId}";
            url = url.Replace("{taskId}", taskId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.TaskIdPutRequestContent), taskidputrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("", response.Content);
				}
					
			}

            return new Models.TasksAPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("", response.Content), true)
                                            };

        }

        /// <summary>
		/// Updates a specific task.
		/// </summary>
		/// <param name="request">Models.TasksAPutRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.TasksAPutResponse> Put(Models.TasksAPutRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "tasks/{taskId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.TaskId == null)
				throw new InvalidOperationException("Uri Parameter TaskId cannot be null");

            url = url.Replace("{taskId}", request.UriParameters.TaskId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.TaskIdPutRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("", response.Content);
				}
				
            }
            return new Models.TasksAPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("", response.Content), true)
                                            };
        }

        /// <summary>
		/// Fetches a specific task.
		/// </summary>
		/// <param name="taskId"></param>
        public virtual async Task<Models.TasksAGetResponse> Get(string taskId)
        {

            var url = "tasks/{taskId}";
            url = url.Replace("{taskId}", taskId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("", response.Content);
				}
					
			}

            return new Models.TasksAGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("", response.Content), true)
                                            };

        }

        /// <summary>
		/// Fetches a specific task.
		/// </summary>
		/// <param name="request">Models.TasksAGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.TasksAGetResponse> Get(Models.TasksAGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "tasks/{taskId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.TaskId == null)
				throw new InvalidOperationException("Uri Parameter TaskId cannot be null");

            url = url.Replace("{taskId}", request.UriParameters.TaskId.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("", response.Content);
				}
				
            }
            return new Models.TasksAGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("", response.Content), true)
                                            };
        }

    }

    public partial class TaskAssignments
    {
        private readonly MoviesApi proxy;

        internal TaskAssignments(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Used to assign a task to a single user. There can be multiple assignments on a given task. A new task assignment object will be returned upon success. 
		/// </summary>
		/// <param name="taskassignmentspostrequestcontent"></param>
        public virtual async Task<Models.TaskAssignmentsPostResponse> Post(Models.TaskAssignmentsPostRequestContent taskassignmentspostrequestcontent)
        {

            var url = "task_assignments";
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.TaskAssignmentsPostRequestContent), taskassignmentspostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"item\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"sequence_id\": {					\"type\": \"string\"				},				\"etag\": {					\"type\": \"string\"				},				\"sha1\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"assigned_to\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"message\": {			\"type\": \"string\"		},		\"completed_at\": {			\"type\": \"string\"		},		\"assigned_at\": {			\"type\": \"string\"		},		\"reminded_at\": {			\"type\": \"string\"		},		\"resolution_state\": {			\"type\": \"string\"		},		\"assigned_by\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		}	}}", response.Content);
				}
					
			}

            return new Models.TaskAssignmentsPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"item\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"sequence_id\": {					\"type\": \"string\"				},				\"etag\": {					\"type\": \"string\"				},				\"sha1\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"assigned_to\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"message\": {			\"type\": \"string\"		},		\"completed_at\": {			\"type\": \"string\"		},		\"assigned_at\": {			\"type\": \"string\"		},		\"reminded_at\": {			\"type\": \"string\"		},		\"resolution_state\": {			\"type\": \"string\"		},		\"assigned_by\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		}	}}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to assign a task to a single user. There can be multiple assignments on a given task. A new task assignment object will be returned upon success. 
		/// </summary>
		/// <param name="request">Models.TaskAssignmentsPostRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.TaskAssignmentsPostResponse> Post(Models.TaskAssignmentsPostRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "task_assignments";
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.TaskAssignmentsPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"item\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"sequence_id\": {					\"type\": \"string\"				},				\"etag\": {					\"type\": \"string\"				},				\"sha1\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"assigned_to\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"message\": {			\"type\": \"string\"		},		\"completed_at\": {			\"type\": \"string\"		},		\"assigned_at\": {			\"type\": \"string\"		},		\"reminded_at\": {			\"type\": \"string\"		},		\"resolution_state\": {			\"type\": \"string\"		},		\"assigned_by\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		}	}}", response.Content);
				}
				
            }
            return new Models.TaskAssignmentsPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"item\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"sequence_id\": {					\"type\": \"string\"				},				\"etag\": {					\"type\": \"string\"				},				\"sha1\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"assigned_to\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"message\": {			\"type\": \"string\"		},		\"completed_at\": {			\"type\": \"string\"		},		\"assigned_at\": {			\"type\": \"string\"		},		\"reminded_at\": {			\"type\": \"string\"		},		\"resolution_state\": {			\"type\": \"string\"		},		\"assigned_by\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		}	}}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Deletes a specific task assignment. An empty `204 No Content` response will be returned upon success. 
		/// </summary>
		/// <param name="task_assignments_id"></param>
        public virtual async Task<ApiResponse> Delete(string task_assignments_id)
        {

            var url = "task_assignments/{task_assignments_id}";
            url = url.Replace("{task_assignments_id}", task_assignments_id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Deletes a specific task assignment. An empty `204 No Content` response will be returned upon success. 
		/// </summary>
		/// <param name="request">Models.TaskAssignmentsDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.TaskAssignmentsDeleteRequest request)
        {

            var url = "task_assignments/{task_assignments_id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Task_assignments_id == null)
				throw new InvalidOperationException("Uri Parameter Task_assignments_id cannot be null");

            url = url.Replace("{task_assignments_id}", request.UriParameters.Task_assignments_id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

        /// <summary>
		/// Used to update a task assignment. A new task assignment object will be returned upon success. 
		/// </summary>
		/// <param name="taskassignmentsidputrequestcontent"></param>
		/// <param name="task_assignments_id"></param>
        public virtual async Task<Models.TaskAssignmentsPutResponse> Put(Models.TaskAssignmentsIdPutRequestContent taskassignmentsidputrequestcontent, string task_assignments_id)
        {

            var url = "task_assignments/{task_assignments_id}";
            url = url.Replace("{task_assignments_id}", task_assignments_id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.TaskAssignmentsIdPutRequestContent), taskassignmentsidputrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"item\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"sequence_id\": {					\"type\": \"string\"				},				\"etag\": {					\"type\": \"string\"				},				\"sha1\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"assigned_to\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"message\": {			\"type\": \"string\"		},		\"completed_at\": {			\"type\": \"string\"		},		\"assigned_at\": {			\"type\": \"string\"		},		\"reminded_at\": {			\"type\": \"string\"		},		\"resolution_state\": {			\"type\": \"string\"		},		\"assigned_by\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		}	}}", response.Content);
				}
					
			}

            return new Models.TaskAssignmentsPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"item\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"sequence_id\": {					\"type\": \"string\"				},				\"etag\": {					\"type\": \"string\"				},				\"sha1\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"assigned_to\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"message\": {			\"type\": \"string\"		},		\"completed_at\": {			\"type\": \"string\"		},		\"assigned_at\": {			\"type\": \"string\"		},		\"reminded_at\": {			\"type\": \"string\"		},		\"resolution_state\": {			\"type\": \"string\"		},		\"assigned_by\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		}	}}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to update a task assignment. A new task assignment object will be returned upon success. 
		/// </summary>
		/// <param name="request">Models.TaskAssignmentsPutRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.TaskAssignmentsPutResponse> Put(Models.TaskAssignmentsPutRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "task_assignments/{task_assignments_id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Task_assignments_id == null)
				throw new InvalidOperationException("Uri Parameter Task_assignments_id cannot be null");

            url = url.Replace("{task_assignments_id}", request.UriParameters.Task_assignments_id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.TaskAssignmentsIdPutRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"item\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"sequence_id\": {					\"type\": \"string\"				},				\"etag\": {					\"type\": \"string\"				},				\"sha1\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"assigned_to\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"message\": {			\"type\": \"string\"		},		\"completed_at\": {			\"type\": \"string\"		},		\"assigned_at\": {			\"type\": \"string\"		},		\"reminded_at\": {			\"type\": \"string\"		},		\"resolution_state\": {			\"type\": \"string\"		},		\"assigned_by\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		}	}}", response.Content);
				}
				
            }
            return new Models.TaskAssignmentsPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"item\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"sequence_id\": {					\"type\": \"string\"				},				\"etag\": {					\"type\": \"string\"				},				\"sha1\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"assigned_to\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"message\": {			\"type\": \"string\"		},		\"completed_at\": {			\"type\": \"string\"		},		\"assigned_at\": {			\"type\": \"string\"		},		\"reminded_at\": {			\"type\": \"string\"		},		\"resolution_state\": {			\"type\": \"string\"		},		\"assigned_by\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		}	}}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Fetches a specific task assignment. The specified task assignment object will be returned upon success. 
		/// </summary>
		/// <param name="task_assignments_id"></param>
        public virtual async Task<Models.TaskAssignmentsGetResponse> Get(string task_assignments_id)
        {

            var url = "task_assignments/{task_assignments_id}";
            url = url.Replace("{task_assignments_id}", task_assignments_id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"item\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"sequence_id\": {					\"type\": \"string\"				},				\"etag\": {					\"type\": \"string\"				},				\"sha1\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"assigned_to\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"message\": {			\"type\": \"string\"		},		\"completed_at\": {			\"type\": \"string\"		},		\"assigned_at\": {			\"type\": \"string\"		},		\"reminded_at\": {			\"type\": \"string\"		},		\"resolution_state\": {			\"type\": \"string\"		},		\"assigned_by\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		}	}}", response.Content);
				}
					
			}

            return new Models.TaskAssignmentsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"item\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"sequence_id\": {					\"type\": \"string\"				},				\"etag\": {					\"type\": \"string\"				},				\"sha1\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"assigned_to\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"message\": {			\"type\": \"string\"		},		\"completed_at\": {			\"type\": \"string\"		},		\"assigned_at\": {			\"type\": \"string\"		},		\"reminded_at\": {			\"type\": \"string\"		},		\"resolution_state\": {			\"type\": \"string\"		},		\"assigned_by\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		}	}}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Fetches a specific task assignment. The specified task assignment object will be returned upon success. 
		/// </summary>
		/// <param name="request">Models.TaskAssignmentsGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.TaskAssignmentsGetResponse> Get(Models.TaskAssignmentsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "task_assignments/{task_assignments_id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Task_assignments_id == null)
				throw new InvalidOperationException("Uri Parameter Task_assignments_id cannot be null");

            url = url.Replace("{task_assignments_id}", request.UriParameters.Task_assignments_id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"item\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"sequence_id\": {					\"type\": \"string\"				},				\"etag\": {					\"type\": \"string\"				},				\"sha1\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"assigned_to\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"message\": {			\"type\": \"string\"		},		\"completed_at\": {			\"type\": \"string\"		},		\"assigned_at\": {			\"type\": \"string\"		},		\"reminded_at\": {			\"type\": \"string\"		},		\"resolution_state\": {			\"type\": \"string\"		},		\"assigned_by\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		}	}}", response.Content);
				}
				
            }
            return new Models.TaskAssignmentsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{	\"$schema\": \"http://json-schema.org/draft-03/schema\",	\"type\": \"object\" ,	\"properties\": {		\"type\": {			\"type\": \"string\"		},		\"id\": {			\"type\": \"string\"		},		\"item\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"sequence_id\": {					\"type\": \"string\"				},				\"etag\": {					\"type\": \"string\"				},				\"sha1\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"assigned_to\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		},		\"message\": {			\"type\": \"string\"		},		\"completed_at\": {			\"type\": \"string\"		},		\"assigned_at\": {			\"type\": \"string\"		},		\"reminded_at\": {			\"type\": \"string\"		},		\"resolution_state\": {			\"type\": \"string\"		},		\"assigned_by\": {			\"properties\": {				\"type\": {					\"type\": \"string\"				},				\"id\": {					\"type\": \"string\"				},				\"name\": {					\"type\": \"string\"				},				\"login\": {					\"type\": \"string\"				}			},			\"type\": \"object\"		}	}}", response.Content), true)
                                            };
        }

    }

    public partial class IdMemberships
    {
        private readonly MoviesApi proxy;

        internal IdMemberships(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Retrieves all of the members for a given group.
		/// </summary>
		/// <param name="id"></param>
        public virtual async Task<Models.IdMembershipsGetResponse> Get(string id)
        {

            var url = "groups/{id}/memberships";
            url = url.Replace("{id}", id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" :         {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"user\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"group\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"role\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }          } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content);
				}
					
			}

            return new Models.IdMembershipsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" :         {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"user\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"group\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"role\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }          } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Retrieves all of the members for a given group.
		/// </summary>
		/// <param name="request">Models.IdMembershipsGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.IdMembershipsGetResponse> Get(Models.IdMembershipsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "groups/{id}/memberships";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" :         {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"user\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"group\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"role\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }          } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content);
				}
				
            }
            return new Models.IdMembershipsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" :         {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"user\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"group\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"role\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }          } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class IdCollaborations
    {
        private readonly MoviesApi proxy;

        internal IdCollaborations(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Retrieves all of the group collaborations for a given group. Note this is only available to group admins.
		/// </summary>
		/// <param name="id"></param>
        public virtual async Task<Models.IdCollaborationsGetResponse> Get(string id)
        {

            var url = "groups/{id}/collaborations";
            url = url.Replace("{id}", id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"expires_at\": {            \"type\": \"string\"          },          \"status\": {            \"type\": \"string\"          },          \"accessible_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"role\": {            \"type\": \"string\"          },          \"acknowledged_at\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.IdCollaborationsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"expires_at\": {            \"type\": \"string\"          },          \"status\": {            \"type\": \"string\"          },          \"accessible_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"role\": {            \"type\": \"string\"          },          \"acknowledged_at\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Retrieves all of the group collaborations for a given group. Note this is only available to group admins.
		/// </summary>
		/// <param name="request">Models.IdCollaborationsGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.IdCollaborationsGetResponse> Get(Models.IdCollaborationsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "groups/{id}/collaborations";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"expires_at\": {            \"type\": \"string\"          },          \"status\": {            \"type\": \"string\"          },          \"accessible_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"role\": {            \"type\": \"string\"          },          \"acknowledged_at\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.IdCollaborationsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"total_count\": {      \"type\": \"integer\"    },    \"entries\": {      \"type\": \"array\",      \"items\": {        \"type\": \"object\",        \"properties\": {          \"type\": {            \"type\": \"string\"          },          \"id\": {            \"type\": \"string\"          },          \"created_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"created_at\": {            \"type\": \"string\"          },          \"modified_at\": {            \"type\": \"string\"          },          \"expires_at\": {            \"type\": \"string\"          },          \"status\": {            \"type\": \"string\"          },          \"accessible_by\": {            \"type\": \"object\",            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              },              \"login\": {                \"type\": \"string\"              }            }          },          \"role\": {            \"type\": \"string\"          },          \"acknowledged_at\": {            \"type\": \"string\"          },          \"item\": {            \"type\": \"string\"          }        }      }    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class Groups
    {
        private readonly MoviesApi proxy;

        internal Groups(MoviesApi proxy)
        {
            this.proxy = proxy;
        }
        public virtual IdMemberships IdMemberships
        {
            get { return new IdMemberships(proxy); }
        }
        public virtual IdCollaborations IdCollaborations
        {
            get { return new IdCollaborations(proxy); }
        }

        /// <summary>
		/// Allows to create new Group
		/// </summary>
		/// <param name="groupspostrequestcontent"></param>
        public virtual async Task<Models.GroupsPostResponse> Post(Models.GroupsPostRequestContent groupspostrequestcontent)
        {

            var url = "groups";
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.GroupsPostRequestContent), groupspostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"name\": {      \"required\": false,      \"type\": \"string\"    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    }  }}", response.Content);
				}
					
			}

            return new Models.GroupsPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"name\": {      \"required\": false,      \"type\": \"string\"    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Allows to create new Group
		/// </summary>
		/// <param name="request">Models.GroupsPostRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.GroupsPostResponse> Post(Models.GroupsPostRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "groups";
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.GroupsPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"name\": {      \"required\": false,      \"type\": \"string\"    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    }  }}", response.Content);
				}
				
            }
            return new Models.GroupsPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"name\": {      \"required\": false,      \"type\": \"string\"    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Retrieves all of the groups for given user.
		/// </summary>
        public virtual async Task<Models.GroupsGetResponse> Get()
        {

            var url = "groups";
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" :         {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"name\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }         }          } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content);
				}
					
			}

            return new Models.GroupsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" :         {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"name\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }         }          } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Retrieves all of the groups for given user.
		/// </summary>
		/// <param name="request">ApiRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.GroupsGetResponse> Get(ApiRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "groups";
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" :         {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"name\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }         }          } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content);
				}
				
            }
            return new Models.GroupsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" :         {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"name\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }         }          } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Permanently deletes a specific group
		/// </summary>
		/// <param name="id"></param>
        public virtual async Task<ApiResponse> Delete(string id)
        {

            var url = "groups/{id}";
            url = url.Replace("{id}", id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Permanently deletes a specific group
		/// </summary>
		/// <param name="request">Models.GroupsDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.GroupsDeleteRequest request)
        {

            var url = "groups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

        /// <summary>
		/// used to update item
		/// </summary>
		/// <param name="idputrequestcontent"></param>
		/// <param name="id"></param>
        public virtual async Task<Models.GroupsPutResponse> Put(Models.IdPutRequestContent idputrequestcontent, string id)
        {

            var url = "groups/{id}";
            url = url.Replace("{id}", id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.IdPutRequestContent), idputrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"name\": {      \"required\": false,      \"type\": \"string\"    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    }  }}", response.Content);
				}
					
			}

            return new Models.GroupsPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"name\": {      \"required\": false,      \"type\": \"string\"    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// used to update item
		/// </summary>
		/// <param name="request">Models.GroupsPutRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.GroupsPutResponse> Put(Models.GroupsPutRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "groups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.IdPutRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"name\": {      \"required\": false,      \"type\": \"string\"    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    }  }}", response.Content);
				}
				
            }
            return new Models.GroupsPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"name\": {      \"required\": false,      \"type\": \"string\"    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    }  }}", response.Content), true)
                                            };
        }

    }

    public partial class GroupMemberships
    {
        private readonly MoviesApi proxy;

        internal GroupMemberships(MoviesApi proxy)
        {
            this.proxy = proxy;
        }

        /// <summary>
		/// Used to add a member to a Group.
		/// </summary>
		/// <param name="groupmembershipspostrequestcontent"></param>
        public virtual async Task<Models.GroupMembershipsPostResponse> Post(Models.GroupMembershipsPostRequestContent groupmembershipspostrequestcontent)
        {

            var url = "group_memberships";
            var req = new HttpRequestMessage(HttpMethod.Post, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.GroupMembershipsPostRequestContent), groupmembershipspostrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"type\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"id\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"user\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"login\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"group\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"role\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"created_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_at\" : {      \"type\" : \"string\" ,      \"required\" : false    }  }}", response.Content);
				}
					
			}

            return new Models.GroupMembershipsPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"type\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"id\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"user\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"login\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"group\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"role\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"created_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_at\" : {      \"type\" : \"string\" ,      \"required\" : false    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to add a member to a Group.
		/// </summary>
		/// <param name="request">Models.GroupMembershipsPostRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.GroupMembershipsPostResponse> Post(Models.GroupMembershipsPostRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "group_memberships";
            var req = new HttpRequestMessage(HttpMethod.Post, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.Headers != null)
            {
                foreach(var header in request.Headers.Headers)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, header.Value);
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.GroupMembershipsPostRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"type\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"id\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"user\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"login\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"group\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"role\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"created_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_at\" : {      \"type\" : \"string\" ,      \"required\" : false    }  }}", response.Content);
				}
				
            }
            return new Models.GroupMembershipsPostResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"type\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"id\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"user\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"login\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"group\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"role\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"created_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_at\" : {      \"type\" : \"string\" ,      \"required\" : false    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Deletes a specific group membership.
		/// </summary>
		/// <param name="id"></param>
        public virtual async Task<ApiResponse> Delete(string id)
        {

            var url = "group_memberships/{id}";
            url = url.Replace("{id}", id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);

            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };

        }

        /// <summary>
		/// Deletes a specific group membership.
		/// </summary>
		/// <param name="request">Models.GroupMembershipsDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.GroupMembershipsDeleteRequest request)
        {

            var url = "group_memberships/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Delete, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

        /// <summary>
		/// Used to update a group membership.
		/// </summary>
		/// <param name="idputrequestcontent"></param>
		/// <param name="id"></param>
        public virtual async Task<Models.GroupMembershipsPutResponse> Put(Models.IdPutRequestContent idputrequestcontent, string id)
        {

            var url = "group_memberships/{id}";
            url = url.Replace("{id}", id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            req.Content = new ObjectContent(typeof(Models.IdPutRequestContent), idputrequestcontent, new JsonMediaTypeFormatter());
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
					
			}

            return new Models.GroupMembershipsPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Used to update a group membership.
		/// </summary>
		/// <param name="request">Models.GroupMembershipsPutRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.GroupMembershipsPutResponse> Put(Models.GroupMembershipsPutRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "group_memberships/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Put, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = new JsonMediaTypeFormatter();

            req.Content = new ObjectContent(typeof(Models.IdPutRequestContent), request.Content, request.Formatter);
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content);
				}
				
            }
            return new Models.GroupMembershipsPutResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"type\": \"object\",  \"properties\": {    \"type\": {      \"required\": false,      \"type\": \"string\"    },    \"id\": {      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"created_at\": {      \"required\": false,      \"type\": \"string\"    },    \"modified_at\": {      \"required\": false,      \"type\": \"string\"    },    \"expires_at\": {      \"required\": false,      \"type\": \"null\"    },    \"status\": {      \"required\": false,      \"type\": \"string\"    },    \"accessible_by\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        },        \"login\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"role\": {      \"required\": false,      \"type\": \"string\"    },    \"acknowledged_at\": {      \"required\": false,      \"type\": \"string\"    },    \"item\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"type\": {          \"required\": false,          \"type\": \"string\"        },        \"id\": {          \"required\": false,          \"type\": \"string\"        },        \"sequence_id\": {          \"required\": false,          \"type\": \"string\"        },        \"etag\": {          \"required\": false,          \"type\": \"string\"        },        \"name\": {          \"required\": false,          \"type\": \"string\"        }      }    }  }}", response.Content), true)
                                            };
        }

        /// <summary>
		/// Fetches a specific group membership entry.
		/// </summary>
		/// <param name="id"></param>
        public virtual async Task<Models.GroupMembershipsGetResponse> Get(string id)
        {

            var url = "group_memberships/{id}";
            url = url.Replace("{id}", id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);
	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
	        var response = await proxy.Client.SendAsync(req);
			
			if (proxy.SchemaValidation.Enabled)
		    {
				if(proxy.SchemaValidation.RaiseExceptions) 
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"type\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"id\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"user\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"login\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"group\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"role\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"created_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_at\" : {      \"type\" : \"string\" ,      \"required\" : false    }  }}", response.Content);
				}
					
			}

            return new Models.GroupMembershipsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers, 
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"type\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"id\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"user\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"login\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"group\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"role\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"created_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_at\" : {      \"type\" : \"string\" ,      \"required\" : false    }  }}", response.Content), true)
                                            };

        }

        /// <summary>
		/// Fetches a specific group membership entry.
		/// </summary>
		/// <param name="request">Models.GroupMembershipsGetRequest</param>
		/// <param name="responseFormatters">response formmaters</param>
        public virtual async Task<Models.GroupMembershipsGetResponse> Get(Models.GroupMembershipsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "group_memberships/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            var req = new HttpRequestMessage(HttpMethod.Get, url);

	        if (string.IsNullOrEmpty(proxy.OAuthAccessToken))
				throw new InvalidOperationException("This API call is secured with OAuth, you must provide an access token (set OAuthAccessToken before calling this method)");
            req.Headers.Add("Authorization", "Bearer " + proxy.OAuthAccessToken);
            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					await SchemaValidator.ValidateWithExceptionAsync("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"type\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"id\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"user\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"login\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"group\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"role\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"created_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_at\" : {      \"type\" : \"string\" ,      \"required\" : false    }  }}", response.Content);
				}
				
            }
            return new Models.GroupMembershipsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => SchemaValidator.IsValid("{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"type\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"id\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"user\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"login\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"group\" : {      \"type\" : \"object\" ,      \"required\" : false ,      \"properties\" : {        \"type\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"id\" : {          \"type\" : \"string\" ,          \"required\" : false        } ,        \"name\" : {          \"type\" : \"string\" ,          \"required\" : false        }      }    } ,    \"role\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"created_at\" : {      \"type\" : \"string\" ,      \"required\" : false    } ,    \"modified_at\" : {      \"type\" : \"string\" ,      \"required\" : false    }  }}", response.Content), true)
                                            };
        }

    }

    /// <summary>
    /// Main class for grouping root resources. Nested resources are defined as properties. The constructor can optionally receive an URL and HttpClient instance to override the default ones.
    /// </summary>
    public partial class MoviesApi
    {

		public SchemaValidationSettings SchemaValidation { get; private set; } 

        protected readonly HttpClient client;
        public const string BaseUri = "https://api.box.com/{version}/";

        internal HttpClient Client { get { return client; } }




        public string OAuthAccessToken { get; set; }

		private string oauthAuthorizeUrl = "https://www.box.com/api/oauth2/authorize";
		public string OAuthAuthorizeUrl { get { return oauthAuthorizeUrl; } set { oauthAuthorizeUrl = value; } }

   		private string oauthAccessTokenUrl = "https://www.box.com/api/oauth2/token";
		public string OAuthAccessTokenUrl { get { return oauthAccessTokenUrl; } set { oauthAccessTokenUrl = value; } }

        public MoviesApi(string endpointUrl)
        {
            SchemaValidation = new SchemaValidationSettings
			{
				Enabled = true,
				RaiseExceptions = true
			};

			if(string.IsNullOrWhiteSpace(endpointUrl))
                throw new ArgumentException("You must specify the endpoint URL", "endpointUrl");

			if (endpointUrl.Contains("{"))
			{
				var regex = new Regex(@"\{([^\}]+)\}");
				var matches = regex.Matches(endpointUrl);
				var parameters = new List<string>();
				foreach (Match match in matches)
				{
					parameters.Add(match.Groups[1].Value);
				}
				throw new InvalidOperationException("Please replace parameter/s " + string.Join(", ", parameters) + " in the URL before passing it to the constructor ");
			}

            client = new HttpClient {BaseAddress = new Uri(endpointUrl)};
        }

        public MoviesApi(HttpClient httpClient)
        {
            if(httpClient.BaseAddress == null)
                throw new InvalidOperationException("You must set the BaseAddress property of the HttpClient instance");

            client = httpClient;

			SchemaValidation = new SchemaValidationSettings
			{
				Enabled = true,
				RaiseExceptions = true
			};
        }

        
        public virtual Folders Folders
        {
            get { return new Folders(this); }
        }
                
        public virtual FilesFileId FilesFileId
        {
            get { return new FilesFileId(this); }
        }
                
        public virtual SharedItems SharedItems
        {
            get { return new SharedItems(this); }
        }
                
        public virtual CommentsA CommentsA
        {
            get { return new CommentsA(this); }
        }
                
        public virtual CollaborationsA CollaborationsA
        {
            get { return new CollaborationsA(this); }
        }
                
        public virtual Search Search
        {
            get { return new Search(this); }
        }
                
        public virtual Events Events
        {
            get { return new Events(this); }
        }
                
        public virtual Users Users
        {
            get { return new Users(this); }
        }
                
        public virtual TasksA TasksA
        {
            get { return new TasksA(this); }
        }
                
        public virtual TaskAssignments TaskAssignments
        {
            get { return new TaskAssignments(this); }
        }
                
        public virtual Groups Groups
        {
            get { return new Groups(this); }
        }
                
        public virtual GroupMemberships GroupMemberships
        {
            get { return new GroupMemberships(this); }
        }
                


		public void AddDefaultRequestHeader(string name, string value)
		{
			client.DefaultRequestHeaders.Add(name, value);
		}

		public void AddDefaultRequestHeader(string name, IEnumerable<string> values)
		{
			client.DefaultRequestHeaders.Add(name, values);
		}


    }

} // end namespace







namespace Box.Models
{
    public partial class  Enterprise 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }


    } // end class

    public partial class  User 
    {
        /// <summary>
        /// For users is &apos;user&apos;.
        /// </summary>
		[JsonProperty("type")]
        public string Type { get; set; }

        /// <summary>
        /// A unique string identifying this user.
        /// </summary>
		[JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>
        /// The name of this user.
        /// </summary>
		[JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// The email address this user uses to login.
        /// </summary>
		[JsonProperty("login")]
        public string Login { get; set; }

        /// <summary>
        /// The time this user was created.
        /// </summary>
		[JsonProperty("created_at")]
        public string Created_at { get; set; }

        /// <summary>
        /// The time this user was last modified.
        /// </summary>
		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }

        /// <summary>
        /// This user&apos;s enterprise role.
        /// </summary>
		[JsonProperty("role")]
		[JsonConverter(typeof(StringEnumConverter))]
        public Role Role { get; set; }

        /// <summary>
        /// The language of this user. ISO 639-1 Language Code.
        /// </summary>
		[JsonProperty("language")]
        public string Language { get; set; }

        /// <summary>
        /// The user&apos;s total available space amount in bytes.
        /// </summary>
		[JsonProperty("space_amount")]
        public int Space_amount { get; set; }

        /// <summary>
        /// The amount of space in use by the user.
        /// </summary>
		[JsonProperty("space_used")]
        public int Space_used { get; set; }

        /// <summary>
        /// The maximum individual file size in bytes this user can have.
        /// </summary>
		[JsonProperty("max_upload_size")]
        public int Max_upload_size { get; set; }

        /// <summary>
        /// Whether this user can see other enterprise users in its contact list.
        /// </summary>
		[JsonProperty("can_see_managed_users")]
        public bool Can_see_managed_users { get; set; }

        /// <summary>
        /// Whether or not this user can use Box Sync
        /// </summary>
		[JsonProperty("is_sync_enabled")]
        public bool Is_sync_enabled { get; set; }

        /// <summary>
        /// Can be active or inactive.
        /// </summary>
		[JsonProperty("status")]
		[JsonConverter(typeof(StringEnumConverter))]
        public Status Status { get; set; }

        /// <summary>
        /// The user&apos;s job title.
        /// </summary>
		[JsonProperty("job_title")]
        public string Job_title { get; set; }

        /// <summary>
        /// The user&apos;s phone number.
        /// </summary>
		[JsonProperty("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// The user&apos;s address.
        /// </summary>
		[JsonProperty("address")]
        public string Address { get; set; }

        /// <summary>
        /// URL of this user&apos;s avatar image.
        /// </summary>
		[JsonProperty("avatar_url")]
        public string Avatar_url { get; set; }

        /// <summary>
        /// Whether to exempt this user from Enterprise device limits.
        /// </summary>
		[JsonProperty("is_exempt_from_device_limits")]
        public bool Is_exempt_from_device_limits { get; set; }

        /// <summary>
        /// Whether or not this user must use two-factor authentication.
        /// </summary>
		[JsonProperty("is_exempt_from_login_verification")]
        public bool Is_exempt_from_login_verification { get; set; }

        /// <summary>
        /// Mini representation of this user&apos;s enterprise, including the ID of its enterprise
        /// </summary>
		[JsonProperty("enterprise")]
        public Enterprise Enterprise { get; set; }


    } // end class

    public partial class  CreatedBy 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("login")]
        public string Login { get; set; }


    } // end class

    public partial class  Entries 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("is_reply_comment")]
        public bool Is_reply_comment { get; set; }

		[JsonProperty("message")]
        public string Message { get; set; }

		[JsonProperty("created_by")]
        public CreatedBy Created_by { get; set; }

		[JsonProperty("created_at")]
        public string Created_at { get; set; }


    } // end class

    public partial class  Item 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("sequence_id")]
        public string Sequence_id { get; set; }

		[JsonProperty("etag")]
        public string Etag { get; set; }

		[JsonProperty("sha1")]
        public string Sha1 { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }


    } // end class

    public partial class  AssignedTo 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("login")]
        public string Login { get; set; }


    } // end class

    public partial class  AssignedBy 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("login")]
        public string Login { get; set; }


    } // end class

    public partial class  ModifiedBy 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("login")]
        public string Login { get; set; }


    } // end class

    public partial class  OwnedBy 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("login")]
        public string Login { get; set; }


    } // end class

    public partial class  Parent 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("sequence_id")]
        public string Sequence_id { get; set; }

		[JsonProperty("etag")]
        public string Etag { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }


    } // end class

    public partial class  SharedLink 
    {
		[JsonProperty("access")]
        public string Access { get; set; }

		[JsonProperty("unshared_at")]
        public string Unshared_at { get; set; }

		[JsonProperty("permissions")]
        public Permissions Permissions { get; set; }

		[JsonProperty("permissions.download")]
        public bool PermissionsDotdownload { get; set; }

		[JsonProperty("permissions.preview")]
        public bool PermissionsDotpreview { get; set; }


    } // end class

    public partial class  AccessibleBy 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("login")]
        public string Login { get; set; }


    } // end class

    public partial class  Group 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("created_at")]
        public string Created_at { get; set; }

		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }


    } // end class

    public partial class  PathCollection 
    {
		[JsonProperty("total_count")]
        public decimal Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }


    } // end class

    public partial class  Permissions 
    {
		[JsonProperty("can_download")]
        public bool Can_download { get; set; }

		[JsonProperty("can_preview")]
        public bool Can_preview { get; set; }


    } // end class

    public partial class  FolderUploadEmail 
    {
		[JsonProperty("access")]
        public string Access { get; set; }

		[JsonProperty("email")]
        public string Email { get; set; }


    } // end class

    public partial class  ItemCollection 
    {
		[JsonProperty("total_count")]
        public decimal Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }

		[JsonProperty("offset")]
        public decimal Offset { get; set; }

		[JsonProperty("limit")]
        public decimal Limit { get; set; }


    } // end class

    public partial class  Folder 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("sequence_id")]
        public string Sequence_id { get; set; }

		[JsonProperty("etag")]
        public string Etag { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("created_at")]
        public string Created_at { get; set; }

		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }

		[JsonProperty("description")]
        public string Description { get; set; }

		[JsonProperty("size")]
        public decimal Size { get; set; }

		[JsonProperty("path_collection")]
        public PathCollection Path_collection { get; set; }

		[JsonProperty("created_by")]
        public CreatedBy Created_by { get; set; }

		[JsonProperty("modified_by")]
        public ModifiedBy Modified_by { get; set; }

		[JsonProperty("owned_by")]
        public OwnedBy Owned_by { get; set; }

		[JsonProperty("shared_link")]
        public SharedLink Shared_link { get; set; }

		[JsonProperty("folder_upload_email")]
        public FolderUploadEmail Folder_upload_email { get; set; }

		[JsonProperty("parent")]
        public Parent Parent { get; set; }

		[JsonProperty("item_status")]
        public string Item_status { get; set; }

		[JsonProperty("item_collection")]
        public ItemCollection Item_collection { get; set; }


    } // end class

    public partial class  File 
    {
        /// <summary>
        /// For files is &apos;file&apos;
        /// </summary>
		[JsonProperty("type")]
        public string Type { get; set; }

        /// <summary>
        /// Box&apos;s unique string identifying this file.
        /// </summary>
		[JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>
        /// A unique ID for use with the /events endpoint.
        /// </summary>
		[JsonProperty("sequence_id")]
        public string Sequence_id { get; set; }

        /// <summary>
        /// A unique string identifying the version of this file.
        /// </summary>
		[JsonProperty("etag")]
        public string Etag { get; set; }

        /// <summary>
        /// The name of this file.
        /// </summary>
		[JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// When this file was created on Box&apos;s servers.
        /// </summary>
		[JsonProperty("created_at")]
        public string Created_at { get; set; }

        /// <summary>
        /// When this file was last updated on the Box servers.
        /// </summary>
		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }

        /// <summary>
        /// The description of this file.
        /// </summary>
		[JsonProperty("description")]
        public string Description { get; set; }

        /// <summary>
        /// Size of this file in bytes.
        /// </summary>
		[JsonProperty("size")]
        public int Size { get; set; }

        /// <summary>
        /// The path of folders to this item, starting at the root.
        /// </summary>
		[JsonProperty("path_collection")]
        public PathCollection Path_collection { get; set; }

        /// <summary>
        /// When this file was last moved to the trash.
        /// </summary>
		[JsonProperty("trashed_at")]
        public string Trashed_at { get; set; }

        /// <summary>
        /// When this file will be permanently deleted.
        /// </summary>
		[JsonProperty("purged_at")]
        public string Purged_at { get; set; }

        /// <summary>
        /// When the content of this file was created.
        /// </summary>
		[JsonProperty("content_created_at")]
        public string Content_created_at { get; set; }

        /// <summary>
        /// When the content of this file was last modified.
        /// </summary>
		[JsonProperty("content_modified_at")]
        public string Content_modified_at { get; set; }

        /// <summary>
        /// The sha1 hash of this file.
        /// </summary>
		[JsonProperty("sha1")]
        public string Sha1 { get; set; }

        /// <summary>
        /// The number of comments on a file
        /// </summary>
		[JsonProperty("comment_count")]
        public int Comment_count { get; set; }

        /// <summary>
        /// Whether this folder will be synced by the Box sync clients or not.
        /// </summary>
		[JsonProperty("version_number")]
        public string Version_number { get; set; }

        /// <summary>
        /// The user who first created file.
        /// </summary>
		[JsonProperty("created_by")]
        public CreatedBy Created_by { get; set; }

        /// <summary>
        /// The user who last updated this file.
        /// </summary>
		[JsonProperty("modified_by")]
        public ModifiedBy Modified_by { get; set; }

        /// <summary>
        /// The user who owns this file.
        /// </summary>
		[JsonProperty("owned_by")]
        public OwnedBy Owned_by { get; set; }

        /// <summary>
        /// The shared link object for this file.
        /// </summary>
		[JsonProperty("shared_link")]
        public SharedLink Shared_link { get; set; }

        /// <summary>
        /// The folder this file is contained in.
        /// </summary>
		[JsonProperty("parent")]
        public Parent Parent { get; set; }

        /// <summary>
        /// Whether this item is deleted or not.
        /// </summary>
		[JsonProperty("item_status")]
        public string Item_status { get; set; }

		[JsonProperty("folder_upload_email")]
        public FolderUploadEmail Folder_upload_email { get; set; }

		[JsonProperty("item_collection")]
        public ItemCollection Item_collection { get; set; }


    } // end class

    public partial class  Comment 
    {
        /// <summary>
        /// For comments is &apos;comment&apos;.
        /// </summary>
		[JsonProperty("type")]
        public string Type { get; set; }

        /// <summary>
        /// A unique string identifying this comment.
        /// </summary>
		[JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>
        /// Whether or not this comment is a reply to another comment.
        /// </summary>
		[JsonProperty("is_reply_comment")]
        public bool Is_reply_comment { get; set; }

        /// <summary>
        /// The comment text that the user typed.
        /// </summary>
		[JsonProperty("message")]
        public string Message { get; set; }

        /// <summary>
        /// The string representing the comment text with @mentions included.
        /// </summary>
		[JsonProperty("tagged_message")]
        public string Tagged_message { get; set; }

        /// <summary>
        /// A mini user object representing the author of the comment.
        /// </summary>
		[JsonProperty("created_by")]
        public CreatedBy Created_by { get; set; }

        /// <summary>
        /// The time this comment was created.
        /// </summary>
		[JsonProperty("created_at")]
        public string Created_at { get; set; }

        /// <summary>
        /// The object this comment was placed on.
        /// </summary>
		[JsonProperty("item")]
        public Item Item { get; set; }

        /// <summary>
        /// The time this comment was last modified.
        /// </summary>
		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }


    } // end class

    public partial class  Task 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("type")]
        public string Type { get; set; }


    } // end class

    public partial class  AssignTo 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("login")]
        public string Login { get; set; }


    } // end class

    public partial class  TaskAssignmentCollection 
    {
		[JsonProperty("total_count")]
        public decimal Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }


    } // end class

    public partial class  FoldersPostRequestContent 
    {
        /// <summary>
        /// The new name for this item.
        /// </summary>
		[JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// The new parent folder for this item.
        /// </summary>
		[JsonProperty("parent")]
        public Parent Parent { get; set; }

        /// <summary>
        /// The id of the new parent folder.
        /// </summary>
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    public partial class  FolderIdPostRequestContent 
    {
        /// <summary>
        /// The new name for this item.
        /// </summary>
		[JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// The new parent folder for this item.
        /// </summary>
		[JsonProperty("parent")]
        public Parent Parent { get; set; }

        /// <summary>
        /// The id of the new parent folder.
        /// </summary>
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    public partial class  FolderIdPutRequestContent 
    {
        /// <summary>
        /// The desired name for the folder.
        /// </summary>
		[JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// The parent folder.
        /// </summary>
		[JsonProperty("parent")]
        public Parent Parent { get; set; }

        /// <summary>
        /// The ID of the parent folder.
        /// </summary>
		[JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>
        /// The description of the folder.
        /// </summary>
		[JsonProperty("description")]
        public string Description { get; set; }

        /// <summary>
        /// An object representing this item&apos;s shared link and associated permissions.
        /// </summary>
		[JsonProperty("shared_link")]
        public SharedLink Shared_link { get; set; }


    } // end class

    public partial class  CopyPostRequestContent 
    {
        /// <summary>
        /// The new name for this item.
        /// </summary>
		[JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// The new parent folder for this item.
        /// </summary>
		[JsonProperty("parent")]
        public Parent Parent { get; set; }

        /// <summary>
        /// The id of the new parent folder.
        /// </summary>
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    public partial class  FilesFileIdPostRequestContent 
    {
        /// <summary>
        /// The new name for this item.
        /// </summary>
		[JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// The new parent folder for this item.
        /// </summary>
		[JsonProperty("parent")]
        public Parent Parent { get; set; }

        /// <summary>
        /// The id of the new parent folder.
        /// </summary>
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    public partial class  FilesFileIdPutRequestContent 
    {
		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("description")]
        public string Description { get; set; }

		[JsonProperty("parent")]
        public Parent Parent { get; set; }

		[JsonProperty("shared_link")]
        public SharedLink Shared_link { get; set; }


    } // end class

    public partial class  CurrentPostRequestContent 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    public partial class  CommentsPostRequestContent 
    {
        /// <summary>
        /// The item that this comment will be placed on.
        /// </summary>
		[JsonProperty("item")]
        public Item Item { get; set; }

        /// <summary>
        /// The type of the item that this comment will be placed on.
        /// </summary>
		[JsonProperty("type")]
        public string Type { get; set; }

        /// <summary>
        /// The id of the item that this comment will be placed on.
        /// </summary>
		[JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>
        /// The text body of the comment.
        /// </summary>
		[JsonProperty("message")]
        public string Message { get; set; }


    } // end class

    public partial class  CommentIdPutRequestContent 
    {
        /// <summary>
        /// The desired text for the comment message.
        /// </summary>
		[JsonProperty("message")]
        public string Message { get; set; }


    } // end class

    public partial class  CollaborationsPostRequestContent 
    {
		[JsonProperty("accessible_by")]
        public AccessibleBy Accessible_by { get; set; }

		[JsonProperty("role")]
        public string Role { get; set; }

		[JsonProperty("item")]
        public Item Item { get; set; }


    } // end class

    public partial class  UsersPostRequestContent 
    {
        /// <summary>
        /// The email address this user uses to login.
        /// </summary>
		[JsonProperty("login")]
        public string Login { get; set; }

        /// <summary>
        /// The name of this user.
        /// </summary>
		[JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// This user&apos;s enterprise role.
        /// </summary>
		[JsonProperty("role")]
        public Role Role { get; set; }

        /// <summary>
        /// The language of this user. ISO 639-1 Language Code.
        /// </summary>
		[JsonProperty("language")]
        public string Language { get; set; }

        /// <summary>
        /// Whether or not this user can use Box Sync.
        /// </summary>
		[JsonProperty("is_sync_enabled")]
        public bool Is_sync_enabled { get; set; }

        /// <summary>
        /// The user&apos;s job title.
        /// </summary>
		[JsonProperty("job_title")]
        public string Job_title { get; set; }

        /// <summary>
        /// The user&apos;s phone number.
        /// </summary>
		[JsonProperty("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// The user&apos;s address.
        /// </summary>
		[JsonProperty("address")]
        public string Address { get; set; }

        /// <summary>
        /// The user&apos;s total available space amount in bytes.
        /// </summary>
		[JsonProperty("space_amount")]
        public decimal Space_amount { get; set; }

        /// <summary>
        /// Whether this user can see other enterprise users in its contact list.
        /// </summary>
		[JsonProperty("can_see_managed_users")]
        public bool Can_see_managed_users { get; set; }

        /// <summary>
        /// Can be &apos;active&apos; or &apos;inactive&apos;
        /// </summary>
		[JsonProperty("status")]
        public string Status { get; set; }

        /// <summary>
        /// Whether to exempt this user from Enterprise device limits.
        /// </summary>
		[JsonProperty("is_exempt_from_device_limits")]
        public bool Is_exempt_from_device_limits { get; set; }

        /// <summary>
        /// Whether or not this user must use two-factor authentication.
        /// </summary>
		[JsonProperty("is_exempt_from_login_verification")]
        public bool Is_exempt_from_login_verification { get; set; }


    } // end class

    public partial class  UserIdPutRequestContent 
    {
        /// <summary>
        /// Setting this to &apos;null&apos; will roll the user out of the enterprise and make them a free user.
        /// </summary>
		[JsonProperty("enterprise")]
        public string Enterprise { get; set; }

        /// <summary>
        /// The name of this user.
        /// </summary>
		[JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// This user&apos;s enterprise role. Can be &apos;coadmin&apos; or &apos;user&apos;.
        /// </summary>
		[JsonProperty("role")]
        public string Role { get; set; }

        /// <summary>
        /// The language of this user. ISO 639-1 Language Code.
        /// </summary>
		[JsonProperty("language")]
        public string Language { get; set; }

        /// <summary>
        /// Whether or not this user can use Box Sync.
        /// </summary>
		[JsonProperty("is_sync_enabled")]
        public bool Is_sync_enabled { get; set; }

        /// <summary>
        /// The user&apos;s job title.
        /// </summary>
		[JsonProperty("job_title")]
        public string Job_title { get; set; }

        /// <summary>
        /// The user&apos;s phone number.
        /// </summary>
		[JsonProperty("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// The user&apos;s address.
        /// </summary>
		[JsonProperty("address")]
        public string Address { get; set; }

        /// <summary>
        /// The user&apos;s total available space amount in byte. A value of &apos;-1&apos; grants unlimited storage.
        /// </summary>
		[JsonProperty("space_amount")]
        public decimal Space_amount { get; set; }

        /// <summary>
        /// Whether this user can see other enterprise users in its contact list.
        /// </summary>
		[JsonProperty("can_see_managed_users")]
        public bool Can_see_managed_users { get; set; }

        /// <summary>
        /// Can be &apos;active&apos; or &apos;inactive&apos;.
        /// </summary>
		[JsonProperty("status")]
        public string Status { get; set; }

        /// <summary>
        /// Whether to exempt this user from Enterprise device limits.
        /// </summary>
		[JsonProperty("is_exempt_from_device_limits")]
        public bool Is_exempt_from_device_limits { get; set; }

        /// <summary>
        /// Whether or not this user must use two-factor authentication.
        /// </summary>
		[JsonProperty("is_exempt_from_login_verification")]
        public bool Is_exempt_from_login_verification { get; set; }

        /// <summary>
        /// Whether or not the user is required to reset password.
        /// </summary>
		[JsonProperty("is_password_reset_required")]
        public bool Is_password_reset_required { get; set; }


    } // end class

    public partial class  EmailAliasesPostRequestContent 
    {
        /// <summary>
        /// The email address to add to the account as an alias.
        /// </summary>
		[JsonProperty("email")]
        public string Email { get; set; }


    } // end class

    public partial class  FoldersFolderIdPutRequestContent 
    {
        /// <summary>
        /// The user who the folder will be transferred to.
        /// </summary>
		[JsonProperty("owned_by")]
        public string Owned_by { get; set; }

        /// <summary>
        /// The ID of the user who the folder will be transferred to.
        /// </summary>
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    public partial class  TasksPostRequestContent 
    {
		[JsonProperty("accessible_by")]
        public AccessibleBy Accessible_by { get; set; }

		[JsonProperty("role")]
        public string Role { get; set; }

		[JsonProperty("item")]
        public Item Item { get; set; }


    } // end class

    public partial class  TaskIdPutRequestContent 
    {
        /// <summary>
        /// The action the task assignee will be prompted to do. Can be &apos;review&apos;.
        /// </summary>
		[JsonProperty("action")]
        public string Action { get; set; }

        /// <summary>
        /// An optional message to include with the task.
        /// </summary>
		[JsonProperty("message")]
        public string Message { get; set; }

        /// <summary>
        /// The day at which this task is due.
        /// </summary>
		[JsonProperty("due_at")]
        public string Due_at { get; set; }


    } // end class

    public partial class  TaskAssignmentsPostRequestContent 
    {
		[JsonProperty("task")]
        public Task Task { get; set; }

		[JsonProperty("assign_to")]
        public AssignTo Assign_to { get; set; }


    } // end class

    public partial class  TaskAssignmentsIdPutRequestContent 
    {
        /// <summary>
        /// A message from the assignee about this task.
        /// </summary>
		[JsonProperty("message")]
        public string Message { get; set; }

        /// <summary>
        /// Can be &apos;completed&apos;, &apos;incomplete&apos;, &apos;approved&apos;, or &apos;rejected&apos;.
        /// </summary>
		[JsonProperty("resolution_state")]
        public string Resolution_state { get; set; }


    } // end class

    public partial class  GroupsPostRequestContent 
    {
		[JsonProperty("name")]
        public string Name { get; set; }


    } // end class

    public partial class  IdPutRequestContent 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("created_at")]
        public string Created_at { get; set; }

		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }


    } // end class

    public partial class  GroupMembershipsPostRequestContent 
    {
		[JsonProperty("user")]
        public User User { get; set; }

		[JsonProperty("group")]
        public Group Group { get; set; }


    } // end class

    public partial class  TaskAssignment 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("item")]
        public Item Item { get; set; }

		[JsonProperty("assigned_to")]
        public AssignedTo Assigned_to { get; set; }

		[JsonProperty("message")]
        public string Message { get; set; }

		[JsonProperty("completed_at")]
        public string Completed_at { get; set; }

		[JsonProperty("assigned_at")]
        public string Assigned_at { get; set; }

		[JsonProperty("reminded_at")]
        public string Reminded_at { get; set; }

		[JsonProperty("resolution_state")]
        public string Resolution_state { get; set; }

		[JsonProperty("assigned_by")]
        public AssignedBy Assigned_by { get; set; }


    } // end class

    public partial class  Collaboration 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("created_by")]
        public CreatedBy Created_by { get; set; }

		[JsonProperty("created_at")]
        public string Created_at { get; set; }

		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }

		[JsonProperty("status")]
        public string Status { get; set; }

		[JsonProperty("accessible_by")]
        public AccessibleBy Accessible_by { get; set; }

		[JsonProperty("role")]
        public string Role { get; set; }

		[JsonProperty("acknowledged_at")]
        public string Acknowledged_at { get; set; }

		[JsonProperty("item")]
        public Item Item { get; set; }


    } // end class

    public partial class  FolderIdPostCreatedResponseContent 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("sequence_id")]
        public string Sequence_id { get; set; }

		[JsonProperty("etag")]
        public string Etag { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("created_at")]
        public string Created_at { get; set; }

		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }

		[JsonProperty("description")]
        public string Description { get; set; }

		[JsonProperty("size")]
        public decimal Size { get; set; }

		[JsonProperty("path_collection")]
        public PathCollection Path_collection { get; set; }

		[JsonProperty("created_by")]
        public CreatedBy Created_by { get; set; }

		[JsonProperty("modified_by")]
        public ModifiedBy Modified_by { get; set; }

		[JsonProperty("owned_by")]
        public OwnedBy Owned_by { get; set; }

		[JsonProperty("shared_link")]
        public SharedLink Shared_link { get; set; }

		[JsonProperty("folder_upload_email")]
        public FolderUploadEmail Folder_upload_email { get; set; }

		[JsonProperty("parent")]
        public Parent Parent { get; set; }

		[JsonProperty("item_status")]
        public string Item_status { get; set; }

		[JsonProperty("item_collection")]
        public ItemCollection Item_collection { get; set; }


    } // end class

    public partial class  ItemsGetOKResponseContent 
    {
		[JsonProperty("total_count")]
        public int Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }

		[JsonProperty("offset")]
        public int Offset { get; set; }

		[JsonProperty("limit")]
        public int Limit { get; set; }


    } // end class

    public partial class  CopyPostOKResponseContent 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("sequence_id")]
        public string Sequence_id { get; set; }

		[JsonProperty("etag")]
        public string Etag { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("created_at")]
        public string Created_at { get; set; }

		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }

		[JsonProperty("description")]
        public string Description { get; set; }

		[JsonProperty("size")]
        public decimal Size { get; set; }

		[JsonProperty("path_collection")]
        public PathCollection Path_collection { get; set; }

		[JsonProperty("created_by")]
        public CreatedBy Created_by { get; set; }

		[JsonProperty("modified_by")]
        public ModifiedBy Modified_by { get; set; }

		[JsonProperty("owned_by")]
        public OwnedBy Owned_by { get; set; }

		[JsonProperty("shared_link")]
        public SharedLink Shared_link { get; set; }

		[JsonProperty("folder_upload_email")]
        public FolderUploadEmail Folder_upload_email { get; set; }

		[JsonProperty("parent")]
        public Parent Parent { get; set; }

		[JsonProperty("item_status")]
        public string Item_status { get; set; }

		[JsonProperty("item_collection")]
        public ItemCollection Item_collection { get; set; }


    } // end class

    public partial class  CollaborationsGetOKResponseContent 
    {
		[JsonProperty("total_count")]
        public int Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }


    } // end class

    public partial class  TrashGetOKResponseContent 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("sequence_id")]
        public string Sequence_id { get; set; }

		[JsonProperty("etag")]
        public string Etag { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("created_at")]
        public string Created_at { get; set; }

		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }

		[JsonProperty("description")]
        public string Description { get; set; }

		[JsonProperty("size")]
        public decimal Size { get; set; }

		[JsonProperty("path_collection")]
        public PathCollection Path_collection { get; set; }

		[JsonProperty("created_by")]
        public CreatedBy Created_by { get; set; }

		[JsonProperty("modified_by")]
        public ModifiedBy Modified_by { get; set; }

		[JsonProperty("owned_by")]
        public OwnedBy Owned_by { get; set; }

		[JsonProperty("shared_link")]
        public SharedLink Shared_link { get; set; }

		[JsonProperty("folder_upload_email")]
        public FolderUploadEmail Folder_upload_email { get; set; }

		[JsonProperty("parent")]
        public Parent Parent { get; set; }

		[JsonProperty("item_status")]
        public string Item_status { get; set; }

		[JsonProperty("item_collection")]
        public ItemCollection Item_collection { get; set; }


    } // end class

    public partial class  TrashItemsGetOKResponseContent 
    {
		[JsonProperty("total_count")]
        public int Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }

		[JsonProperty("offset")]
        public int Offset { get; set; }

		[JsonProperty("limit")]
        public int Limit { get; set; }


    } // end class

    public partial class  FilesFileIdPostCreatedResponseContent 
    {
        /// <summary>
        /// For files is &apos;file&apos;
        /// </summary>
		[JsonProperty("type")]
        public string Type { get; set; }

        /// <summary>
        /// Box&apos;s unique string identifying this file.
        /// </summary>
		[JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>
        /// A unique ID for use with the /events endpoint.
        /// </summary>
		[JsonProperty("sequence_id")]
        public string Sequence_id { get; set; }

        /// <summary>
        /// A unique string identifying the version of this file.
        /// </summary>
		[JsonProperty("etag")]
        public string Etag { get; set; }

        /// <summary>
        /// The name of this file.
        /// </summary>
		[JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// When this file was created on Box&apos;s servers.
        /// </summary>
		[JsonProperty("created_at")]
        public string Created_at { get; set; }

        /// <summary>
        /// When this file was last updated on the Box servers.
        /// </summary>
		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }

        /// <summary>
        /// The description of this file.
        /// </summary>
		[JsonProperty("description")]
        public string Description { get; set; }

        /// <summary>
        /// Size of this file in bytes.
        /// </summary>
		[JsonProperty("size")]
        public int Size { get; set; }

        /// <summary>
        /// The path of folders to this item, starting at the root.
        /// </summary>
		[JsonProperty("path_collection")]
        public PathCollection Path_collection { get; set; }

        /// <summary>
        /// When this file was last moved to the trash.
        /// </summary>
		[JsonProperty("trashed_at")]
        public string Trashed_at { get; set; }

        /// <summary>
        /// When this file will be permanently deleted.
        /// </summary>
		[JsonProperty("purged_at")]
        public string Purged_at { get; set; }

        /// <summary>
        /// When the content of this file was created.
        /// </summary>
		[JsonProperty("content_created_at")]
        public string Content_created_at { get; set; }

        /// <summary>
        /// When the content of this file was last modified.
        /// </summary>
		[JsonProperty("content_modified_at")]
        public string Content_modified_at { get; set; }

        /// <summary>
        /// The sha1 hash of this file.
        /// </summary>
		[JsonProperty("sha1")]
        public string Sha1 { get; set; }

        /// <summary>
        /// The number of comments on a file
        /// </summary>
		[JsonProperty("comment_count")]
        public int Comment_count { get; set; }

        /// <summary>
        /// Whether this folder will be synced by the Box sync clients or not.
        /// </summary>
		[JsonProperty("version_number")]
        public string Version_number { get; set; }

        /// <summary>
        /// The user who first created file.
        /// </summary>
		[JsonProperty("created_by")]
        public CreatedBy Created_by { get; set; }

        /// <summary>
        /// The user who last updated this file.
        /// </summary>
		[JsonProperty("modified_by")]
        public ModifiedBy Modified_by { get; set; }

        /// <summary>
        /// The user who owns this file.
        /// </summary>
		[JsonProperty("owned_by")]
        public OwnedBy Owned_by { get; set; }

        /// <summary>
        /// The shared link object for this file.
        /// </summary>
		[JsonProperty("shared_link")]
        public SharedLink Shared_link { get; set; }

        /// <summary>
        /// The folder this file is contained in.
        /// </summary>
		[JsonProperty("parent")]
        public Parent Parent { get; set; }

        /// <summary>
        /// Whether this item is deleted or not.
        /// </summary>
		[JsonProperty("item_status")]
        public string Item_status { get; set; }

		[JsonProperty("folder_upload_email")]
        public FolderUploadEmail Folder_upload_email { get; set; }

		[JsonProperty("item_collection")]
        public ItemCollection Item_collection { get; set; }


    } // end class

    public partial class  VersionsGetOKResponseContent 
    {
		[JsonProperty("total_count")]
        public int Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }


    } // end class

    public partial class  CurrentPostCreatedResponseContent 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("sha1")]
        public string Sha1 { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("size")]
        public decimal Size { get; set; }

		[JsonProperty("created_at")]
        public string Created_at { get; set; }

		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }

		[JsonProperty("modified_by")]
        public ModifiedBy Modified_by { get; set; }


    } // end class

    public partial class  TasksGetOKResponseContent 
    {
		[JsonProperty("total_count")]
        public int Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }


    } // end class

    public partial class  CommentsGetOKResponseContent 
    {
		[JsonProperty("total_count")]
        public decimal Total_count { get; set; }

		[JsonProperty("offset")]
        public decimal Offset { get; set; }

		[JsonProperty("limit")]
        public decimal Limit { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }


    } // end class

    public partial class  SharedItemsGetOKResponseContent 
    {
        /// <summary>
        /// For files is &apos;file&apos;
        /// </summary>
		[JsonProperty("type")]
        public string Type { get; set; }

        /// <summary>
        /// Box&apos;s unique string identifying this file.
        /// </summary>
		[JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>
        /// A unique ID for use with the /events endpoint.
        /// </summary>
		[JsonProperty("sequence_id")]
        public string Sequence_id { get; set; }

        /// <summary>
        /// A unique string identifying the version of this file.
        /// </summary>
		[JsonProperty("etag")]
        public string Etag { get; set; }

        /// <summary>
        /// The name of this file.
        /// </summary>
		[JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// When this file was created on Box&apos;s servers.
        /// </summary>
		[JsonProperty("created_at")]
        public string Created_at { get; set; }

        /// <summary>
        /// When this file was last updated on the Box servers.
        /// </summary>
		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }

        /// <summary>
        /// The description of this file.
        /// </summary>
		[JsonProperty("description")]
        public string Description { get; set; }

        /// <summary>
        /// Size of this file in bytes.
        /// </summary>
		[JsonProperty("size")]
        public int Size { get; set; }

        /// <summary>
        /// The path of folders to this item, starting at the root.
        /// </summary>
		[JsonProperty("path_collection")]
        public PathCollection Path_collection { get; set; }

        /// <summary>
        /// When this file was last moved to the trash.
        /// </summary>
		[JsonProperty("trashed_at")]
        public string Trashed_at { get; set; }

        /// <summary>
        /// When this file will be permanently deleted.
        /// </summary>
		[JsonProperty("purged_at")]
        public string Purged_at { get; set; }

        /// <summary>
        /// When the content of this file was created.
        /// </summary>
		[JsonProperty("content_created_at")]
        public string Content_created_at { get; set; }

        /// <summary>
        /// When the content of this file was last modified.
        /// </summary>
		[JsonProperty("content_modified_at")]
        public string Content_modified_at { get; set; }

        /// <summary>
        /// The sha1 hash of this file.
        /// </summary>
		[JsonProperty("sha1")]
        public string Sha1 { get; set; }

        /// <summary>
        /// The number of comments on a file
        /// </summary>
		[JsonProperty("comment_count")]
        public int Comment_count { get; set; }

        /// <summary>
        /// Whether this folder will be synced by the Box sync clients or not.
        /// </summary>
		[JsonProperty("version_number")]
        public string Version_number { get; set; }

        /// <summary>
        /// The user who first created file.
        /// </summary>
		[JsonProperty("created_by")]
        public CreatedBy Created_by { get; set; }

        /// <summary>
        /// The user who last updated this file.
        /// </summary>
		[JsonProperty("modified_by")]
        public ModifiedBy Modified_by { get; set; }

        /// <summary>
        /// The user who owns this file.
        /// </summary>
		[JsonProperty("owned_by")]
        public OwnedBy Owned_by { get; set; }

        /// <summary>
        /// The shared link object for this file.
        /// </summary>
		[JsonProperty("shared_link")]
        public SharedLink Shared_link { get; set; }

        /// <summary>
        /// The folder this file is contained in.
        /// </summary>
		[JsonProperty("parent")]
        public Parent Parent { get; set; }

        /// <summary>
        /// Whether this item is deleted or not.
        /// </summary>
		[JsonProperty("item_status")]
        public string Item_status { get; set; }

		[JsonProperty("folder_upload_email")]
        public FolderUploadEmail Folder_upload_email { get; set; }

		[JsonProperty("item_collection")]
        public ItemCollection Item_collection { get; set; }


    } // end class

    public partial class  CommentsPostOKResponseContent 
    {
		[JsonProperty("total_count")]
        public decimal Total_count { get; set; }

		[JsonProperty("offset")]
        public decimal Offset { get; set; }

		[JsonProperty("limit")]
        public decimal Limit { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }


    } // end class

    public partial class  IdPutOKResponseContent 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("created_by")]
        public CreatedBy Created_by { get; set; }

		[JsonProperty("created_at")]
        public string Created_at { get; set; }

		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }

		[JsonProperty("status")]
        public string Status { get; set; }

		[JsonProperty("accessible_by")]
        public AccessibleBy Accessible_by { get; set; }

		[JsonProperty("role")]
        public string Role { get; set; }

		[JsonProperty("acknowledged_at")]
        public string Acknowledged_at { get; set; }

		[JsonProperty("item")]
        public Item Item { get; set; }


    } // end class

    public partial class  SearchGetOKResponseContent 
    {
		[JsonProperty("total_count")]
        public decimal Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }

		[JsonProperty("limit")]
        public decimal Limit { get; set; }

		[JsonProperty("offset")]
        public decimal Offset { get; set; }


    } // end class

    public partial class  EventsGetOKResponseContent 
    {
		[JsonProperty("chunk_size")]
        public int Chunk_size { get; set; }

		[JsonProperty("next_stream_position")]
        public int Next_stream_position { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }


    } // end class

    public partial class  UsersGetOKResponseContent 
    {
		[JsonProperty("total_count")]
        public int Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }


    } // end class

    public partial class  MeGetOKResponseContent 
    {
        /// <summary>
        /// For users is &apos;user&apos;.
        /// </summary>
		[JsonProperty("type")]
        public string Type { get; set; }

        /// <summary>
        /// A unique string identifying this user.
        /// </summary>
		[JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>
        /// The name of this user.
        /// </summary>
		[JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// The email address this user uses to login.
        /// </summary>
		[JsonProperty("login")]
        public string Login { get; set; }

        /// <summary>
        /// The time this user was created.
        /// </summary>
		[JsonProperty("created_at")]
        public string Created_at { get; set; }

        /// <summary>
        /// The time this user was last modified.
        /// </summary>
		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }

        /// <summary>
        /// This user&apos;s enterprise role.
        /// </summary>
		[JsonProperty("role")]
		[JsonConverter(typeof(StringEnumConverter))]
        public Role Role { get; set; }

        /// <summary>
        /// The language of this user. ISO 639-1 Language Code.
        /// </summary>
		[JsonProperty("language")]
        public string Language { get; set; }

        /// <summary>
        /// The user&apos;s total available space amount in bytes.
        /// </summary>
		[JsonProperty("space_amount")]
        public int Space_amount { get; set; }

        /// <summary>
        /// The amount of space in use by the user.
        /// </summary>
		[JsonProperty("space_used")]
        public int Space_used { get; set; }

        /// <summary>
        /// The maximum individual file size in bytes this user can have.
        /// </summary>
		[JsonProperty("max_upload_size")]
        public int Max_upload_size { get; set; }

        /// <summary>
        /// Whether this user can see other enterprise users in its contact list.
        /// </summary>
		[JsonProperty("can_see_managed_users")]
        public bool Can_see_managed_users { get; set; }

        /// <summary>
        /// Whether or not this user can use Box Sync
        /// </summary>
		[JsonProperty("is_sync_enabled")]
        public bool Is_sync_enabled { get; set; }

        /// <summary>
        /// Can be active or inactive.
        /// </summary>
		[JsonProperty("status")]
		[JsonConverter(typeof(StringEnumConverter))]
        public Status Status { get; set; }

        /// <summary>
        /// The user&apos;s job title.
        /// </summary>
		[JsonProperty("job_title")]
        public string Job_title { get; set; }

        /// <summary>
        /// The user&apos;s phone number.
        /// </summary>
		[JsonProperty("phone")]
        public string Phone { get; set; }

        /// <summary>
        /// The user&apos;s address.
        /// </summary>
		[JsonProperty("address")]
        public string Address { get; set; }

        /// <summary>
        /// URL of this user&apos;s avatar image.
        /// </summary>
		[JsonProperty("avatar_url")]
        public string Avatar_url { get; set; }

        /// <summary>
        /// Whether to exempt this user from Enterprise device limits.
        /// </summary>
		[JsonProperty("is_exempt_from_device_limits")]
        public bool Is_exempt_from_device_limits { get; set; }

        /// <summary>
        /// Whether or not this user must use two-factor authentication.
        /// </summary>
		[JsonProperty("is_exempt_from_login_verification")]
        public bool Is_exempt_from_login_verification { get; set; }

        /// <summary>
        /// Mini representation of this user&apos;s enterprise, including the ID of its enterprise
        /// </summary>
		[JsonProperty("enterprise")]
        public Enterprise Enterprise { get; set; }


    } // end class

    public partial class  EmailAliasesPostOKResponseContent 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("is_confirmed")]
        public bool Is_confirmed { get; set; }

		[JsonProperty("email")]
        public string Email { get; set; }


    } // end class

    public partial class  EmailAliasesGetOKResponseContent 
    {
		[JsonProperty("total_count")]
        public int Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }


    } // end class

    public partial class  FoldersFolderIdPutOKResponseContent 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("sequence_id")]
        public string Sequence_id { get; set; }

		[JsonProperty("etag")]
        public string Etag { get; set; }

		[JsonProperty("name")]
        public string Name { get; set; }

		[JsonProperty("created_at")]
        public string Created_at { get; set; }

		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }

		[JsonProperty("description")]
        public string Description { get; set; }

		[JsonProperty("size")]
        public decimal Size { get; set; }

		[JsonProperty("path_collection")]
        public PathCollection Path_collection { get; set; }

		[JsonProperty("created_by")]
        public CreatedBy Created_by { get; set; }

		[JsonProperty("modified_by")]
        public ModifiedBy Modified_by { get; set; }

		[JsonProperty("owned_by")]
        public OwnedBy Owned_by { get; set; }

		[JsonProperty("shared_link")]
        public SharedLink Shared_link { get; set; }

		[JsonProperty("folder_upload_email")]
        public FolderUploadEmail Folder_upload_email { get; set; }

		[JsonProperty("parent")]
        public Parent Parent { get; set; }

		[JsonProperty("item_status")]
        public string Item_status { get; set; }

		[JsonProperty("item_collection")]
        public ItemCollection Item_collection { get; set; }


    } // end class

    public partial class  MembershipsGetOKResponseContent 
    {
		[JsonProperty("total_count")]
        public decimal Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }

		[JsonProperty("offset")]
        public decimal Offset { get; set; }

		[JsonProperty("limit")]
        public decimal Limit { get; set; }


    } // end class

    public partial class  AssignmentsGetOKResponseContent 
    {
		[JsonProperty("total_count")]
        public int Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }


    } // end class

    public partial class  GroupsGetOKResponseContent 
    {
		[JsonProperty("total_count")]
        public decimal Total_count { get; set; }

		[JsonProperty("entries")]
        public IList<Entries> Entries { get; set; }

		[JsonProperty("limit")]
        public decimal Limit { get; set; }

		[JsonProperty("offset")]
        public decimal Offset { get; set; }


    } // end class

    public partial class  GroupMembershipsPostCreatedResponseContent 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("user")]
        public User User { get; set; }

		[JsonProperty("group")]
        public Group Group { get; set; }

		[JsonProperty("role")]
        public string Role { get; set; }

		[JsonProperty("created_at")]
        public string Created_at { get; set; }

		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }


    } // end class

    public partial class  IdGetOKResponseContent 
    {
		[JsonProperty("type")]
        public string Type { get; set; }

		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("user")]
        public User User { get; set; }

		[JsonProperty("group")]
        public Group Group { get; set; }

		[JsonProperty("role")]
        public string Role { get; set; }

		[JsonProperty("created_at")]
        public string Created_at { get; set; }

		[JsonProperty("modified_at")]
        public string Modified_at { get; set; }


    } // end class

    /// <summary>
    /// Multiple Response Types Folder, FolderIdPostCreatedResponseContent
    /// </summary>
    public partial class  MultipleFolderIdPost : ApiMultipleResponse
    {
        static readonly Dictionary<HttpStatusCode, string> schemas = new Dictionary<HttpStatusCode, string>
        {
			{ (HttpStatusCode)200, "{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}"},
			{ (HttpStatusCode)201, "{  \"type\": \"object\",  \"required\": true,  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"type\": \"string\",      \"required\": false    },    \"id\": {      \"type\": \"string\",      \"required\": false    },    \"sequence_id\": {      \"type\": \"string\",      \"required\": false    },    \"etag\": {      \"type\": \"string\",      \"required\": false    },    \"name\": {      \"type\": \"string\",      \"required\": false    },    \"created_at\": {      \"type\": \"string\",      \"required\": false    },    \"modified_at\": {      \"type\": \"string\",      \"required\": false    },    \"description\": {      \"type\": \"string\",      \"required\": false    },    \"size\": {      \"type\": \"number\",      \"required\": false    },    \"path_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\",            \"items\": {              \"type\": \"object\",              \"properties\": {                \"type\": {                  \"type\": \"string\",                  \"required\": false                },                \"id\": {                  \"type\": \"string\",                  \"required\": false                },                \"sequence_id\": {                  \"type\": \"object\",                  \"required\": false                },                \"etag\": {                  \"type\": \"object\",                  \"required\": false                },                \"name\": {                  \"type\": \"string\",                  \"required\": false                }              }            }          }        }      }    },    \"created_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        },        \"login\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"url\": {          \"type\": \"string\",          \"required\": false        },        \"download_url\": {          \"type\": \"string\",          \"required\": false        },        \"vanity_url\": {          \"type\": \"object\",          \"required\": false        },        \"is_password_enabled\": {          \"type\": \"boolean\",          \"required\": false        },        \"unshared_at\": {          \"type\": \"object\",          \"required\": false        },        \"download_count\": {          \"type\": \"number\",          \"required\": false        },        \"preview_count\": {          \"type\": \"number\",          \"required\": false        },        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"permissions\": {          \"type\": \"object\",          \"required\": false,          \"properties\": {            \"can_download\": {              \"type\": \"boolean\",              \"required\": false            },            \"can_preview\": {              \"type\": \"boolean\",              \"required\": false            }          }        }      }    },    \"folder_upload_email\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"access\": {          \"type\": \"string\",          \"required\": false        },        \"email\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"parent\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"type\": {          \"type\": \"string\",          \"required\": false        },        \"id\": {          \"type\": \"string\",          \"required\": false        },        \"sequence_id\": {          \"type\": \"object\",          \"required\": false        },        \"etag\": {          \"type\": \"object\",          \"required\": false        },        \"name\": {          \"type\": \"string\",          \"required\": false        }      }    },    \"item_status\": {      \"type\": \"string\",      \"required\": false    },    \"item_collection\": {      \"type\": \"object\",      \"required\": false,      \"properties\": {        \"total_count\": {          \"type\": \"number\",          \"required\": false        },        \"entries\": {          \"type\": \"array\",          \"required\": false,          \"items\": {            \"type\": \"array\"          }        },        \"offset\": {          \"type\": \"number\",          \"required\": false        },        \"limit\": {          \"type\": \"number\",          \"required\": false        }      }    }  }}"},
		};
        
		public static string GetSchema(HttpStatusCode statusCode)
        {
            return schemas.ContainsKey(statusCode) ? schemas[statusCode] : string.Empty;
        }
        
        public MultipleFolderIdPost()
        {
            names.Add((HttpStatusCode)200, "Folder");
            types.Add((HttpStatusCode)200, typeof(Folder));
            names.Add((HttpStatusCode)201, "FolderIdPostCreatedResponseContent");
            types.Add((HttpStatusCode)201, typeof(FolderIdPostCreatedResponseContent));
        }
        public Folder Folder { get; set; }

        /// <summary>
        /// Item was succesfully created. 
        /// </summary>
        public FolderIdPostCreatedResponseContent FolderIdPostCreatedResponseContent { get; set; }


    } // end class

    /// <summary>
    /// Multiple Response Types File, FilesFileIdPostCreatedResponseContent
    /// </summary>
    public partial class  MultipleFilesFileIdPost : ApiMultipleResponse
    {
        static readonly Dictionary<HttpStatusCode, string> schemas = new Dictionary<HttpStatusCode, string>
        {
			{ (HttpStatusCode)200, "{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}"},
			{ (HttpStatusCode)201, "{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"properties\": {    \"type\": {      \"description\": \"For files is 'file'\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"Box's unique string identifying this file.\",      \"type\": \"string\"    },    \"sequence_id\": {      \"description\": \"A unique ID for use with the /events endpoint.\",      \"type\": \"string\"    },    \"etag\": {      \"description\": \"A unique string identifying the version of this file.\",      \"type\": \"string\"    },    \"name\": {      \"description\": \"The name of this file.\",      \"type\": \"string\"    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"When this file was created on Box's servers.\"    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"When this file was last updated on the Box servers.\"    },    \"description\": {      \"description\": \"The description of this file.\",      \"type\": \"string\"    },    \"size\": {      \"description\": \"Size of this file in bytes.\",      \"type\": \"integer\"    },    \"path_collection\": {      \"type\": \"object\",      \"paths\": {        \"properties\": {          \"total_count\": {            \"type\": \"integer\"          },          \"entries\": {            \"properties\": {              \"type\": {                \"type\": \"string\"              },              \"id\": {                \"type\": \"string\"              },              \"sequence_id\": {                \"type\": \"string\"              },              \"etag\": {                \"type\": \"string\"              },              \"name\": {                \"type\": \"string\"              }            },            \"type\": \"array\"          },          \"description\": \"Array of entries.\",          \"type\": \"array\"        },        \"type\": \"object\"      },      \"description\": \"The path of folders to this item, starting at the root.\"    },    \"trashed_at\": {      \"type\": \"string\",      \"description\": \"When this file was last moved to the trash.\"    },    \"purged_at\": {      \"type\": \"string\",      \"description\": \"When this file will be permanently deleted.\"    },    \"content_created_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was created.\"    },    \"content_modified_at\": {      \"type\": \"string\",      \"description\": \"When the content of this file was last modified.\"    },    \"sha1\": {      \"description\": \"The sha1 hash of this file.\",      \"type\": \"string\"    },    \"comment_count\": {      \"description\": \"The number of comments on a file\",      \"required\": false,      \"type\": \"integer\"    },    \"version_number\": {      \"description\": \"Whether this folder will be synced by the Box sync clients or not.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"The user who first created file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"modified_by\": {      \"type\": \"object\",      \"description\": \"The user who last updated this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"owned_by\": {      \"type\": \"object\",      \"description\": \"The user who owns this file.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"shared_link\": {      \"type\": \"object\",      \"description\": \"The shared link object for this file.\",      \"properties\": {        \"url\": {          \"type\": \"string\"        },        \"download_url\": {          \"type\": \"string\"        },        \"vanity_url\": {          \"type\": \"string\"        },        \"is_password_enabled\": {          \"type\": \"boolean\"        },        \"unshared_at\": {          \"type\": \"string\"        },        \"download_count\": {          \"type\": \"integer\"        },        \"preview_count\": {          \"type\": \"integer\"        },        \"access\": {          \"type\": \"string\"        },        \"permissions\": {          \"properties\": {            \"can_download\": {              \"type\": \"boolean\"            },            \"can_preview\": {              \"type\": \"boolean\"            }          }        }      }    },    \"parent\": {      \"type\": \"object\",      \"description\": \"The folder this file is contained in.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"sequence_id\": {          \"type\": \"string\"        },        \"etag\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        }      }    },    \"item_status\": {      \"description\": \"Whether this item is deleted or not.\",      \"type\": \"string\"    },    \"folder_upload_email\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"access\": {          \"required\": false,          \"type\": \"string\"        },        \"email\": {          \"required\": false,          \"type\": \"string\"        }      }    },    \"item_collection\": {      \"required\": false,      \"type\": \"object\",      \"properties\": {        \"total_count\": {          \"required\": false,          \"type\": \"integer\"        },        \"entries\": {          \"required\": false,          \"type\": \"array\",          \"items\": {            \"required\": false,            \"type\": \"object\",            \"properties\": {              \"etag\": {                \"required\": false,                \"type\": \"string\"              },              \"id\": {                \"required\": false,                \"type\": \"string\"              },              \"name\": {                \"required\": false,                \"type\": \"string\"              },              \"sequence_id\": {                \"required\": false,                \"type\": \"string\"              },              \"sha1\": {                \"required\": false,                \"type\": \"string\"              },              \"type\": {                \"required\": false,                \"type\": \"string\"              }            }          }        },        \"offset\": {          \"required\": false,          \"type\": \"integer\"        },        \"limit\": {          \"required\": false,          \"type\": \"integer\"        }      }    }  }}"},
		};
        
		public static string GetSchema(HttpStatusCode statusCode)
        {
            return schemas.ContainsKey(statusCode) ? schemas[statusCode] : string.Empty;
        }
        
        public MultipleFilesFileIdPost()
        {
            names.Add((HttpStatusCode)200, "File");
            types.Add((HttpStatusCode)200, typeof(File));
            names.Add((HttpStatusCode)201, "FilesFileIdPostCreatedResponseContent");
            types.Add((HttpStatusCode)201, typeof(FilesFileIdPostCreatedResponseContent));
        }
        public File File { get; set; }

        /// <summary>
        /// The request has been fulfilled and resulted in a new resource beingcreated. 
        /// </summary>
        public FilesFileIdPostCreatedResponseContent FilesFileIdPostCreatedResponseContent { get; set; }


    } // end class

    /// <summary>
    /// Multiple Response Types CommentsPostOKResponseContent, Comment
    /// </summary>
    public partial class  MultipleCommentsPost : ApiMultipleResponse
    {
        static readonly Dictionary<HttpStatusCode, string> schemas = new Dictionary<HttpStatusCode, string>
        {
			{ (HttpStatusCode)200, "{  \"required\" : true ,  \"$schema\" : \"http://json-schema.org/draft-03/schema\" ,  \"type\" : \"object\" ,  \"properties\" : {    \"total_count\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"offset\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"limit\" : {      \"type\" : \"number\" ,      \"required\" : false    } ,    \"entries\" : {      \"type\" : \"array\" ,      \"required\" : false ,      \"items\" : [        {          \"type\" : \"object\" ,          \"properties\" : {            \"type\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"id\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"is_reply_comment\" : {              \"type\" : \"boolean\" ,              \"required\" : false            } ,            \"message\" : {              \"type\" : \"string\" ,              \"required\" : false            } ,            \"created_by\" : {              \"type\" : \"object\" ,              \"required\" : false ,              \"properties\" : {                \"type\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"id\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"name\" : {                  \"type\" : \"string\" ,                  \"required\" : false                } ,                \"login\" : {                  \"type\" : \"string\" ,                  \"required\" : false                }              }            } ,            \"created_at\" : {              \"type\" : \"string\" ,              \"required\" : false            }          }        }      ]    }  }}"},
			{ (HttpStatusCode)201, "{  \"type\": \"object\",  \"$schema\": \"http://json-schema.org/draft-03/schema\",  \"required\": false,  \"properties\": {    \"type\": {      \"description\": \"For comments is 'comment'.\",      \"type\": \"string\"    },    \"id\": {      \"description\": \"A unique string identifying this comment.\",      \"type\": \"string\"    },    \"is_reply_comment\": {      \"description\": \"Whether or not this comment is a reply to another comment.\",      \"type\": \"boolean\"    },    \"message\": {      \"description\": \"The comment text that the user typed.\",      \"type\": \"string\"    },    \"tagged_message\": {      \"description\": \"The string representing the comment text with @mentions included.\",      \"required\": false,      \"type\": \"string\"    },    \"created_by\": {      \"type\": \"object\",      \"description\": \"A mini user object representing the author of the comment.\",      \"properties\": {        \"type\": {          \"type\": \"string\"        },        \"id\": {          \"type\": \"string\"        },        \"name\": {          \"type\": \"string\"        },        \"login\": {          \"type\": \"string\"        }      }    },    \"created_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was created.\"    },    \"item\": {      \"type\": \"object\",      \"description\": \"The object this comment was placed on.\",      \"properties\": {        \"id\": {          \"type\": \"string\"        },        \"type\": {          \"type\": \"string\"        }      }    },    \"modified_at\": {      \"type\": \"string\",      \"description\": \"The time this comment was last modified.\"    }  }}"},
		};
        
		public static string GetSchema(HttpStatusCode statusCode)
        {
            return schemas.ContainsKey(statusCode) ? schemas[statusCode] : string.Empty;
        }
        
        public MultipleCommentsPost()
        {
            names.Add((HttpStatusCode)200, "CommentsPostOKResponseContent");
            types.Add((HttpStatusCode)200, typeof(CommentsPostOKResponseContent));
            names.Add((HttpStatusCode)201, "Comment");
            types.Add((HttpStatusCode)201, typeof(Comment));
        }
        public CommentsPostOKResponseContent CommentsPostOKResponseContent { get; set; }

        /// <summary>
        /// The request has been fulfilled and resulted in a new resource beingcreated. 
        /// </summary>
        public Comment Comment { get; set; }


    } // end class

    public partial class  DeleteFoldersQuery 
    {
        /// <summary>
        /// Whether to delete this folder if it has items inside of it.
        /// </summary>
		[JsonProperty("recursive")]
        public bool? Recursive { get; set; }


    } // end class

    public partial class  GetItemsQuery 
    {
        /// <summary>
        /// The number of items to return
        /// </summary>
		[JsonProperty("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// The item at which to begin the response
        /// </summary>
		[JsonProperty("offset")]
        public int? Offset { get; set; }

        /// <summary>
        /// Attribute(s) to include in the response
        /// </summary>
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  GetTrashItemsQuery 
    {
        /// <summary>
        /// The number of items to return
        /// </summary>
		[JsonProperty("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// The item at which to begin the response
        /// </summary>
		[JsonProperty("offset")]
        public int? Offset { get; set; }

        /// <summary>
        /// Attribute(s) to include in the response
        /// </summary>
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  GetThumbnailExtensionQuery 
    {
        /// <summary>
        /// The minimum height of the thumbnail.
        /// </summary>
		[JsonProperty("min_height")]
        public int? Min_height { get; set; }

        /// <summary>
        /// The minimum width of the thumbnail.
        /// </summary>
		[JsonProperty("min_width")]
        public int? Min_width { get; set; }

        /// <summary>
        /// The maximum height of the thumbnail
        /// </summary>
		[JsonProperty("max_height")]
        public int? Max_height { get; set; }

        /// <summary>
        /// The maximum width of the thumbnail
        /// </summary>
		[JsonProperty("max_width")]
        public int? Max_width { get; set; }


    } // end class

    public partial class  GetContentQuery 
    {
        /// <summary>
        /// The ID specific version of this file to download.
        /// </summary>
		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    public partial class  PostCommentsAQuery 
    {
        /// <summary>
        /// Attribute(s) to include in the response
        /// </summary>
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  GetCollaborationsAQuery 
    {
        /// <summary>
        /// The status of this collab. Can be accepted, pending, or rejected
        /// </summary>
		[JsonProperty("status")]
        public string Status { get; set; }


    } // end class

    public partial class  GetSearchQuery 
    {
        /// <summary>
        /// The number of items to return
        /// </summary>
		[JsonProperty("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// The item at which to begin the response
        /// </summary>
		[JsonProperty("offset")]
        public int? Offset { get; set; }

        /// <summary>
        /// The string to search for; can be matched against item names, descriptions, text content of a file, and other fields of the different item types. 
        /// </summary>
		[JsonProperty("query")]
        public string Query { get; set; }


    } // end class

    public partial class  GetEventsQuery 
    {
        /// <summary>
        /// The location in the event stream at which you want to start receiving events. Can specify special case _now_ to get 0 events and the lates stream position for initialization. A collection of events is returned. 
        /// </summary>
		[JsonProperty("stream_position")]
        public string Stream_position { get; set; }

        /// <summary>
        /// Limits the type of events returned
        /// </summary>
		[JsonProperty("stream_type")]
        public string Stream_type { get; set; }

        /// <summary>
        /// Limits the number of events returned
        /// </summary>
		[JsonProperty("limit")]
        public int? Limit { get; set; }


    } // end class

    public partial class  GetUsersQuery 
    {
        /// <summary>
        /// The number of items to return
        /// </summary>
		[JsonProperty("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// The item at which to begin the response
        /// </summary>
		[JsonProperty("offset")]
        public int? Offset { get; set; }

        /// <summary>
        /// A string used to filter the results to only users starting with the `filter_term` in either the name or the login 
        /// </summary>
		[JsonProperty("filter_term")]
        public string Filter_term { get; set; }


    } // end class

    public partial class  DeleteUsersQuery 
    {
        /// <summary>
        /// Whether the user should receive an email after update
        /// </summary>
		[JsonProperty("notify")]
        public bool? Notify { get; set; }

        /// <summary>
        /// Whether or not the user should be deleted even if this user still own files. 
        /// </summary>
		[JsonProperty("force")]
        public bool? Force { get; set; }


    } // end class

    public partial class  PutUsersQuery 
    {
        /// <summary>
        /// Whether the user should receive an email after update
        /// </summary>
		[JsonProperty("notify")]
        public bool? Notify { get; set; }


    } // end class

    public partial class  PutFoldersFolderIdQuery 
    {
        /// <summary>
        /// Whether the user should receive an email after update
        /// </summary>
		[JsonProperty("notify")]
        public bool? Notify { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /{folderId}
    /// </summary>
    public partial class  FoldersFolderIdUriParameters 
    {
        /// <summary>
        /// The ID of the parent folder 
        /// </summary>
		[JsonProperty("folderId")]
        public string FolderId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /items
    /// </summary>
    public partial class  FoldersFolderIdItemsUriParameters 
    {
		[JsonProperty("folderId")]
        public string FolderId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /copy
    /// </summary>
    public partial class  FoldersFolderIdCopyUriParameters 
    {
		[JsonProperty("folderId")]
        public string FolderId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /collaborations
    /// </summary>
    public partial class  FoldersFolderIdCollaborationsUriParameters 
    {
		[JsonProperty("folderId")]
        public string FolderId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /trash
    /// </summary>
    public partial class  FoldersFolderIdTrashUriParameters 
    {
		[JsonProperty("folderId")]
        public string FolderId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /files/{fileId}
    /// </summary>
    public partial class  FilesFileIdUriParameters 
    {
        /// <summary>
        /// Box&apos;s unique string identifying this file.
        /// </summary>
		[JsonProperty("fileId")]
        public string FileId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /versions
    /// </summary>
    public partial class  FilesFileIdVersionsUriParameters 
    {
		[JsonProperty("fileId")]
        public string FileId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /current
    /// </summary>
    public partial class  FilesFileIdVersionsCurrentUriParameters 
    {
		[JsonProperty("fileId")]
        public string FileId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /{version_id}
    /// </summary>
    public partial class  FilesFileIdVersionsVersionIdUriParameters 
    {
		[JsonProperty("version_id")]
        public string Version_id { get; set; }

		[JsonProperty("fileId")]
        public string FileId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /copy
    /// </summary>
    public partial class  FilesFileIdCopyUriParameters 
    {
		[JsonProperty("fileId")]
        public string FileId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /trash
    /// </summary>
    public partial class  FilesFileIdTrashUriParameters 
    {
		[JsonProperty("fileId")]
        public string FileId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /tasks
    /// </summary>
    public partial class  FilesFileIdTasksUriParameters 
    {
		[JsonProperty("fileId")]
        public string FileId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /thumbnail{extension}
    /// </summary>
    public partial class  FilesFileIdThumbnailExtensionUriParameters 
    {
        /// <summary>
        /// Generated file&apos;s extension. Currently thumbnails are only available in .png format and will only be generated for image file formats. 
        /// </summary>
		[JsonProperty("extension")]
        public string Extension { get; set; }

		[JsonProperty("fileId")]
        public string FileId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /comments
    /// </summary>
    public partial class  FilesFileIdCommentsUriParameters 
    {
		[JsonProperty("fileId")]
        public string FileId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /content
    /// </summary>
    public partial class  FilesFileIdContentUriParameters 
    {
		[JsonProperty("fileId")]
        public string FileId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /{commentId}
    /// </summary>
    public partial class  CommentsCommentIdUriParameters 
    {
        /// <summary>
        /// Box&apos;s unique string identifying this comment.
        /// </summary>
		[JsonProperty("commentId")]
        public string CommentId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /{id}
    /// </summary>
    public partial class  CollaborationsIdUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /{userId}
    /// </summary>
    public partial class  UsersUserIdUriParameters 
    {
        /// <summary>
        /// Box&apos;s unique string identifying this user.
        /// </summary>
		[JsonProperty("userId")]
        public string UserId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /email_aliases
    /// </summary>
    public partial class  UsersUserIdEmailAliasesUriParameters 
    {
		[JsonProperty("userId")]
        public string UserId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /{email_aliases_id}
    /// </summary>
    public partial class  UsersUserIdEmailAliasesEmailAliasesIdUriParameters 
    {
		[JsonProperty("email_aliases_id")]
        public string Email_aliases_id { get; set; }

		[JsonProperty("userId")]
        public string UserId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /folders/{folderId}
    /// </summary>
    public partial class  UsersUserIdFoldersFolderIdUriParameters 
    {
        /// <summary>
        /// Folder&apos;s identifier
        /// </summary>
		[JsonProperty("folderId")]
        public string FolderId { get; set; }

		[JsonProperty("userId")]
        public string UserId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /memberships
    /// </summary>
    public partial class  UsersUserIdMembershipsUriParameters 
    {
		[JsonProperty("userId")]
        public string UserId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /{taskId}
    /// </summary>
    public partial class  TasksTaskIdUriParameters 
    {
		[JsonProperty("taskId")]
        public string TaskId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /assignments
    /// </summary>
    public partial class  TasksTaskIdAssignmentsUriParameters 
    {
		[JsonProperty("taskId")]
        public string TaskId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /{task_assignments_id}
    /// </summary>
    public partial class  TaskAssignmentsTaskAssignmentsIdUriParameters 
    {
		[JsonProperty("task_assignments_id")]
        public string Task_assignments_id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /{id}
    /// </summary>
    public partial class  GroupsIdUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /memberships
    /// </summary>
    public partial class  GroupsIdMembershipsUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /collaborations
    /// </summary>
    public partial class  GroupsIdCollaborationsUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /{id}
    /// </summary>
    public partial class  GroupMembershipsIdUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    public partial class PostFoldersHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class PostByFolderIdFoldersHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class PostCopyHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class PostFilesFileIdHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class PostCurrentHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class PostFilesFileIdCopyHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class GetSharedItemsHeader : ApiHeader
    {

        /// <summary>
        /// A string containing the shared link and the password, it should be URL encoded, the format is: ```   shared_link=[shared resource&apos;s link] shared_link_password=[password for the link] ``` shared_link is mandatory. 
        /// </summary>
        public string BoxApi { get; set; }

    } // end class

    public partial class PostCommentsAHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class PostCollaborationsAHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class PostUsersHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class PostEmailAliasesHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class PostTasksAHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class PostTaskAssignmentsHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class PostGroupsHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class PostGroupMembershipsHeader : ApiHeader
    {

        /// <summary>
        /// The SHA1 hash of the file.
        /// </summary>
		[JsonProperty("Content-MD5")]
        public string ContentMD5 { get; set; }

    } // end class

    public partial class GetThumbnailExtensionAcceptedResponseHeader : ApiResponseHeader
    {
        /// <summary>
        /// Number of seconds to wait before retrying generating the thumbnail generation 
        /// </summary>
		[JsonProperty("Retry-After")]
        public int RetryAfter { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Items
    /// </summary>
    public partial class ItemsGetRequest : ApiRequest
    {
        public ItemsGetRequest(FoldersFolderIdItemsUriParameters UriParameters, GetItemsQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public GetItemsQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FoldersFolderIdItemsUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class Copy
    /// </summary>
    public partial class CopyPostRequest : ApiRequest
    {
        public CopyPostRequest(FoldersFolderIdCopyUriParameters UriParameters, PostCopyHeader Headers = null, CopyPostRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostCopyHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public CopyPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FoldersFolderIdCopyUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Collaborations
    /// </summary>
    public partial class CollaborationsGetRequest : ApiRequest
    {
        public CollaborationsGetRequest(FoldersFolderIdCollaborationsUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FoldersFolderIdCollaborationsUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Trash
    /// </summary>
    public partial class TrashDeleteRequest : ApiRequest
    {
        public TrashDeleteRequest(FoldersFolderIdTrashUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FoldersFolderIdTrashUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Trash
    /// </summary>
    public partial class TrashGetRequest : ApiRequest
    {
        public TrashGetRequest(FoldersFolderIdTrashUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FoldersFolderIdTrashUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class TrashItems
    /// </summary>
    public partial class TrashItemsGetRequest : ApiRequest
    {
        public TrashItemsGetRequest(GetTrashItemsQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public GetTrashItemsQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class Folders
    /// </summary>
    public partial class FoldersPostRequest : ApiRequest
    {
        public FoldersPostRequest(PostFoldersHeader Headers = null, FoldersPostRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostFoldersHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public FoldersPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Folders
    /// </summary>
    public partial class FoldersDeleteRequest : ApiRequest
    {
        public FoldersDeleteRequest(FoldersFolderIdUriParameters UriParameters, DeleteFoldersQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DeleteFoldersQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FoldersFolderIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method PostByFolderId of class Folders
    /// </summary>
    public partial class FoldersPostByFolderIdRequest : ApiRequest
    {
        public FoldersPostByFolderIdRequest(FoldersFolderIdUriParameters UriParameters, PostByFolderIdFoldersHeader Headers = null, FolderIdPostRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostByFolderIdFoldersHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public FolderIdPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FoldersFolderIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Folders
    /// </summary>
    public partial class FoldersPutRequest : ApiRequest
    {
        public FoldersPutRequest(FoldersFolderIdUriParameters UriParameters, FolderIdPutRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public FolderIdPutRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FoldersFolderIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Folders
    /// </summary>
    public partial class FoldersGetRequest : ApiRequest
    {
        public FoldersGetRequest(FoldersFolderIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FoldersFolderIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class Current
    /// </summary>
    public partial class CurrentPostRequest : ApiRequest
    {
        public CurrentPostRequest(FilesFileIdVersionsCurrentUriParameters UriParameters, PostCurrentHeader Headers = null, CurrentPostRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostCurrentHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public CurrentPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdVersionsCurrentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Versions
    /// </summary>
    public partial class VersionsGetRequest : ApiRequest
    {
        public VersionsGetRequest(FilesFileIdVersionsUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdVersionsUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Versions
    /// </summary>
    public partial class VersionsDeleteRequest : ApiRequest
    {
        public VersionsDeleteRequest(FilesFileIdVersionsVersionIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdVersionsVersionIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class FilesFileIdCopy
    /// </summary>
    public partial class FilesFileIdCopyPostRequest : ApiRequest
    {
        public FilesFileIdCopyPostRequest(FilesFileIdCopyUriParameters UriParameters, PostFilesFileIdCopyHeader Headers = null, CopyPostRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostFilesFileIdCopyHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public CopyPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdCopyUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class FilesFileIdTrash
    /// </summary>
    public partial class FilesFileIdTrashDeleteRequest : ApiRequest
    {
        public FilesFileIdTrashDeleteRequest(FilesFileIdTrashUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdTrashUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class FilesFileIdTrash
    /// </summary>
    public partial class FilesFileIdTrashGetRequest : ApiRequest
    {
        public FilesFileIdTrashGetRequest(FilesFileIdTrashUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdTrashUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Tasks
    /// </summary>
    public partial class TasksGetRequest : ApiRequest
    {
        public TasksGetRequest(FilesFileIdTasksUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdTasksUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ThumbnailExtension
    /// </summary>
    public partial class ThumbnailExtensionGetRequest : ApiRequest
    {
        public ThumbnailExtensionGetRequest(FilesFileIdThumbnailExtensionUriParameters UriParameters, GetThumbnailExtensionQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public GetThumbnailExtensionQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdThumbnailExtensionUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Comments
    /// </summary>
    public partial class CommentsGetRequest : ApiRequest
    {
        public CommentsGetRequest(FilesFileIdCommentsUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdCommentsUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Content
    /// </summary>
    public partial class ContentGetRequest : ApiRequest
    {
        public ContentGetRequest(FilesFileIdContentUriParameters UriParameters, GetContentQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public GetContentQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdContentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class FilesFileId
    /// </summary>
    public partial class FilesFileIdDeleteRequest : ApiRequest
    {
        public FilesFileIdDeleteRequest(FilesFileIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class FilesFileId
    /// </summary>
    public partial class FilesFileIdPostRequest : ApiRequest
    {
        public FilesFileIdPostRequest(FilesFileIdUriParameters UriParameters, PostFilesFileIdHeader Headers = null, FilesFileIdPostRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostFilesFileIdHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public FilesFileIdPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class FilesFileId
    /// </summary>
    public partial class FilesFileIdPutRequest : ApiRequest
    {
        public FilesFileIdPutRequest(FilesFileIdUriParameters UriParameters, FilesFileIdPutRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public FilesFileIdPutRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class FilesFileId
    /// </summary>
    public partial class FilesFileIdGetRequest : ApiRequest
    {
        public FilesFileIdGetRequest(FilesFileIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FilesFileIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SharedItems
    /// </summary>
    public partial class SharedItemsGetRequest : ApiRequest
    {
        public SharedItemsGetRequest(GetSharedItemsHeader Headers = null)
        {
            this.Headers = Headers;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public GetSharedItemsHeader Headers { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class CommentsA
    /// </summary>
    public partial class CommentsAPostRequest : ApiRequest
    {
        public CommentsAPostRequest(PostCommentsAHeader Headers = null, CommentsPostRequestContent Content = null, MediaTypeFormatter Formatter = null, PostCommentsAQuery Query = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
            this.Query = Query;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostCommentsAHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public CommentsPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request query string properties
        /// </summary>
        public PostCommentsAQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class CommentsA
    /// </summary>
    public partial class CommentsADeleteRequest : ApiRequest
    {
        public CommentsADeleteRequest(CommentsCommentIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public CommentsCommentIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class CommentsA
    /// </summary>
    public partial class CommentsAPutRequest : ApiRequest
    {
        public CommentsAPutRequest(CommentsCommentIdUriParameters UriParameters, CommentIdPutRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CommentIdPutRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public CommentsCommentIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class CommentsA
    /// </summary>
    public partial class CommentsAGetRequest : ApiRequest
    {
        public CommentsAGetRequest(CommentsCommentIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public CommentsCommentIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class CollaborationsA
    /// </summary>
    public partial class CollaborationsAPostRequest : ApiRequest
    {
        public CollaborationsAPostRequest(PostCollaborationsAHeader Headers = null, CollaborationsPostRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostCollaborationsAHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public CollaborationsPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class CollaborationsA
    /// </summary>
    public partial class CollaborationsAGetRequest : ApiRequest
    {
        public CollaborationsAGetRequest(GetCollaborationsAQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public GetCollaborationsAQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class CollaborationsA
    /// </summary>
    public partial class CollaborationsADeleteRequest : ApiRequest
    {
        public CollaborationsADeleteRequest(CollaborationsIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public CollaborationsIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class CollaborationsA
    /// </summary>
    public partial class CollaborationsAPutRequest : ApiRequest
    {
        public CollaborationsAPutRequest(CollaborationsIdUriParameters UriParameters, IdPutRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public IdPutRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public CollaborationsIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Search
    /// </summary>
    public partial class SearchGetRequest : ApiRequest
    {
        public SearchGetRequest(GetSearchQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public GetSearchQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Events
    /// </summary>
    public partial class EventsGetRequest : ApiRequest
    {
        public EventsGetRequest(GetEventsQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public GetEventsQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class EmailAliases
    /// </summary>
    public partial class EmailAliasesPostRequest : ApiRequest
    {
        public EmailAliasesPostRequest(UsersUserIdEmailAliasesUriParameters UriParameters, PostEmailAliasesHeader Headers = null, EmailAliasesPostRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostEmailAliasesHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public EmailAliasesPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UsersUserIdEmailAliasesUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class EmailAliases
    /// </summary>
    public partial class EmailAliasesGetRequest : ApiRequest
    {
        public EmailAliasesGetRequest(UsersUserIdEmailAliasesUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UsersUserIdEmailAliasesUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class EmailAliases
    /// </summary>
    public partial class EmailAliasesDeleteRequest : ApiRequest
    {
        public EmailAliasesDeleteRequest(UsersUserIdEmailAliasesEmailAliasesIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UsersUserIdEmailAliasesEmailAliasesIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class FoldersFolderId
    /// </summary>
    public partial class FoldersFolderIdPutRequest : ApiRequest
    {
        public FoldersFolderIdPutRequest(UsersUserIdFoldersFolderIdUriParameters UriParameters, FoldersFolderIdPutRequestContent Content = null, MediaTypeFormatter Formatter = null, PutFoldersFolderIdQuery Query = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public FoldersFolderIdPutRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request query string properties
        /// </summary>
        public PutFoldersFolderIdQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UsersUserIdFoldersFolderIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Memberships
    /// </summary>
    public partial class MembershipsGetRequest : ApiRequest
    {
        public MembershipsGetRequest(UsersUserIdMembershipsUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UsersUserIdMembershipsUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class Users
    /// </summary>
    public partial class UsersPostRequest : ApiRequest
    {
        public UsersPostRequest(PostUsersHeader Headers = null, UsersPostRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostUsersHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public UsersPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Users
    /// </summary>
    public partial class UsersGetRequest : ApiRequest
    {
        public UsersGetRequest(GetUsersQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public GetUsersQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Users
    /// </summary>
    public partial class UsersDeleteRequest : ApiRequest
    {
        public UsersDeleteRequest(UsersUserIdUriParameters UriParameters, DeleteUsersQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DeleteUsersQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UsersUserIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Users
    /// </summary>
    public partial class UsersPutRequest : ApiRequest
    {
        public UsersPutRequest(UsersUserIdUriParameters UriParameters, UserIdPutRequestContent Content = null, MediaTypeFormatter Formatter = null, PutUsersQuery Query = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public UserIdPutRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request query string properties
        /// </summary>
        public PutUsersQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UsersUserIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Assignments
    /// </summary>
    public partial class AssignmentsGetRequest : ApiRequest
    {
        public AssignmentsGetRequest(TasksTaskIdAssignmentsUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public TasksTaskIdAssignmentsUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class TasksA
    /// </summary>
    public partial class TasksAPostRequest : ApiRequest
    {
        public TasksAPostRequest(PostTasksAHeader Headers = null, TasksPostRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostTasksAHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public TasksPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class TasksA
    /// </summary>
    public partial class TasksADeleteRequest : ApiRequest
    {
        public TasksADeleteRequest(TasksTaskIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public TasksTaskIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class TasksA
    /// </summary>
    public partial class TasksAPutRequest : ApiRequest
    {
        public TasksAPutRequest(TasksTaskIdUriParameters UriParameters, TaskIdPutRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public TaskIdPutRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public TasksTaskIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class TasksA
    /// </summary>
    public partial class TasksAGetRequest : ApiRequest
    {
        public TasksAGetRequest(TasksTaskIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public TasksTaskIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class TaskAssignments
    /// </summary>
    public partial class TaskAssignmentsPostRequest : ApiRequest
    {
        public TaskAssignmentsPostRequest(PostTaskAssignmentsHeader Headers = null, TaskAssignmentsPostRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostTaskAssignmentsHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public TaskAssignmentsPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class TaskAssignments
    /// </summary>
    public partial class TaskAssignmentsDeleteRequest : ApiRequest
    {
        public TaskAssignmentsDeleteRequest(TaskAssignmentsTaskAssignmentsIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public TaskAssignmentsTaskAssignmentsIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class TaskAssignments
    /// </summary>
    public partial class TaskAssignmentsPutRequest : ApiRequest
    {
        public TaskAssignmentsPutRequest(TaskAssignmentsTaskAssignmentsIdUriParameters UriParameters, TaskAssignmentsIdPutRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public TaskAssignmentsIdPutRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public TaskAssignmentsTaskAssignmentsIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class TaskAssignments
    /// </summary>
    public partial class TaskAssignmentsGetRequest : ApiRequest
    {
        public TaskAssignmentsGetRequest(TaskAssignmentsTaskAssignmentsIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public TaskAssignmentsTaskAssignmentsIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class IdMemberships
    /// </summary>
    public partial class IdMembershipsGetRequest : ApiRequest
    {
        public IdMembershipsGetRequest(GroupsIdMembershipsUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GroupsIdMembershipsUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class IdCollaborations
    /// </summary>
    public partial class IdCollaborationsGetRequest : ApiRequest
    {
        public IdCollaborationsGetRequest(GroupsIdCollaborationsUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GroupsIdCollaborationsUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class Groups
    /// </summary>
    public partial class GroupsPostRequest : ApiRequest
    {
        public GroupsPostRequest(PostGroupsHeader Headers = null, GroupsPostRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostGroupsHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public GroupsPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Groups
    /// </summary>
    public partial class GroupsDeleteRequest : ApiRequest
    {
        public GroupsDeleteRequest(GroupsIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GroupsIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Groups
    /// </summary>
    public partial class GroupsPutRequest : ApiRequest
    {
        public GroupsPutRequest(GroupsIdUriParameters UriParameters, IdPutRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public IdPutRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GroupsIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class GroupMemberships
    /// </summary>
    public partial class GroupMembershipsPostRequest : ApiRequest
    {
        public GroupMembershipsPostRequest(PostGroupMembershipsHeader Headers = null, GroupMembershipsPostRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Headers = Headers;
            this.Content = Content;
            this.Formatter = Formatter;
        }

        /// <summary>
        /// Typed Request headers
        /// </summary>
        public PostGroupMembershipsHeader Headers { get; set; }
        /// <summary>
        /// Request content
        /// </summary>
        public GroupMembershipsPostRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class GroupMemberships
    /// </summary>
    public partial class GroupMembershipsDeleteRequest : ApiRequest
    {
        public GroupMembershipsDeleteRequest(GroupMembershipsIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GroupMembershipsIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class GroupMemberships
    /// </summary>
    public partial class GroupMembershipsPutRequest : ApiRequest
    {
        public GroupMembershipsPutRequest(GroupMembershipsIdUriParameters UriParameters, IdPutRequestContent Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public IdPutRequestContent Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GroupMembershipsIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class GroupMemberships
    /// </summary>
    public partial class GroupMembershipsGetRequest : ApiRequest
    {
        public GroupMembershipsGetRequest(GroupMembershipsIdUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GroupMembershipsIdUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Response object for method Get of class Items
    /// </summary>

    public partial class ItemsGetResponse : ApiResponse
    {


	    private ItemsGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ItemsGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<ItemsGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<ItemsGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Post of class Copy
    /// </summary>

    public partial class CopyPostResponse : ApiResponse
    {


	    private CopyPostOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public CopyPostOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<CopyPostOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<CopyPostOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Collaborations
    /// </summary>

    public partial class CollaborationsGetResponse : ApiResponse
    {


	    private CollaborationsGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public CollaborationsGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<CollaborationsGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<CollaborationsGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Trash
    /// </summary>

    public partial class TrashGetResponse : ApiResponse
    {


	    private TrashGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public TrashGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<TrashGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<TrashGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class TrashItems
    /// </summary>

    public partial class TrashItemsGetResponse : ApiResponse
    {


	    private TrashItemsGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public TrashItemsGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<TrashItemsGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<TrashItemsGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Post of class Folders
    /// </summary>

    public partial class FoldersPostResponse : ApiResponse
    {


	    private Folder typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public Folder Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<Folder>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<Folder>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method PostByFolderId of class Folders
    /// </summary>

    public partial class FoldersPostByFolderIdResponse : ApiResponse
    {

	    private MultipleFolderIdPost typedContent;
        /// <summary>
        /// Typed response content
        /// </summary>
        public MultipleFolderIdPost Content 
	    {
	        get
	        {
		        if (typedContent != null) 
					return typedContent;

		        typedContent = new MultipleFolderIdPost();
		        var task = Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync(typedContent.GetTypeByStatusCode(StatusCode), Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync(typedContent.GetTypeByStatusCode(StatusCode)).ConfigureAwait(false);
		        
		        var content = task.GetAwaiter().GetResult();
		        typedContent.SetPropertyByStatusCode(StatusCode, content);
		        return typedContent;
	        }
    	}  
		
		public static string GetSchema(HttpStatusCode statusCode)
        {
            return MultipleFolderIdPost.GetSchema(statusCode);
        }      

    } // end class

    /// <summary>
    /// Response object for method Put of class Folders
    /// </summary>

    public partial class FoldersPutResponse : ApiResponse
    {


	    private Folder typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public Folder Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<Folder>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<Folder>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Folders
    /// </summary>

    public partial class FoldersGetResponse : ApiResponse
    {


	    private Folder typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public Folder Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<Folder>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<Folder>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Post of class Current
    /// </summary>

    public partial class CurrentPostResponse : ApiResponse
    {


	    private CurrentPostCreatedResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public CurrentPostCreatedResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<CurrentPostCreatedResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<CurrentPostCreatedResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Versions
    /// </summary>

    public partial class VersionsGetResponse : ApiResponse
    {


	    private VersionsGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public VersionsGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<VersionsGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<VersionsGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Post of class FilesFileIdCopy
    /// </summary>

    public partial class FilesFileIdCopyPostResponse : ApiResponse
    {


	    private CopyPostOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public CopyPostOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<CopyPostOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<CopyPostOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class FilesFileIdTrash
    /// </summary>

    public partial class FilesFileIdTrashGetResponse : ApiResponse
    {


	    private TrashGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public TrashGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<TrashGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<TrashGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Tasks
    /// </summary>

    public partial class TasksGetResponse : ApiResponse
    {


	    private TasksGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public TasksGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<TasksGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<TasksGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ThumbnailExtension
    /// </summary>

    public partial class ThumbnailExtensionGetResponse : ApiResponse
    {

        /// <summary>
        /// Typed Response headers (defined in RAML)
        /// </summary>
        public Models.GetThumbnailExtensionAcceptedResponseHeader Headers { get; set; }

    } // end class

    /// <summary>
    /// Response object for method Get of class Comments
    /// </summary>

    public partial class CommentsGetResponse : ApiResponse
    {


	    private CommentsGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public CommentsGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<CommentsGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<CommentsGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Post of class FilesFileId
    /// </summary>

    public partial class FilesFileIdPostResponse : ApiResponse
    {

	    private MultipleFilesFileIdPost typedContent;
        /// <summary>
        /// Typed response content
        /// </summary>
        public MultipleFilesFileIdPost Content 
	    {
	        get
	        {
		        if (typedContent != null) 
					return typedContent;

		        typedContent = new MultipleFilesFileIdPost();
		        var task = Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync(typedContent.GetTypeByStatusCode(StatusCode), Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync(typedContent.GetTypeByStatusCode(StatusCode)).ConfigureAwait(false);
		        
		        var content = task.GetAwaiter().GetResult();
		        typedContent.SetPropertyByStatusCode(StatusCode, content);
		        return typedContent;
	        }
    	}  
		
		public static string GetSchema(HttpStatusCode statusCode)
        {
            return MultipleFilesFileIdPost.GetSchema(statusCode);
        }      

    } // end class

    /// <summary>
    /// Response object for method Put of class FilesFileId
    /// </summary>

    public partial class FilesFileIdPutResponse : ApiResponse
    {


	    private File typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public File Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<File>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<File>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class FilesFileId
    /// </summary>

    public partial class FilesFileIdGetResponse : ApiResponse
    {


	    private File typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public File Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<File>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<File>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SharedItems
    /// </summary>

    public partial class SharedItemsGetResponse : ApiResponse
    {


	    private SharedItemsGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SharedItemsGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<SharedItemsGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<SharedItemsGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Post of class CommentsA
    /// </summary>

    public partial class CommentsAPostResponse : ApiResponse
    {

	    private MultipleCommentsPost typedContent;
        /// <summary>
        /// Typed response content
        /// </summary>
        public MultipleCommentsPost Content 
	    {
	        get
	        {
		        if (typedContent != null) 
					return typedContent;

		        typedContent = new MultipleCommentsPost();
		        var task = Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync(typedContent.GetTypeByStatusCode(StatusCode), Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync(typedContent.GetTypeByStatusCode(StatusCode)).ConfigureAwait(false);
		        
		        var content = task.GetAwaiter().GetResult();
		        typedContent.SetPropertyByStatusCode(StatusCode, content);
		        return typedContent;
	        }
    	}  
		
		public static string GetSchema(HttpStatusCode statusCode)
        {
            return MultipleCommentsPost.GetSchema(statusCode);
        }      

    } // end class

    /// <summary>
    /// Response object for method Put of class CommentsA
    /// </summary>

    public partial class CommentsAPutResponse : ApiResponse
    {


	    private Comment typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public Comment Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<Comment>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<Comment>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class CommentsA
    /// </summary>

    public partial class CommentsAGetResponse : ApiResponse
    {


	    private Comment typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public Comment Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<Comment>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<Comment>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Post of class CollaborationsA
    /// </summary>

    public partial class CollaborationsAPostResponse : ApiResponse
    {


	    private Collaboration typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public Collaboration Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<Collaboration>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<Collaboration>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class CollaborationsA
    /// </summary>

    public partial class CollaborationsAGetResponse : ApiResponse
    {


	    private CollaborationsGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public CollaborationsGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<CollaborationsGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<CollaborationsGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Put of class CollaborationsA
    /// </summary>

    public partial class CollaborationsAPutResponse : ApiResponse
    {


	    private Collaboration typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public Collaboration Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<Collaboration>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<Collaboration>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Search
    /// </summary>

    public partial class SearchGetResponse : ApiResponse
    {


	    private SearchGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SearchGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<SearchGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<SearchGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Events
    /// </summary>

    public partial class EventsGetResponse : ApiResponse
    {


	    private EventsGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public EventsGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<EventsGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<EventsGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Me
    /// </summary>

    public partial class MeGetResponse : ApiResponse
    {


	    private MeGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MeGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<MeGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<MeGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Post of class EmailAliases
    /// </summary>

    public partial class EmailAliasesPostResponse : ApiResponse
    {


	    private EmailAliasesPostOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public EmailAliasesPostOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<EmailAliasesPostOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<EmailAliasesPostOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class EmailAliases
    /// </summary>

    public partial class EmailAliasesGetResponse : ApiResponse
    {


	    private EmailAliasesGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public EmailAliasesGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<EmailAliasesGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<EmailAliasesGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Put of class FoldersFolderId
    /// </summary>

    public partial class FoldersFolderIdPutResponse : ApiResponse
    {


	    private FoldersFolderIdPutOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public FoldersFolderIdPutOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<FoldersFolderIdPutOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<FoldersFolderIdPutOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Memberships
    /// </summary>

    public partial class MembershipsGetResponse : ApiResponse
    {


	    private MembershipsGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MembershipsGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<MembershipsGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<MembershipsGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Post of class Users
    /// </summary>

    public partial class UsersPostResponse : ApiResponse
    {


	    private User typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public User Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<User>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<User>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Users
    /// </summary>

    public partial class UsersGetResponse : ApiResponse
    {


	    private UsersGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public UsersGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<UsersGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<UsersGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Put of class Users
    /// </summary>

    public partial class UsersPutResponse : ApiResponse
    {


	    private User typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public User Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<User>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<User>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Assignments
    /// </summary>

    public partial class AssignmentsGetResponse : ApiResponse
    {


	    private AssignmentsGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AssignmentsGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<AssignmentsGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<AssignmentsGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Post of class TasksA
    /// </summary>

    public partial class TasksAPostResponse : ApiResponse
    {


	    private Collaboration typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public Collaboration Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<Collaboration>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<Collaboration>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Put of class TasksA
    /// </summary>

    public partial class TasksAPutResponse : ApiResponse
    {


	    private Task typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public Task Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<Task>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<Task>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class TasksA
    /// </summary>

    public partial class TasksAGetResponse : ApiResponse
    {


	    private Task typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public Task Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<Task>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<Task>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Post of class TaskAssignments
    /// </summary>

    public partial class TaskAssignmentsPostResponse : ApiResponse
    {


	    private TaskAssignment typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public TaskAssignment Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<TaskAssignment>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<TaskAssignment>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Put of class TaskAssignments
    /// </summary>

    public partial class TaskAssignmentsPutResponse : ApiResponse
    {


	    private TaskAssignment typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public TaskAssignment Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<TaskAssignment>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<TaskAssignment>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class TaskAssignments
    /// </summary>

    public partial class TaskAssignmentsGetResponse : ApiResponse
    {


	    private TaskAssignment typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public TaskAssignment Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<TaskAssignment>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<TaskAssignment>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class IdMemberships
    /// </summary>

    public partial class IdMembershipsGetResponse : ApiResponse
    {


	    private MembershipsGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MembershipsGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<MembershipsGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<MembershipsGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class IdCollaborations
    /// </summary>

    public partial class IdCollaborationsGetResponse : ApiResponse
    {


	    private CollaborationsGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public CollaborationsGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<CollaborationsGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<CollaborationsGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Post of class Groups
    /// </summary>

    public partial class GroupsPostResponse : ApiResponse
    {


	    private Group typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public Group Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<Group>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<Group>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Groups
    /// </summary>

    public partial class GroupsGetResponse : ApiResponse
    {


	    private GroupsGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public GroupsGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<GroupsGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<GroupsGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Put of class Groups
    /// </summary>

    public partial class GroupsPutResponse : ApiResponse
    {


	    private Group typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public Group Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<Group>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<Group>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Post of class GroupMemberships
    /// </summary>

    public partial class GroupMembershipsPostResponse : ApiResponse
    {


	    private GroupMembershipsPostCreatedResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public GroupMembershipsPostCreatedResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<GroupMembershipsPostCreatedResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<GroupMembershipsPostCreatedResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Put of class GroupMemberships
    /// </summary>

    public partial class GroupMembershipsPutResponse : ApiResponse
    {


	    private IdPutOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IdPutOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<IdPutOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<IdPutOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class GroupMemberships
    /// </summary>

    public partial class GroupMembershipsGetResponse : ApiResponse
    {


	    private IdGetOKResponseContent typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IdGetOKResponseContent Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

		        var task =  Formatters != null && Formatters.Any() 
                            ? RawContent.ReadAsAsync<IdGetOKResponseContent>(Formatters).ConfigureAwait(false)
                            : RawContent.ReadAsAsync<IdGetOKResponseContent>().ConfigureAwait(false);
		        
		        typedContent = task.GetAwaiter().GetResult();
		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// This user&apos;s enterprise role.
    /// </summary>
	
	public enum Role
	{
		admin, coadmin, user
    }

    /// <summary>
    /// Can be active or inactive.
    /// </summary>
	
	public enum Status
	{
		active, inactive
    }

	
	public enum EventType
	{
		ITEM_CREATE, ITEM_UPLOAD, COMMENT_CREATE, ITEM_DOWNLOAD, ITEM_PREVIEW, ITEM_MOVE, ITEM_COPY, TASK_ASSIGNMENT_CREATE, LOCK_CREATE, LOCK_DESTROY, ITEM_TRASH, ITEM_UNDELETE_VIA_TRASH, COLLAB_ADD_COLLABORATOR, COLLAB_INVITE_COLLABORATOR, ITEM_SYNC, ITEM_UNSYNC, ITEM_RENAME, ITEM_SHARED_CREATE, ITEM_SHARED_UNSHARE, ITEM_SHARED, TAG_ITEM_CREATE, ADD_LOGIN_ACTIVITY_DEVICE, REMOVE_LOGIN_ACTIVITY_DEVICE, CHANGE_ADMIN_ROLE
    }

    // Unable to parse the following Schemas. Please note that JSON Schema version 4 is not supported
    // NewTask - Could not parse JSON Schema. v3 parser message: Invalid JSON schema type: review. v4 parser message: Invalid JSON schema type: review

} // end Models namespace
